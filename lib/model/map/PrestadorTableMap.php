<?php


/**
 * This class defines the structure of the 'prestador' table.
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
<<<<<<< HEAD
 * 07/29/10 12:37:34
=======
<<<<<<< HEAD
 * 07/29/10 00:07:03
=======
 * 07/28/10 21:52:42
>>>>>>> d566463288c5b8110a13446cf8dcc22996c79238
>>>>>>> 48ea370b158b87b5f84de3ad8d71891aac6362b0
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class PrestadorTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.PrestadorTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('prestador');
		$this->setPhpName('Prestador');
		$this->setClassname('Prestador');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		$this->setPrimaryKeyMethodInfo('prestador_pre_id_seq');
		// columns
		$this->addPrimaryKey('PRE_ID', 'PreId', 'INTEGER', true, null, null);
		$this->addForeignKey('PRE_RAN_ID', 'PreRanId', 'INTEGER', 'rango', 'RAN_ID', true, null, null);
		$this->addForeignKey('PRE_USU_ID', 'PreUsuId', 'INTEGER', 'usuario', 'USU_ID', true, null, null);
		$this->addColumn('PRE_IDENTIFICACION_PRESTADOR', 'PreIdentificacionPrestador', 'VARCHAR', true, 50, null);
		$this->addColumn('PRE_TIPO_IDENTIFICACION_PRESTADOR', 'PreTipoIdentificacionPrestador', 'VARCHAR', true, 50, null);
		$this->addColumn('PRE_NOMBRE_PRESTADOR', 'PreNombrePrestador', 'VARCHAR', true, 200, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
    $this->addRelation('Rango', 'Rango', RelationMap::MANY_TO_ONE, array('pre_ran_id' => 'ran_id', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('Usuario', 'Usuario', RelationMap::MANY_TO_ONE, array('pre_usu_id' => 'usu_id', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('Informacionvisual', 'Informacionvisual', RelationMap::ONE_TO_MANY, array('pre_id' => 'iv_pre_id', ), 'RESTRICT', 'CASCADE');
    $this->addRelation('Prestadorporservicio', 'Prestadorporservicio', RelationMap::ONE_TO_MANY, array('pre_id' => 'ppsg_pre_id', ), null, 'CASCADE');
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
		);
	} // getBehaviors()

} // PrestadorTableMap
