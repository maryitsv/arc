<?php

/**
 * Base class that represents a row from the 'proteccionfuentessuperficialesagua' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
<<<<<<< HEAD
 * 07/28/10 13:25:20
=======
 * 07/28/10 15:52:54
>>>>>>> 9ae73683bd9fcb839d0feb5ce3110184317c3501
 *
 * @package    lib.model.om
 */
abstract class BaseProteccionfuentessuperficialesagua extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ProteccionfuentessuperficialesaguaPeer
	 */
	protected static $peer;

	/**
	 * The value for the pfu_id field.
	 * @var        int
	 */
	protected $pfu_id;

	/**
	 * The value for the pfu_mic_id field.
	 * @var        int
	 */
	protected $pfu_mic_id;

	/**
	 * The value for the pfu_programas_aislamiento field.
	 * @var        string
	 */
	protected $pfu_programas_aislamiento;

	/**
	 * The value for the pfu_programas_reforestacion field.
	 * @var        string
	 */
	protected $pfu_programas_reforestacion;

	/**
	 * The value for the pfu_programas_mejoramiento_uso_suelo field.
	 * @var        string
	 */
	protected $pfu_programas_mejoramiento_uso_suelo;

	/**
	 * The value for the pfu_programas_adquisicion_tierra field.
	 * @var        string
	 */
	protected $pfu_programas_adquisicion_tierra;

	/**
	 * The value for the pfu_programas_educacion_ambiental field.
	 * @var        string
	 */
	protected $pfu_programas_educacion_ambiental;

	/**
	 * The value for the pfu_programas_reduccion_uso_agroquimicos field.
	 * @var        string
	 */
	protected $pfu_programas_reduccion_uso_agroquimicos;

	/**
	 * The value for the pfu_situacion_arriba_captacion_reserva field.
	 * @var        string
	 */
	protected $pfu_situacion_arriba_captacion_reserva;

	/**
	 * The value for the pfu_situacion_arriba_captacion_protegida field.
	 * @var        string
	 */
	protected $pfu_situacion_arriba_captacion_protegida;

	/**
	 * The value for the pfu_cobertura_forestal_bosque_natural field.
	 * @var        string
	 */
	protected $pfu_cobertura_forestal_bosque_natural;

	/**
	 * The value for the pfu_cobertura_forestal_bosque_protector field.
	 * @var        string
	 */
	protected $pfu_cobertura_forestal_bosque_protector;

	/**
	 * The value for the pfu_cobertura_forestal_bosque_protector_productor field.
	 * @var        string
	 */
	protected $pfu_cobertura_forestal_bosque_protector_productor;

	/**
	 * The value for the pfu_cobertura_forestal_productor field.
	 * @var        string
	 */
	protected $pfu_cobertura_forestal_productor;

	/**
	 * The value for the pfu_cobertura_forestal_regeneracion_natural field.
	 * @var        string
	 */
	protected $pfu_cobertura_forestal_regeneracion_natural;

	/**
	 * The value for the pfu_cobertura_forestal_bosque_natural_tendencia field.
	 * @var        string
	 */
	protected $pfu_cobertura_forestal_bosque_natural_tendencia;

	/**
	 * The value for the pfu_cobertura_forestal_bosque_protector_tendencia field.
	 * @var        string
	 */
	protected $pfu_cobertura_forestal_bosque_protector_tendencia;

	/**
	 * The value for the pfu_cobertura_forestal_bosque_protector_productor_tendencia field.
	 * @var        string
	 */
	protected $pfu_cobertura_forestal_bosque_protector_productor_tendencia;

	/**
	 * The value for the pfu_cobertura_forestal_productor_tendencia field.
	 * @var        string
	 */
	protected $pfu_cobertura_forestal_productor_tendencia;

	/**
	 * The value for the pfu_cobertura_forestal_regeneracion_natural_tendencia field.
	 * @var        string
	 */
	protected $pfu_cobertura_forestal_regeneracion_natural_tendencia;

	/**
	 * The value for the pfu_aislamiento_franja_amarilla_microcuenca field.
	 * @var        string
	 */
	protected $pfu_aislamiento_franja_amarilla_microcuenca;

	/**
	 * The value for the pfu_cobertura_forestal_area_protectora_cauce field.
	 * @var        string
	 */
	protected $pfu_cobertura_forestal_area_protectora_cauce;

	/**
	 * The value for the pfu_area_microcuenca_propiedad_acueducto field.
	 * @var        string
	 */
	protected $pfu_area_microcuenca_propiedad_acueducto;

	/**
	 * The value for the pfu_cobertura_forestal_mas_usada field.
	 * @var        string
	 */
	protected $pfu_cobertura_forestal_mas_usada;

	/**
	 * @var        Microcuencas
	 */
	protected $aMicrocuencas;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'ProteccionfuentessuperficialesaguaPeer';

	/**
	 * Get the [pfu_id] column value.
	 * 
	 * @return     int
	 */
	public function getPfuId()
	{
		return $this->pfu_id;
	}

	/**
	 * Get the [pfu_mic_id] column value.
	 * 
	 * @return     int
	 */
	public function getPfuMicId()
	{
		return $this->pfu_mic_id;
	}

	/**
	 * Get the [pfu_programas_aislamiento] column value.
	 * 
	 * @return     string
	 */
	public function getPfuProgramasAislamiento()
	{
		return $this->pfu_programas_aislamiento;
	}

	/**
	 * Get the [pfu_programas_reforestacion] column value.
	 * 
	 * @return     string
	 */
	public function getPfuProgramasReforestacion()
	{
		return $this->pfu_programas_reforestacion;
	}

	/**
	 * Get the [pfu_programas_mejoramiento_uso_suelo] column value.
	 * 
	 * @return     string
	 */
	public function getPfuProgramasMejoramientoUsoSuelo()
	{
		return $this->pfu_programas_mejoramiento_uso_suelo;
	}

	/**
	 * Get the [pfu_programas_adquisicion_tierra] column value.
	 * 
	 * @return     string
	 */
	public function getPfuProgramasAdquisicionTierra()
	{
		return $this->pfu_programas_adquisicion_tierra;
	}

	/**
	 * Get the [pfu_programas_educacion_ambiental] column value.
	 * 
	 * @return     string
	 */
	public function getPfuProgramasEducacionAmbiental()
	{
		return $this->pfu_programas_educacion_ambiental;
	}

	/**
	 * Get the [pfu_programas_reduccion_uso_agroquimicos] column value.
	 * 
	 * @return     string
	 */
	public function getPfuProgramasReduccionUsoAgroquimicos()
	{
		return $this->pfu_programas_reduccion_uso_agroquimicos;
	}

	/**
	 * Get the [pfu_situacion_arriba_captacion_reserva] column value.
	 * 
	 * @return     string
	 */
	public function getPfuSituacionArribaCaptacionReserva()
	{
		return $this->pfu_situacion_arriba_captacion_reserva;
	}

	/**
	 * Get the [pfu_situacion_arriba_captacion_protegida] column value.
	 * 
	 * @return     string
	 */
	public function getPfuSituacionArribaCaptacionProtegida()
	{
		return $this->pfu_situacion_arriba_captacion_protegida;
	}

	/**
	 * Get the [pfu_cobertura_forestal_bosque_natural] column value.
	 * 
	 * @return     string
	 */
	public function getPfuCoberturaForestalBosqueNatural()
	{
		return $this->pfu_cobertura_forestal_bosque_natural;
	}

	/**
	 * Get the [pfu_cobertura_forestal_bosque_protector] column value.
	 * 
	 * @return     string
	 */
	public function getPfuCoberturaForestalBosqueProtector()
	{
		return $this->pfu_cobertura_forestal_bosque_protector;
	}

	/**
	 * Get the [pfu_cobertura_forestal_bosque_protector_productor] column value.
	 * 
	 * @return     string
	 */
	public function getPfuCoberturaForestalBosqueProtectorProductor()
	{
		return $this->pfu_cobertura_forestal_bosque_protector_productor;
	}

	/**
	 * Get the [pfu_cobertura_forestal_productor] column value.
	 * 
	 * @return     string
	 */
	public function getPfuCoberturaForestalProductor()
	{
		return $this->pfu_cobertura_forestal_productor;
	}

	/**
	 * Get the [pfu_cobertura_forestal_regeneracion_natural] column value.
	 * 
	 * @return     string
	 */
	public function getPfuCoberturaForestalRegeneracionNatural()
	{
		return $this->pfu_cobertura_forestal_regeneracion_natural;
	}

	/**
	 * Get the [pfu_cobertura_forestal_bosque_natural_tendencia] column value.
	 * 
	 * @return     string
	 */
	public function getPfuCoberturaForestalBosqueNaturalTendencia()
	{
		return $this->pfu_cobertura_forestal_bosque_natural_tendencia;
	}

	/**
	 * Get the [pfu_cobertura_forestal_bosque_protector_tendencia] column value.
	 * 
	 * @return     string
	 */
	public function getPfuCoberturaForestalBosqueProtectorTendencia()
	{
		return $this->pfu_cobertura_forestal_bosque_protector_tendencia;
	}

	/**
	 * Get the [pfu_cobertura_forestal_bosque_protector_productor_tendencia] column value.
	 * 
	 * @return     string
	 */
	public function getPfuCoberturaForestalBosqueProtectorProductorTendencia()
	{
		return $this->pfu_cobertura_forestal_bosque_protector_productor_tendencia;
	}

	/**
	 * Get the [pfu_cobertura_forestal_productor_tendencia] column value.
	 * 
	 * @return     string
	 */
	public function getPfuCoberturaForestalProductorTendencia()
	{
		return $this->pfu_cobertura_forestal_productor_tendencia;
	}

	/**
	 * Get the [pfu_cobertura_forestal_regeneracion_natural_tendencia] column value.
	 * 
	 * @return     string
	 */
	public function getPfuCoberturaForestalRegeneracionNaturalTendencia()
	{
		return $this->pfu_cobertura_forestal_regeneracion_natural_tendencia;
	}

	/**
	 * Get the [pfu_aislamiento_franja_amarilla_microcuenca] column value.
	 * 
	 * @return     string
	 */
	public function getPfuAislamientoFranjaAmarillaMicrocuenca()
	{
		return $this->pfu_aislamiento_franja_amarilla_microcuenca;
	}

	/**
	 * Get the [pfu_cobertura_forestal_area_protectora_cauce] column value.
	 * 
	 * @return     string
	 */
	public function getPfuCoberturaForestalAreaProtectoraCauce()
	{
		return $this->pfu_cobertura_forestal_area_protectora_cauce;
	}

	/**
	 * Get the [pfu_area_microcuenca_propiedad_acueducto] column value.
	 * 
	 * @return     string
	 */
	public function getPfuAreaMicrocuencaPropiedadAcueducto()
	{
		return $this->pfu_area_microcuenca_propiedad_acueducto;
	}

	/**
	 * Get the [pfu_cobertura_forestal_mas_usada] column value.
	 * 
	 * @return     string
	 */
	public function getPfuCoberturaForestalMasUsada()
	{
		return $this->pfu_cobertura_forestal_mas_usada;
	}

	/**
	 * Set the value of [pfu_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 */
	public function setPfuId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->pfu_id !== $v) {
			$this->pfu_id = $v;
			$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_ID;
		}

		return $this;
	} // setPfuId()

	/**
	 * Set the value of [pfu_mic_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 */
	public function setPfuMicId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->pfu_mic_id !== $v) {
			$this->pfu_mic_id = $v;
			$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_MIC_ID;
		}

		if ($this->aMicrocuencas !== null && $this->aMicrocuencas->getMicId() !== $v) {
			$this->aMicrocuencas = null;
		}

		return $this;
	} // setPfuMicId()

	/**
	 * Set the value of [pfu_programas_aislamiento] column.
	 * 
	 * @param      string $v new value
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 */
	public function setPfuProgramasAislamiento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pfu_programas_aislamiento !== $v) {
			$this->pfu_programas_aislamiento = $v;
			$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_PROGRAMAS_AISLAMIENTO;
		}

		return $this;
	} // setPfuProgramasAislamiento()

	/**
	 * Set the value of [pfu_programas_reforestacion] column.
	 * 
	 * @param      string $v new value
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 */
	public function setPfuProgramasReforestacion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pfu_programas_reforestacion !== $v) {
			$this->pfu_programas_reforestacion = $v;
			$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_PROGRAMAS_REFORESTACION;
		}

		return $this;
	} // setPfuProgramasReforestacion()

	/**
	 * Set the value of [pfu_programas_mejoramiento_uso_suelo] column.
	 * 
	 * @param      string $v new value
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 */
	public function setPfuProgramasMejoramientoUsoSuelo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pfu_programas_mejoramiento_uso_suelo !== $v) {
			$this->pfu_programas_mejoramiento_uso_suelo = $v;
			$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_PROGRAMAS_MEJORAMIENTO_USO_SUELO;
		}

		return $this;
	} // setPfuProgramasMejoramientoUsoSuelo()

	/**
	 * Set the value of [pfu_programas_adquisicion_tierra] column.
	 * 
	 * @param      string $v new value
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 */
	public function setPfuProgramasAdquisicionTierra($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pfu_programas_adquisicion_tierra !== $v) {
			$this->pfu_programas_adquisicion_tierra = $v;
			$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_PROGRAMAS_ADQUISICION_TIERRA;
		}

		return $this;
	} // setPfuProgramasAdquisicionTierra()

	/**
	 * Set the value of [pfu_programas_educacion_ambiental] column.
	 * 
	 * @param      string $v new value
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 */
	public function setPfuProgramasEducacionAmbiental($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pfu_programas_educacion_ambiental !== $v) {
			$this->pfu_programas_educacion_ambiental = $v;
			$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_PROGRAMAS_EDUCACION_AMBIENTAL;
		}

		return $this;
	} // setPfuProgramasEducacionAmbiental()

	/**
	 * Set the value of [pfu_programas_reduccion_uso_agroquimicos] column.
	 * 
	 * @param      string $v new value
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 */
	public function setPfuProgramasReduccionUsoAgroquimicos($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pfu_programas_reduccion_uso_agroquimicos !== $v) {
			$this->pfu_programas_reduccion_uso_agroquimicos = $v;
			$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_PROGRAMAS_REDUCCION_USO_AGROQUIMICOS;
		}

		return $this;
	} // setPfuProgramasReduccionUsoAgroquimicos()

	/**
	 * Set the value of [pfu_situacion_arriba_captacion_reserva] column.
	 * 
	 * @param      string $v new value
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 */
	public function setPfuSituacionArribaCaptacionReserva($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pfu_situacion_arriba_captacion_reserva !== $v) {
			$this->pfu_situacion_arriba_captacion_reserva = $v;
			$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_SITUACION_ARRIBA_CAPTACION_RESERVA;
		}

		return $this;
	} // setPfuSituacionArribaCaptacionReserva()

	/**
	 * Set the value of [pfu_situacion_arriba_captacion_protegida] column.
	 * 
	 * @param      string $v new value
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 */
	public function setPfuSituacionArribaCaptacionProtegida($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pfu_situacion_arriba_captacion_protegida !== $v) {
			$this->pfu_situacion_arriba_captacion_protegida = $v;
			$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_SITUACION_ARRIBA_CAPTACION_PROTEGIDA;
		}

		return $this;
	} // setPfuSituacionArribaCaptacionProtegida()

	/**
	 * Set the value of [pfu_cobertura_forestal_bosque_natural] column.
	 * 
	 * @param      string $v new value
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 */
	public function setPfuCoberturaForestalBosqueNatural($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pfu_cobertura_forestal_bosque_natural !== $v) {
			$this->pfu_cobertura_forestal_bosque_natural = $v;
			$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_BOSQUE_NATURAL;
		}

		return $this;
	} // setPfuCoberturaForestalBosqueNatural()

	/**
	 * Set the value of [pfu_cobertura_forestal_bosque_protector] column.
	 * 
	 * @param      string $v new value
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 */
	public function setPfuCoberturaForestalBosqueProtector($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pfu_cobertura_forestal_bosque_protector !== $v) {
			$this->pfu_cobertura_forestal_bosque_protector = $v;
			$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_BOSQUE_PROTECTOR;
		}

		return $this;
	} // setPfuCoberturaForestalBosqueProtector()

	/**
	 * Set the value of [pfu_cobertura_forestal_bosque_protector_productor] column.
	 * 
	 * @param      string $v new value
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 */
	public function setPfuCoberturaForestalBosqueProtectorProductor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pfu_cobertura_forestal_bosque_protector_productor !== $v) {
			$this->pfu_cobertura_forestal_bosque_protector_productor = $v;
			$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_BOSQUE_PROTECTOR_PRODUCTOR;
		}

		return $this;
	} // setPfuCoberturaForestalBosqueProtectorProductor()

	/**
	 * Set the value of [pfu_cobertura_forestal_productor] column.
	 * 
	 * @param      string $v new value
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 */
	public function setPfuCoberturaForestalProductor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pfu_cobertura_forestal_productor !== $v) {
			$this->pfu_cobertura_forestal_productor = $v;
			$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_PRODUCTOR;
		}

		return $this;
	} // setPfuCoberturaForestalProductor()

	/**
	 * Set the value of [pfu_cobertura_forestal_regeneracion_natural] column.
	 * 
	 * @param      string $v new value
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 */
	public function setPfuCoberturaForestalRegeneracionNatural($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pfu_cobertura_forestal_regeneracion_natural !== $v) {
			$this->pfu_cobertura_forestal_regeneracion_natural = $v;
			$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_REGENERACION_NATURAL;
		}

		return $this;
	} // setPfuCoberturaForestalRegeneracionNatural()

	/**
	 * Set the value of [pfu_cobertura_forestal_bosque_natural_tendencia] column.
	 * 
	 * @param      string $v new value
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 */
	public function setPfuCoberturaForestalBosqueNaturalTendencia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pfu_cobertura_forestal_bosque_natural_tendencia !== $v) {
			$this->pfu_cobertura_forestal_bosque_natural_tendencia = $v;
			$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_BOSQUE_NATURAL_TENDENCIA;
		}

		return $this;
	} // setPfuCoberturaForestalBosqueNaturalTendencia()

	/**
	 * Set the value of [pfu_cobertura_forestal_bosque_protector_tendencia] column.
	 * 
	 * @param      string $v new value
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 */
	public function setPfuCoberturaForestalBosqueProtectorTendencia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pfu_cobertura_forestal_bosque_protector_tendencia !== $v) {
			$this->pfu_cobertura_forestal_bosque_protector_tendencia = $v;
			$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_BOSQUE_PROTECTOR_TENDENCIA;
		}

		return $this;
	} // setPfuCoberturaForestalBosqueProtectorTendencia()

	/**
	 * Set the value of [pfu_cobertura_forestal_bosque_protector_productor_tendencia] column.
	 * 
	 * @param      string $v new value
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 */
	public function setPfuCoberturaForestalBosqueProtectorProductorTendencia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pfu_cobertura_forestal_bosque_protector_productor_tendencia !== $v) {
			$this->pfu_cobertura_forestal_bosque_protector_productor_tendencia = $v;
			$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_BOSQUE_PROTECTOR_PRODUCTOR_TENDENCIA;
		}

		return $this;
	} // setPfuCoberturaForestalBosqueProtectorProductorTendencia()

	/**
	 * Set the value of [pfu_cobertura_forestal_productor_tendencia] column.
	 * 
	 * @param      string $v new value
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 */
	public function setPfuCoberturaForestalProductorTendencia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pfu_cobertura_forestal_productor_tendencia !== $v) {
			$this->pfu_cobertura_forestal_productor_tendencia = $v;
			$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_PRODUCTOR_TENDENCIA;
		}

		return $this;
	} // setPfuCoberturaForestalProductorTendencia()

	/**
	 * Set the value of [pfu_cobertura_forestal_regeneracion_natural_tendencia] column.
	 * 
	 * @param      string $v new value
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 */
	public function setPfuCoberturaForestalRegeneracionNaturalTendencia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pfu_cobertura_forestal_regeneracion_natural_tendencia !== $v) {
			$this->pfu_cobertura_forestal_regeneracion_natural_tendencia = $v;
			$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_REGENERACION_NATURAL_TENDENCIA;
		}

		return $this;
	} // setPfuCoberturaForestalRegeneracionNaturalTendencia()

	/**
	 * Set the value of [pfu_aislamiento_franja_amarilla_microcuenca] column.
	 * 
	 * @param      string $v new value
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 */
	public function setPfuAislamientoFranjaAmarillaMicrocuenca($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pfu_aislamiento_franja_amarilla_microcuenca !== $v) {
			$this->pfu_aislamiento_franja_amarilla_microcuenca = $v;
			$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_AISLAMIENTO_FRANJA_AMARILLA_MICROCUENCA;
		}

		return $this;
	} // setPfuAislamientoFranjaAmarillaMicrocuenca()

	/**
	 * Set the value of [pfu_cobertura_forestal_area_protectora_cauce] column.
	 * 
	 * @param      string $v new value
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 */
	public function setPfuCoberturaForestalAreaProtectoraCauce($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pfu_cobertura_forestal_area_protectora_cauce !== $v) {
			$this->pfu_cobertura_forestal_area_protectora_cauce = $v;
			$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_AREA_PROTECTORA_CAUCE;
		}

		return $this;
	} // setPfuCoberturaForestalAreaProtectoraCauce()

	/**
	 * Set the value of [pfu_area_microcuenca_propiedad_acueducto] column.
	 * 
	 * @param      string $v new value
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 */
	public function setPfuAreaMicrocuencaPropiedadAcueducto($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pfu_area_microcuenca_propiedad_acueducto !== $v) {
			$this->pfu_area_microcuenca_propiedad_acueducto = $v;
			$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_AREA_MICROCUENCA_PROPIEDAD_ACUEDUCTO;
		}

		return $this;
	} // setPfuAreaMicrocuencaPropiedadAcueducto()

	/**
	 * Set the value of [pfu_cobertura_forestal_mas_usada] column.
	 * 
	 * @param      string $v new value
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 */
	public function setPfuCoberturaForestalMasUsada($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pfu_cobertura_forestal_mas_usada !== $v) {
			$this->pfu_cobertura_forestal_mas_usada = $v;
			$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_MAS_USADA;
		}

		return $this;
	} // setPfuCoberturaForestalMasUsada()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->pfu_id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->pfu_mic_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->pfu_programas_aislamiento = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->pfu_programas_reforestacion = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->pfu_programas_mejoramiento_uso_suelo = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->pfu_programas_adquisicion_tierra = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->pfu_programas_educacion_ambiental = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->pfu_programas_reduccion_uso_agroquimicos = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->pfu_situacion_arriba_captacion_reserva = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->pfu_situacion_arriba_captacion_protegida = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->pfu_cobertura_forestal_bosque_natural = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->pfu_cobertura_forestal_bosque_protector = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->pfu_cobertura_forestal_bosque_protector_productor = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->pfu_cobertura_forestal_productor = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->pfu_cobertura_forestal_regeneracion_natural = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->pfu_cobertura_forestal_bosque_natural_tendencia = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->pfu_cobertura_forestal_bosque_protector_tendencia = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->pfu_cobertura_forestal_bosque_protector_productor_tendencia = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->pfu_cobertura_forestal_productor_tendencia = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->pfu_cobertura_forestal_regeneracion_natural_tendencia = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->pfu_aislamiento_franja_amarilla_microcuenca = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->pfu_cobertura_forestal_area_protectora_cauce = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->pfu_area_microcuenca_propiedad_acueducto = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->pfu_cobertura_forestal_mas_usada = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 24; // 24 = ProteccionfuentessuperficialesaguaPeer::NUM_COLUMNS - ProteccionfuentessuperficialesaguaPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Proteccionfuentessuperficialesagua object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aMicrocuencas !== null && $this->pfu_mic_id !== $this->aMicrocuencas->getMicId()) {
			$this->aMicrocuencas = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProteccionfuentessuperficialesaguaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ProteccionfuentessuperficialesaguaPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aMicrocuencas = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProteccionfuentessuperficialesaguaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseProteccionfuentessuperficialesagua:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				ProteccionfuentessuperficialesaguaPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseProteccionfuentessuperficialesagua:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProteccionfuentessuperficialesaguaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseProteccionfuentessuperficialesagua:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseProteccionfuentessuperficialesagua:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				ProteccionfuentessuperficialesaguaPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aMicrocuencas !== null) {
				if ($this->aMicrocuencas->isModified() || $this->aMicrocuencas->isNew()) {
					$affectedRows += $this->aMicrocuencas->save($con);
				}
				$this->setMicrocuencas($this->aMicrocuencas);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ProteccionfuentessuperficialesaguaPeer::PFU_ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ProteccionfuentessuperficialesaguaPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setPfuId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += ProteccionfuentessuperficialesaguaPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aMicrocuencas !== null) {
				if (!$this->aMicrocuencas->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aMicrocuencas->getValidationFailures());
				}
			}


			if (($retval = ProteccionfuentessuperficialesaguaPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ProteccionfuentessuperficialesaguaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getPfuId();
				break;
			case 1:
				return $this->getPfuMicId();
				break;
			case 2:
				return $this->getPfuProgramasAislamiento();
				break;
			case 3:
				return $this->getPfuProgramasReforestacion();
				break;
			case 4:
				return $this->getPfuProgramasMejoramientoUsoSuelo();
				break;
			case 5:
				return $this->getPfuProgramasAdquisicionTierra();
				break;
			case 6:
				return $this->getPfuProgramasEducacionAmbiental();
				break;
			case 7:
				return $this->getPfuProgramasReduccionUsoAgroquimicos();
				break;
			case 8:
				return $this->getPfuSituacionArribaCaptacionReserva();
				break;
			case 9:
				return $this->getPfuSituacionArribaCaptacionProtegida();
				break;
			case 10:
				return $this->getPfuCoberturaForestalBosqueNatural();
				break;
			case 11:
				return $this->getPfuCoberturaForestalBosqueProtector();
				break;
			case 12:
				return $this->getPfuCoberturaForestalBosqueProtectorProductor();
				break;
			case 13:
				return $this->getPfuCoberturaForestalProductor();
				break;
			case 14:
				return $this->getPfuCoberturaForestalRegeneracionNatural();
				break;
			case 15:
				return $this->getPfuCoberturaForestalBosqueNaturalTendencia();
				break;
			case 16:
				return $this->getPfuCoberturaForestalBosqueProtectorTendencia();
				break;
			case 17:
				return $this->getPfuCoberturaForestalBosqueProtectorProductorTendencia();
				break;
			case 18:
				return $this->getPfuCoberturaForestalProductorTendencia();
				break;
			case 19:
				return $this->getPfuCoberturaForestalRegeneracionNaturalTendencia();
				break;
			case 20:
				return $this->getPfuAislamientoFranjaAmarillaMicrocuenca();
				break;
			case 21:
				return $this->getPfuCoberturaForestalAreaProtectoraCauce();
				break;
			case 22:
				return $this->getPfuAreaMicrocuencaPropiedadAcueducto();
				break;
			case 23:
				return $this->getPfuCoberturaForestalMasUsada();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ProteccionfuentessuperficialesaguaPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getPfuId(),
			$keys[1] => $this->getPfuMicId(),
			$keys[2] => $this->getPfuProgramasAislamiento(),
			$keys[3] => $this->getPfuProgramasReforestacion(),
			$keys[4] => $this->getPfuProgramasMejoramientoUsoSuelo(),
			$keys[5] => $this->getPfuProgramasAdquisicionTierra(),
			$keys[6] => $this->getPfuProgramasEducacionAmbiental(),
			$keys[7] => $this->getPfuProgramasReduccionUsoAgroquimicos(),
			$keys[8] => $this->getPfuSituacionArribaCaptacionReserva(),
			$keys[9] => $this->getPfuSituacionArribaCaptacionProtegida(),
			$keys[10] => $this->getPfuCoberturaForestalBosqueNatural(),
			$keys[11] => $this->getPfuCoberturaForestalBosqueProtector(),
			$keys[12] => $this->getPfuCoberturaForestalBosqueProtectorProductor(),
			$keys[13] => $this->getPfuCoberturaForestalProductor(),
			$keys[14] => $this->getPfuCoberturaForestalRegeneracionNatural(),
			$keys[15] => $this->getPfuCoberturaForestalBosqueNaturalTendencia(),
			$keys[16] => $this->getPfuCoberturaForestalBosqueProtectorTendencia(),
			$keys[17] => $this->getPfuCoberturaForestalBosqueProtectorProductorTendencia(),
			$keys[18] => $this->getPfuCoberturaForestalProductorTendencia(),
			$keys[19] => $this->getPfuCoberturaForestalRegeneracionNaturalTendencia(),
			$keys[20] => $this->getPfuAislamientoFranjaAmarillaMicrocuenca(),
			$keys[21] => $this->getPfuCoberturaForestalAreaProtectoraCauce(),
			$keys[22] => $this->getPfuAreaMicrocuencaPropiedadAcueducto(),
			$keys[23] => $this->getPfuCoberturaForestalMasUsada(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ProteccionfuentessuperficialesaguaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setPfuId($value);
				break;
			case 1:
				$this->setPfuMicId($value);
				break;
			case 2:
				$this->setPfuProgramasAislamiento($value);
				break;
			case 3:
				$this->setPfuProgramasReforestacion($value);
				break;
			case 4:
				$this->setPfuProgramasMejoramientoUsoSuelo($value);
				break;
			case 5:
				$this->setPfuProgramasAdquisicionTierra($value);
				break;
			case 6:
				$this->setPfuProgramasEducacionAmbiental($value);
				break;
			case 7:
				$this->setPfuProgramasReduccionUsoAgroquimicos($value);
				break;
			case 8:
				$this->setPfuSituacionArribaCaptacionReserva($value);
				break;
			case 9:
				$this->setPfuSituacionArribaCaptacionProtegida($value);
				break;
			case 10:
				$this->setPfuCoberturaForestalBosqueNatural($value);
				break;
			case 11:
				$this->setPfuCoberturaForestalBosqueProtector($value);
				break;
			case 12:
				$this->setPfuCoberturaForestalBosqueProtectorProductor($value);
				break;
			case 13:
				$this->setPfuCoberturaForestalProductor($value);
				break;
			case 14:
				$this->setPfuCoberturaForestalRegeneracionNatural($value);
				break;
			case 15:
				$this->setPfuCoberturaForestalBosqueNaturalTendencia($value);
				break;
			case 16:
				$this->setPfuCoberturaForestalBosqueProtectorTendencia($value);
				break;
			case 17:
				$this->setPfuCoberturaForestalBosqueProtectorProductorTendencia($value);
				break;
			case 18:
				$this->setPfuCoberturaForestalProductorTendencia($value);
				break;
			case 19:
				$this->setPfuCoberturaForestalRegeneracionNaturalTendencia($value);
				break;
			case 20:
				$this->setPfuAislamientoFranjaAmarillaMicrocuenca($value);
				break;
			case 21:
				$this->setPfuCoberturaForestalAreaProtectoraCauce($value);
				break;
			case 22:
				$this->setPfuAreaMicrocuencaPropiedadAcueducto($value);
				break;
			case 23:
				$this->setPfuCoberturaForestalMasUsada($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ProteccionfuentessuperficialesaguaPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setPfuId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setPfuMicId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setPfuProgramasAislamiento($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setPfuProgramasReforestacion($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setPfuProgramasMejoramientoUsoSuelo($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setPfuProgramasAdquisicionTierra($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setPfuProgramasEducacionAmbiental($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setPfuProgramasReduccionUsoAgroquimicos($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setPfuSituacionArribaCaptacionReserva($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setPfuSituacionArribaCaptacionProtegida($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setPfuCoberturaForestalBosqueNatural($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setPfuCoberturaForestalBosqueProtector($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setPfuCoberturaForestalBosqueProtectorProductor($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setPfuCoberturaForestalProductor($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setPfuCoberturaForestalRegeneracionNatural($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setPfuCoberturaForestalBosqueNaturalTendencia($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setPfuCoberturaForestalBosqueProtectorTendencia($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setPfuCoberturaForestalBosqueProtectorProductorTendencia($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setPfuCoberturaForestalProductorTendencia($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setPfuCoberturaForestalRegeneracionNaturalTendencia($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setPfuAislamientoFranjaAmarillaMicrocuenca($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setPfuCoberturaForestalAreaProtectoraCauce($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setPfuAreaMicrocuencaPropiedadAcueducto($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setPfuCoberturaForestalMasUsada($arr[$keys[23]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ProteccionfuentessuperficialesaguaPeer::DATABASE_NAME);

		if ($this->isColumnModified(ProteccionfuentessuperficialesaguaPeer::PFU_ID)) $criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_ID, $this->pfu_id);
		if ($this->isColumnModified(ProteccionfuentessuperficialesaguaPeer::PFU_MIC_ID)) $criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_MIC_ID, $this->pfu_mic_id);
		if ($this->isColumnModified(ProteccionfuentessuperficialesaguaPeer::PFU_PROGRAMAS_AISLAMIENTO)) $criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_PROGRAMAS_AISLAMIENTO, $this->pfu_programas_aislamiento);
		if ($this->isColumnModified(ProteccionfuentessuperficialesaguaPeer::PFU_PROGRAMAS_REFORESTACION)) $criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_PROGRAMAS_REFORESTACION, $this->pfu_programas_reforestacion);
		if ($this->isColumnModified(ProteccionfuentessuperficialesaguaPeer::PFU_PROGRAMAS_MEJORAMIENTO_USO_SUELO)) $criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_PROGRAMAS_MEJORAMIENTO_USO_SUELO, $this->pfu_programas_mejoramiento_uso_suelo);
		if ($this->isColumnModified(ProteccionfuentessuperficialesaguaPeer::PFU_PROGRAMAS_ADQUISICION_TIERRA)) $criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_PROGRAMAS_ADQUISICION_TIERRA, $this->pfu_programas_adquisicion_tierra);
		if ($this->isColumnModified(ProteccionfuentessuperficialesaguaPeer::PFU_PROGRAMAS_EDUCACION_AMBIENTAL)) $criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_PROGRAMAS_EDUCACION_AMBIENTAL, $this->pfu_programas_educacion_ambiental);
		if ($this->isColumnModified(ProteccionfuentessuperficialesaguaPeer::PFU_PROGRAMAS_REDUCCION_USO_AGROQUIMICOS)) $criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_PROGRAMAS_REDUCCION_USO_AGROQUIMICOS, $this->pfu_programas_reduccion_uso_agroquimicos);
		if ($this->isColumnModified(ProteccionfuentessuperficialesaguaPeer::PFU_SITUACION_ARRIBA_CAPTACION_RESERVA)) $criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_SITUACION_ARRIBA_CAPTACION_RESERVA, $this->pfu_situacion_arriba_captacion_reserva);
		if ($this->isColumnModified(ProteccionfuentessuperficialesaguaPeer::PFU_SITUACION_ARRIBA_CAPTACION_PROTEGIDA)) $criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_SITUACION_ARRIBA_CAPTACION_PROTEGIDA, $this->pfu_situacion_arriba_captacion_protegida);
		if ($this->isColumnModified(ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_BOSQUE_NATURAL)) $criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_BOSQUE_NATURAL, $this->pfu_cobertura_forestal_bosque_natural);
		if ($this->isColumnModified(ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_BOSQUE_PROTECTOR)) $criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_BOSQUE_PROTECTOR, $this->pfu_cobertura_forestal_bosque_protector);
		if ($this->isColumnModified(ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_BOSQUE_PROTECTOR_PRODUCTOR)) $criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_BOSQUE_PROTECTOR_PRODUCTOR, $this->pfu_cobertura_forestal_bosque_protector_productor);
		if ($this->isColumnModified(ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_PRODUCTOR)) $criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_PRODUCTOR, $this->pfu_cobertura_forestal_productor);
		if ($this->isColumnModified(ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_REGENERACION_NATURAL)) $criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_REGENERACION_NATURAL, $this->pfu_cobertura_forestal_regeneracion_natural);
		if ($this->isColumnModified(ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_BOSQUE_NATURAL_TENDENCIA)) $criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_BOSQUE_NATURAL_TENDENCIA, $this->pfu_cobertura_forestal_bosque_natural_tendencia);
		if ($this->isColumnModified(ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_BOSQUE_PROTECTOR_TENDENCIA)) $criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_BOSQUE_PROTECTOR_TENDENCIA, $this->pfu_cobertura_forestal_bosque_protector_tendencia);
		if ($this->isColumnModified(ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_BOSQUE_PROTECTOR_PRODUCTOR_TENDENCIA)) $criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_BOSQUE_PROTECTOR_PRODUCTOR_TENDENCIA, $this->pfu_cobertura_forestal_bosque_protector_productor_tendencia);
		if ($this->isColumnModified(ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_PRODUCTOR_TENDENCIA)) $criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_PRODUCTOR_TENDENCIA, $this->pfu_cobertura_forestal_productor_tendencia);
		if ($this->isColumnModified(ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_REGENERACION_NATURAL_TENDENCIA)) $criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_REGENERACION_NATURAL_TENDENCIA, $this->pfu_cobertura_forestal_regeneracion_natural_tendencia);
		if ($this->isColumnModified(ProteccionfuentessuperficialesaguaPeer::PFU_AISLAMIENTO_FRANJA_AMARILLA_MICROCUENCA)) $criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_AISLAMIENTO_FRANJA_AMARILLA_MICROCUENCA, $this->pfu_aislamiento_franja_amarilla_microcuenca);
		if ($this->isColumnModified(ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_AREA_PROTECTORA_CAUCE)) $criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_AREA_PROTECTORA_CAUCE, $this->pfu_cobertura_forestal_area_protectora_cauce);
		if ($this->isColumnModified(ProteccionfuentessuperficialesaguaPeer::PFU_AREA_MICROCUENCA_PROPIEDAD_ACUEDUCTO)) $criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_AREA_MICROCUENCA_PROPIEDAD_ACUEDUCTO, $this->pfu_area_microcuenca_propiedad_acueducto);
		if ($this->isColumnModified(ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_MAS_USADA)) $criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_COBERTURA_FORESTAL_MAS_USADA, $this->pfu_cobertura_forestal_mas_usada);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ProteccionfuentessuperficialesaguaPeer::DATABASE_NAME);

		$criteria->add(ProteccionfuentessuperficialesaguaPeer::PFU_ID, $this->pfu_id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getPfuId();
	}

	/**
	 * Generic method to set the primary key (pfu_id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setPfuId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Proteccionfuentessuperficialesagua (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setPfuMicId($this->pfu_mic_id);

		$copyObj->setPfuProgramasAislamiento($this->pfu_programas_aislamiento);

		$copyObj->setPfuProgramasReforestacion($this->pfu_programas_reforestacion);

		$copyObj->setPfuProgramasMejoramientoUsoSuelo($this->pfu_programas_mejoramiento_uso_suelo);

		$copyObj->setPfuProgramasAdquisicionTierra($this->pfu_programas_adquisicion_tierra);

		$copyObj->setPfuProgramasEducacionAmbiental($this->pfu_programas_educacion_ambiental);

		$copyObj->setPfuProgramasReduccionUsoAgroquimicos($this->pfu_programas_reduccion_uso_agroquimicos);

		$copyObj->setPfuSituacionArribaCaptacionReserva($this->pfu_situacion_arriba_captacion_reserva);

		$copyObj->setPfuSituacionArribaCaptacionProtegida($this->pfu_situacion_arriba_captacion_protegida);

		$copyObj->setPfuCoberturaForestalBosqueNatural($this->pfu_cobertura_forestal_bosque_natural);

		$copyObj->setPfuCoberturaForestalBosqueProtector($this->pfu_cobertura_forestal_bosque_protector);

		$copyObj->setPfuCoberturaForestalBosqueProtectorProductor($this->pfu_cobertura_forestal_bosque_protector_productor);

		$copyObj->setPfuCoberturaForestalProductor($this->pfu_cobertura_forestal_productor);

		$copyObj->setPfuCoberturaForestalRegeneracionNatural($this->pfu_cobertura_forestal_regeneracion_natural);

		$copyObj->setPfuCoberturaForestalBosqueNaturalTendencia($this->pfu_cobertura_forestal_bosque_natural_tendencia);

		$copyObj->setPfuCoberturaForestalBosqueProtectorTendencia($this->pfu_cobertura_forestal_bosque_protector_tendencia);

		$copyObj->setPfuCoberturaForestalBosqueProtectorProductorTendencia($this->pfu_cobertura_forestal_bosque_protector_productor_tendencia);

		$copyObj->setPfuCoberturaForestalProductorTendencia($this->pfu_cobertura_forestal_productor_tendencia);

		$copyObj->setPfuCoberturaForestalRegeneracionNaturalTendencia($this->pfu_cobertura_forestal_regeneracion_natural_tendencia);

		$copyObj->setPfuAislamientoFranjaAmarillaMicrocuenca($this->pfu_aislamiento_franja_amarilla_microcuenca);

		$copyObj->setPfuCoberturaForestalAreaProtectoraCauce($this->pfu_cobertura_forestal_area_protectora_cauce);

		$copyObj->setPfuAreaMicrocuencaPropiedadAcueducto($this->pfu_area_microcuenca_propiedad_acueducto);

		$copyObj->setPfuCoberturaForestalMasUsada($this->pfu_cobertura_forestal_mas_usada);


		$copyObj->setNew(true);

		$copyObj->setPfuId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Proteccionfuentessuperficialesagua Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ProteccionfuentessuperficialesaguaPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ProteccionfuentessuperficialesaguaPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Microcuencas object.
	 *
	 * @param      Microcuencas $v
	 * @return     Proteccionfuentessuperficialesagua The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setMicrocuencas(Microcuencas $v = null)
	{
		if ($v === null) {
			$this->setPfuMicId(NULL);
		} else {
			$this->setPfuMicId($v->getMicId());
		}

		$this->aMicrocuencas = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Microcuencas object, it will not be re-added.
		if ($v !== null) {
			$v->addProteccionfuentessuperficialesagua($this);
		}

		return $this;
	}


	/**
	 * Get the associated Microcuencas object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Microcuencas The associated Microcuencas object.
	 * @throws     PropelException
	 */
	public function getMicrocuencas(PropelPDO $con = null)
	{
		if ($this->aMicrocuencas === null && ($this->pfu_mic_id !== null)) {
			$this->aMicrocuencas = MicrocuencasPeer::retrieveByPk($this->pfu_mic_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aMicrocuencas->addProteccionfuentessuperficialesaguas($this);
			 */
		}
		return $this->aMicrocuencas;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

			$this->aMicrocuencas = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseProteccionfuentessuperficialesagua:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseProteccionfuentessuperficialesagua::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseProteccionfuentessuperficialesagua
