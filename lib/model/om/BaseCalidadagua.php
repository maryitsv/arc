<?php

/**
 * Base class that represents a row from the 'calidadagua' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
<<<<<<< HEAD
 * 07/27/10 16:10:46
=======
 * 07/27/10 18:48:00
>>>>>>> 6b4e80154d2fdf2e3b5339f488c0c1e98b3b0a65
 *
 * @package    lib.model.om
 */
abstract class BaseCalidadagua extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        CalidadaguaPeer
	 */
	protected static $peer;

	/**
	 * The value for the cag_id field.
	 * @var        int
	 */
	protected $cag_id;

	/**
	 * The value for the cag_cal_id field.
	 * @var        int
	 */
	protected $cag_cal_id;

	/**
	 * The value for the cag_control_ca_fuente field.
	 * @var        boolean
	 */
	protected $cag_control_ca_fuente;

	/**
	 * The value for the cag_mapa_riesgo field.
	 * @var        boolean
	 */
	protected $cag_mapa_riesgo;

	/**
	 * The value for the cag_db05_valor field.
	 * @var        string
	 */
	protected $cag_db05_valor;

	/**
	 * The value for the cag_db05_frecuencia field.
	 * @var        string
	 */
	protected $cag_db05_frecuencia;

	/**
	 * The value for the cag_coliformes_valor field.
	 * @var        string
	 */
	protected $cag_coliformes_valor;

	/**
	 * The value for the cag_coliformes_frecuencia field.
	 * @var        string
	 */
	protected $cag_coliformes_frecuencia;

	/**
	 * The value for the cag_oxigeno_disuelto_valor field.
	 * @var        string
	 */
	protected $cag_oxigeno_disuelto_valor;

	/**
	 * The value for the cag_oxigeno_disuelto_frecuencia field.
	 * @var        string
	 */
	protected $cag_oxigeno_disuelto_frecuencia;

	/**
	 * The value for the cag_ph_valor field.
	 * @var        string
	 */
	protected $cag_ph_valor;

	/**
	 * The value for the cag_ph_frecuencia field.
	 * @var        string
	 */
	protected $cag_ph_frecuencia;

	/**
	 * The value for the cag_turbiedad_valor field.
	 * @var        string
	 */
	protected $cag_turbiedad_valor;

	/**
	 * The value for the cag_turbiedad_frecuencia field.
	 * @var        string
	 */
	protected $cag_turbiedad_frecuencia;

	/**
	 * The value for the cag_color_verdadero_valor field.
	 * @var        string
	 */
	protected $cag_color_verdadero_valor;

	/**
	 * The value for the cag_color_verdadero_frecuencia field.
	 * @var        string
	 */
	protected $cag_color_verdadero_frecuencia;

	/**
	 * The value for the cag_sabor_olor_valor field.
	 * @var        string
	 */
	protected $cag_sabor_olor_valor;

	/**
	 * The value for the cag_sabor_olor_frecuencia field.
	 * @var        string
	 */
	protected $cag_sabor_olor_frecuencia;

	/**
	 * The value for the cag_cloruros_valor field.
	 * @var        string
	 */
	protected $cag_cloruros_valor;

	/**
	 * The value for the cag_cloruros_frecuencia field.
	 * @var        string
	 */
	protected $cag_cloruros_frecuencia;

	/**
	 * The value for the cag_fluoruros_valor field.
	 * @var        string
	 */
	protected $cag_fluoruros_valor;

	/**
	 * The value for the cag_fluoruros_frecuencia field.
	 * @var        string
	 */
	protected $cag_fluoruros_frecuencia;

	/**
	 * The value for the cag_laboratorio_propio field.
	 * @var        boolean
	 */
	protected $cag_laboratorio_propio;

	/**
	 * The value for the cag_control_ca_distribuida field.
	 * @var        boolean
	 */
	protected $cag_control_ca_distribuida;

	/**
	 * The value for the cag_puntos_red_analizados field.
	 * @var        int
	 */
	protected $cag_puntos_red_analizados;

	/**
	 * The value for the cag_visita_sspd field.
	 * @var        boolean
	 */
	protected $cag_visita_sspd;

	/**
	 * @var        Calidad
	 */
	protected $aCalidad;

	/**
	 * @var        array Parametroxfrecuencia[] Collection to store aggregation of Parametroxfrecuencia objects.
	 */
	protected $collParametroxfrecuencias;

	/**
	 * @var        Criteria The criteria used to select the current contents of collParametroxfrecuencias.
	 */
	private $lastParametroxfrecuenciaCriteria = null;

	/**
	 * @var        array Resultadosxpunto[] Collection to store aggregation of Resultadosxpunto objects.
	 */
	protected $collResultadosxpuntos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collResultadosxpuntos.
	 */
	private $lastResultadosxpuntoCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'CalidadaguaPeer';

	/**
	 * Get the [cag_id] column value.
	 * 
	 * @return     int
	 */
	public function getCagId()
	{
		return $this->cag_id;
	}

	/**
	 * Get the [cag_cal_id] column value.
	 * 
	 * @return     int
	 */
	public function getCagCalId()
	{
		return $this->cag_cal_id;
	}

	/**
	 * Get the [cag_control_ca_fuente] column value.
	 * 
	 * @return     boolean
	 */
	public function getCagControlCaFuente()
	{
		return $this->cag_control_ca_fuente;
	}

	/**
	 * Get the [cag_mapa_riesgo] column value.
	 * 
	 * @return     boolean
	 */
	public function getCagMapaRiesgo()
	{
		return $this->cag_mapa_riesgo;
	}

	/**
	 * Get the [cag_db05_valor] column value.
	 * 
	 * @return     string
	 */
	public function getCagDb05Valor()
	{
		return $this->cag_db05_valor;
	}

	/**
	 * Get the [cag_db05_frecuencia] column value.
	 * 
	 * @return     string
	 */
	public function getCagDb05Frecuencia()
	{
		return $this->cag_db05_frecuencia;
	}

	/**
	 * Get the [cag_coliformes_valor] column value.
	 * 
	 * @return     string
	 */
	public function getCagColiformesValor()
	{
		return $this->cag_coliformes_valor;
	}

	/**
	 * Get the [cag_coliformes_frecuencia] column value.
	 * 
	 * @return     string
	 */
	public function getCagColiformesFrecuencia()
	{
		return $this->cag_coliformes_frecuencia;
	}

	/**
	 * Get the [cag_oxigeno_disuelto_valor] column value.
	 * 
	 * @return     string
	 */
	public function getCagOxigenoDisueltoValor()
	{
		return $this->cag_oxigeno_disuelto_valor;
	}

	/**
	 * Get the [cag_oxigeno_disuelto_frecuencia] column value.
	 * 
	 * @return     string
	 */
	public function getCagOxigenoDisueltoFrecuencia()
	{
		return $this->cag_oxigeno_disuelto_frecuencia;
	}

	/**
	 * Get the [cag_ph_valor] column value.
	 * 
	 * @return     string
	 */
	public function getCagPhValor()
	{
		return $this->cag_ph_valor;
	}

	/**
	 * Get the [cag_ph_frecuencia] column value.
	 * 
	 * @return     string
	 */
	public function getCagPhFrecuencia()
	{
		return $this->cag_ph_frecuencia;
	}

	/**
	 * Get the [cag_turbiedad_valor] column value.
	 * 
	 * @return     string
	 */
	public function getCagTurbiedadValor()
	{
		return $this->cag_turbiedad_valor;
	}

	/**
	 * Get the [cag_turbiedad_frecuencia] column value.
	 * 
	 * @return     string
	 */
	public function getCagTurbiedadFrecuencia()
	{
		return $this->cag_turbiedad_frecuencia;
	}

	/**
	 * Get the [cag_color_verdadero_valor] column value.
	 * 
	 * @return     string
	 */
	public function getCagColorVerdaderoValor()
	{
		return $this->cag_color_verdadero_valor;
	}

	/**
	 * Get the [cag_color_verdadero_frecuencia] column value.
	 * 
	 * @return     string
	 */
	public function getCagColorVerdaderoFrecuencia()
	{
		return $this->cag_color_verdadero_frecuencia;
	}

	/**
	 * Get the [cag_sabor_olor_valor] column value.
	 * 
	 * @return     string
	 */
	public function getCagSaborOlorValor()
	{
		return $this->cag_sabor_olor_valor;
	}

	/**
	 * Get the [cag_sabor_olor_frecuencia] column value.
	 * 
	 * @return     string
	 */
	public function getCagSaborOlorFrecuencia()
	{
		return $this->cag_sabor_olor_frecuencia;
	}

	/**
	 * Get the [cag_cloruros_valor] column value.
	 * 
	 * @return     string
	 */
	public function getCagClorurosValor()
	{
		return $this->cag_cloruros_valor;
	}

	/**
	 * Get the [cag_cloruros_frecuencia] column value.
	 * 
	 * @return     string
	 */
	public function getCagClorurosFrecuencia()
	{
		return $this->cag_cloruros_frecuencia;
	}

	/**
	 * Get the [cag_fluoruros_valor] column value.
	 * 
	 * @return     string
	 */
	public function getCagFluorurosValor()
	{
		return $this->cag_fluoruros_valor;
	}

	/**
	 * Get the [cag_fluoruros_frecuencia] column value.
	 * 
	 * @return     string
	 */
	public function getCagFluorurosFrecuencia()
	{
		return $this->cag_fluoruros_frecuencia;
	}

	/**
	 * Get the [cag_laboratorio_propio] column value.
	 * 
	 * @return     boolean
	 */
	public function getCagLaboratorioPropio()
	{
		return $this->cag_laboratorio_propio;
	}

	/**
	 * Get the [cag_control_ca_distribuida] column value.
	 * 
	 * @return     boolean
	 */
	public function getCagControlCaDistribuida()
	{
		return $this->cag_control_ca_distribuida;
	}

	/**
	 * Get the [cag_puntos_red_analizados] column value.
	 * 
	 * @return     int
	 */
	public function getCagPuntosRedAnalizados()
	{
		return $this->cag_puntos_red_analizados;
	}

	/**
	 * Get the [cag_visita_sspd] column value.
	 * 
	 * @return     boolean
	 */
	public function getCagVisitaSspd()
	{
		return $this->cag_visita_sspd;
	}

	/**
	 * Set the value of [cag_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cag_id !== $v) {
			$this->cag_id = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_ID;
		}

		return $this;
	} // setCagId()

	/**
	 * Set the value of [cag_cal_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagCalId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cag_cal_id !== $v) {
			$this->cag_cal_id = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_CAL_ID;
		}

		if ($this->aCalidad !== null && $this->aCalidad->getCalId() !== $v) {
			$this->aCalidad = null;
		}

		return $this;
	} // setCagCalId()

	/**
	 * Set the value of [cag_control_ca_fuente] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagControlCaFuente($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->cag_control_ca_fuente !== $v) {
			$this->cag_control_ca_fuente = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_CONTROL_CA_FUENTE;
		}

		return $this;
	} // setCagControlCaFuente()

	/**
	 * Set the value of [cag_mapa_riesgo] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagMapaRiesgo($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->cag_mapa_riesgo !== $v) {
			$this->cag_mapa_riesgo = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_MAPA_RIESGO;
		}

		return $this;
	} // setCagMapaRiesgo()

	/**
	 * Set the value of [cag_db05_valor] column.
	 * 
	 * @param      string $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagDb05Valor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cag_db05_valor !== $v) {
			$this->cag_db05_valor = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_DB05_VALOR;
		}

		return $this;
	} // setCagDb05Valor()

	/**
	 * Set the value of [cag_db05_frecuencia] column.
	 * 
	 * @param      string $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagDb05Frecuencia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cag_db05_frecuencia !== $v) {
			$this->cag_db05_frecuencia = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_DB05_FRECUENCIA;
		}

		return $this;
	} // setCagDb05Frecuencia()

	/**
	 * Set the value of [cag_coliformes_valor] column.
	 * 
	 * @param      string $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagColiformesValor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cag_coliformes_valor !== $v) {
			$this->cag_coliformes_valor = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_COLIFORMES_VALOR;
		}

		return $this;
	} // setCagColiformesValor()

	/**
	 * Set the value of [cag_coliformes_frecuencia] column.
	 * 
	 * @param      string $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagColiformesFrecuencia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cag_coliformes_frecuencia !== $v) {
			$this->cag_coliformes_frecuencia = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_COLIFORMES_FRECUENCIA;
		}

		return $this;
	} // setCagColiformesFrecuencia()

	/**
	 * Set the value of [cag_oxigeno_disuelto_valor] column.
	 * 
	 * @param      string $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagOxigenoDisueltoValor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cag_oxigeno_disuelto_valor !== $v) {
			$this->cag_oxigeno_disuelto_valor = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_OXIGENO_DISUELTO_VALOR;
		}

		return $this;
	} // setCagOxigenoDisueltoValor()

	/**
	 * Set the value of [cag_oxigeno_disuelto_frecuencia] column.
	 * 
	 * @param      string $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagOxigenoDisueltoFrecuencia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cag_oxigeno_disuelto_frecuencia !== $v) {
			$this->cag_oxigeno_disuelto_frecuencia = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_OXIGENO_DISUELTO_FRECUENCIA;
		}

		return $this;
	} // setCagOxigenoDisueltoFrecuencia()

	/**
	 * Set the value of [cag_ph_valor] column.
	 * 
	 * @param      string $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagPhValor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cag_ph_valor !== $v) {
			$this->cag_ph_valor = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_PH_VALOR;
		}

		return $this;
	} // setCagPhValor()

	/**
	 * Set the value of [cag_ph_frecuencia] column.
	 * 
	 * @param      string $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagPhFrecuencia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cag_ph_frecuencia !== $v) {
			$this->cag_ph_frecuencia = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_PH_FRECUENCIA;
		}

		return $this;
	} // setCagPhFrecuencia()

	/**
	 * Set the value of [cag_turbiedad_valor] column.
	 * 
	 * @param      string $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagTurbiedadValor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cag_turbiedad_valor !== $v) {
			$this->cag_turbiedad_valor = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_TURBIEDAD_VALOR;
		}

		return $this;
	} // setCagTurbiedadValor()

	/**
	 * Set the value of [cag_turbiedad_frecuencia] column.
	 * 
	 * @param      string $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagTurbiedadFrecuencia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cag_turbiedad_frecuencia !== $v) {
			$this->cag_turbiedad_frecuencia = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_TURBIEDAD_FRECUENCIA;
		}

		return $this;
	} // setCagTurbiedadFrecuencia()

	/**
	 * Set the value of [cag_color_verdadero_valor] column.
	 * 
	 * @param      string $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagColorVerdaderoValor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cag_color_verdadero_valor !== $v) {
			$this->cag_color_verdadero_valor = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_COLOR_VERDADERO_VALOR;
		}

		return $this;
	} // setCagColorVerdaderoValor()

	/**
	 * Set the value of [cag_color_verdadero_frecuencia] column.
	 * 
	 * @param      string $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagColorVerdaderoFrecuencia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cag_color_verdadero_frecuencia !== $v) {
			$this->cag_color_verdadero_frecuencia = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_COLOR_VERDADERO_FRECUENCIA;
		}

		return $this;
	} // setCagColorVerdaderoFrecuencia()

	/**
	 * Set the value of [cag_sabor_olor_valor] column.
	 * 
	 * @param      string $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagSaborOlorValor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cag_sabor_olor_valor !== $v) {
			$this->cag_sabor_olor_valor = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_SABOR_OLOR_VALOR;
		}

		return $this;
	} // setCagSaborOlorValor()

	/**
	 * Set the value of [cag_sabor_olor_frecuencia] column.
	 * 
	 * @param      string $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagSaborOlorFrecuencia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cag_sabor_olor_frecuencia !== $v) {
			$this->cag_sabor_olor_frecuencia = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_SABOR_OLOR_FRECUENCIA;
		}

		return $this;
	} // setCagSaborOlorFrecuencia()

	/**
	 * Set the value of [cag_cloruros_valor] column.
	 * 
	 * @param      string $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagClorurosValor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cag_cloruros_valor !== $v) {
			$this->cag_cloruros_valor = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_CLORUROS_VALOR;
		}

		return $this;
	} // setCagClorurosValor()

	/**
	 * Set the value of [cag_cloruros_frecuencia] column.
	 * 
	 * @param      string $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagClorurosFrecuencia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cag_cloruros_frecuencia !== $v) {
			$this->cag_cloruros_frecuencia = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_CLORUROS_FRECUENCIA;
		}

		return $this;
	} // setCagClorurosFrecuencia()

	/**
	 * Set the value of [cag_fluoruros_valor] column.
	 * 
	 * @param      string $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagFluorurosValor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cag_fluoruros_valor !== $v) {
			$this->cag_fluoruros_valor = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_FLUORUROS_VALOR;
		}

		return $this;
	} // setCagFluorurosValor()

	/**
	 * Set the value of [cag_fluoruros_frecuencia] column.
	 * 
	 * @param      string $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagFluorurosFrecuencia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cag_fluoruros_frecuencia !== $v) {
			$this->cag_fluoruros_frecuencia = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_FLUORUROS_FRECUENCIA;
		}

		return $this;
	} // setCagFluorurosFrecuencia()

	/**
	 * Set the value of [cag_laboratorio_propio] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagLaboratorioPropio($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->cag_laboratorio_propio !== $v) {
			$this->cag_laboratorio_propio = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_LABORATORIO_PROPIO;
		}

		return $this;
	} // setCagLaboratorioPropio()

	/**
	 * Set the value of [cag_control_ca_distribuida] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagControlCaDistribuida($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->cag_control_ca_distribuida !== $v) {
			$this->cag_control_ca_distribuida = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_CONTROL_CA_DISTRIBUIDA;
		}

		return $this;
	} // setCagControlCaDistribuida()

	/**
	 * Set the value of [cag_puntos_red_analizados] column.
	 * 
	 * @param      int $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagPuntosRedAnalizados($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cag_puntos_red_analizados !== $v) {
			$this->cag_puntos_red_analizados = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_PUNTOS_RED_ANALIZADOS;
		}

		return $this;
	} // setCagPuntosRedAnalizados()

	/**
	 * Set the value of [cag_visita_sspd] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Calidadagua The current object (for fluent API support)
	 */
	public function setCagVisitaSspd($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->cag_visita_sspd !== $v) {
			$this->cag_visita_sspd = $v;
			$this->modifiedColumns[] = CalidadaguaPeer::CAG_VISITA_SSPD;
		}

		return $this;
	} // setCagVisitaSspd()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->cag_id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->cag_cal_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->cag_control_ca_fuente = ($row[$startcol + 2] !== null) ? (boolean) $row[$startcol + 2] : null;
			$this->cag_mapa_riesgo = ($row[$startcol + 3] !== null) ? (boolean) $row[$startcol + 3] : null;
			$this->cag_db05_valor = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->cag_db05_frecuencia = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->cag_coliformes_valor = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->cag_coliformes_frecuencia = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->cag_oxigeno_disuelto_valor = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->cag_oxigeno_disuelto_frecuencia = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->cag_ph_valor = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->cag_ph_frecuencia = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->cag_turbiedad_valor = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->cag_turbiedad_frecuencia = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->cag_color_verdadero_valor = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->cag_color_verdadero_frecuencia = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->cag_sabor_olor_valor = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->cag_sabor_olor_frecuencia = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->cag_cloruros_valor = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->cag_cloruros_frecuencia = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->cag_fluoruros_valor = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->cag_fluoruros_frecuencia = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->cag_laboratorio_propio = ($row[$startcol + 22] !== null) ? (boolean) $row[$startcol + 22] : null;
			$this->cag_control_ca_distribuida = ($row[$startcol + 23] !== null) ? (boolean) $row[$startcol + 23] : null;
			$this->cag_puntos_red_analizados = ($row[$startcol + 24] !== null) ? (int) $row[$startcol + 24] : null;
			$this->cag_visita_sspd = ($row[$startcol + 25] !== null) ? (boolean) $row[$startcol + 25] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 26; // 26 = CalidadaguaPeer::NUM_COLUMNS - CalidadaguaPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Calidadagua object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aCalidad !== null && $this->cag_cal_id !== $this->aCalidad->getCalId()) {
			$this->aCalidad = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CalidadaguaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = CalidadaguaPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aCalidad = null;
			$this->collParametroxfrecuencias = null;
			$this->lastParametroxfrecuenciaCriteria = null;

			$this->collResultadosxpuntos = null;
			$this->lastResultadosxpuntoCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CalidadaguaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseCalidadagua:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				CalidadaguaPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseCalidadagua:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CalidadaguaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseCalidadagua:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseCalidadagua:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				CalidadaguaPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aCalidad !== null) {
				if ($this->aCalidad->isModified() || $this->aCalidad->isNew()) {
					$affectedRows += $this->aCalidad->save($con);
				}
				$this->setCalidad($this->aCalidad);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = CalidadaguaPeer::CAG_ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = CalidadaguaPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setCagId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += CalidadaguaPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collParametroxfrecuencias !== null) {
				foreach ($this->collParametroxfrecuencias as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collResultadosxpuntos !== null) {
				foreach ($this->collResultadosxpuntos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aCalidad !== null) {
				if (!$this->aCalidad->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCalidad->getValidationFailures());
				}
			}


			if (($retval = CalidadaguaPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collParametroxfrecuencias !== null) {
					foreach ($this->collParametroxfrecuencias as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collResultadosxpuntos !== null) {
					foreach ($this->collResultadosxpuntos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CalidadaguaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCagId();
				break;
			case 1:
				return $this->getCagCalId();
				break;
			case 2:
				return $this->getCagControlCaFuente();
				break;
			case 3:
				return $this->getCagMapaRiesgo();
				break;
			case 4:
				return $this->getCagDb05Valor();
				break;
			case 5:
				return $this->getCagDb05Frecuencia();
				break;
			case 6:
				return $this->getCagColiformesValor();
				break;
			case 7:
				return $this->getCagColiformesFrecuencia();
				break;
			case 8:
				return $this->getCagOxigenoDisueltoValor();
				break;
			case 9:
				return $this->getCagOxigenoDisueltoFrecuencia();
				break;
			case 10:
				return $this->getCagPhValor();
				break;
			case 11:
				return $this->getCagPhFrecuencia();
				break;
			case 12:
				return $this->getCagTurbiedadValor();
				break;
			case 13:
				return $this->getCagTurbiedadFrecuencia();
				break;
			case 14:
				return $this->getCagColorVerdaderoValor();
				break;
			case 15:
				return $this->getCagColorVerdaderoFrecuencia();
				break;
			case 16:
				return $this->getCagSaborOlorValor();
				break;
			case 17:
				return $this->getCagSaborOlorFrecuencia();
				break;
			case 18:
				return $this->getCagClorurosValor();
				break;
			case 19:
				return $this->getCagClorurosFrecuencia();
				break;
			case 20:
				return $this->getCagFluorurosValor();
				break;
			case 21:
				return $this->getCagFluorurosFrecuencia();
				break;
			case 22:
				return $this->getCagLaboratorioPropio();
				break;
			case 23:
				return $this->getCagControlCaDistribuida();
				break;
			case 24:
				return $this->getCagPuntosRedAnalizados();
				break;
			case 25:
				return $this->getCagVisitaSspd();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = CalidadaguaPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCagId(),
			$keys[1] => $this->getCagCalId(),
			$keys[2] => $this->getCagControlCaFuente(),
			$keys[3] => $this->getCagMapaRiesgo(),
			$keys[4] => $this->getCagDb05Valor(),
			$keys[5] => $this->getCagDb05Frecuencia(),
			$keys[6] => $this->getCagColiformesValor(),
			$keys[7] => $this->getCagColiformesFrecuencia(),
			$keys[8] => $this->getCagOxigenoDisueltoValor(),
			$keys[9] => $this->getCagOxigenoDisueltoFrecuencia(),
			$keys[10] => $this->getCagPhValor(),
			$keys[11] => $this->getCagPhFrecuencia(),
			$keys[12] => $this->getCagTurbiedadValor(),
			$keys[13] => $this->getCagTurbiedadFrecuencia(),
			$keys[14] => $this->getCagColorVerdaderoValor(),
			$keys[15] => $this->getCagColorVerdaderoFrecuencia(),
			$keys[16] => $this->getCagSaborOlorValor(),
			$keys[17] => $this->getCagSaborOlorFrecuencia(),
			$keys[18] => $this->getCagClorurosValor(),
			$keys[19] => $this->getCagClorurosFrecuencia(),
			$keys[20] => $this->getCagFluorurosValor(),
			$keys[21] => $this->getCagFluorurosFrecuencia(),
			$keys[22] => $this->getCagLaboratorioPropio(),
			$keys[23] => $this->getCagControlCaDistribuida(),
			$keys[24] => $this->getCagPuntosRedAnalizados(),
			$keys[25] => $this->getCagVisitaSspd(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CalidadaguaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCagId($value);
				break;
			case 1:
				$this->setCagCalId($value);
				break;
			case 2:
				$this->setCagControlCaFuente($value);
				break;
			case 3:
				$this->setCagMapaRiesgo($value);
				break;
			case 4:
				$this->setCagDb05Valor($value);
				break;
			case 5:
				$this->setCagDb05Frecuencia($value);
				break;
			case 6:
				$this->setCagColiformesValor($value);
				break;
			case 7:
				$this->setCagColiformesFrecuencia($value);
				break;
			case 8:
				$this->setCagOxigenoDisueltoValor($value);
				break;
			case 9:
				$this->setCagOxigenoDisueltoFrecuencia($value);
				break;
			case 10:
				$this->setCagPhValor($value);
				break;
			case 11:
				$this->setCagPhFrecuencia($value);
				break;
			case 12:
				$this->setCagTurbiedadValor($value);
				break;
			case 13:
				$this->setCagTurbiedadFrecuencia($value);
				break;
			case 14:
				$this->setCagColorVerdaderoValor($value);
				break;
			case 15:
				$this->setCagColorVerdaderoFrecuencia($value);
				break;
			case 16:
				$this->setCagSaborOlorValor($value);
				break;
			case 17:
				$this->setCagSaborOlorFrecuencia($value);
				break;
			case 18:
				$this->setCagClorurosValor($value);
				break;
			case 19:
				$this->setCagClorurosFrecuencia($value);
				break;
			case 20:
				$this->setCagFluorurosValor($value);
				break;
			case 21:
				$this->setCagFluorurosFrecuencia($value);
				break;
			case 22:
				$this->setCagLaboratorioPropio($value);
				break;
			case 23:
				$this->setCagControlCaDistribuida($value);
				break;
			case 24:
				$this->setCagPuntosRedAnalizados($value);
				break;
			case 25:
				$this->setCagVisitaSspd($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = CalidadaguaPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCagId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setCagCalId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setCagControlCaFuente($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setCagMapaRiesgo($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCagDb05Valor($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setCagDb05Frecuencia($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCagColiformesValor($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setCagColiformesFrecuencia($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setCagOxigenoDisueltoValor($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCagOxigenoDisueltoFrecuencia($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setCagPhValor($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setCagPhFrecuencia($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setCagTurbiedadValor($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setCagTurbiedadFrecuencia($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCagColorVerdaderoValor($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setCagColorVerdaderoFrecuencia($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setCagSaborOlorValor($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setCagSaborOlorFrecuencia($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setCagClorurosValor($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setCagClorurosFrecuencia($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setCagFluorurosValor($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setCagFluorurosFrecuencia($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setCagLaboratorioPropio($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setCagControlCaDistribuida($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setCagPuntosRedAnalizados($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setCagVisitaSspd($arr[$keys[25]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(CalidadaguaPeer::DATABASE_NAME);

		if ($this->isColumnModified(CalidadaguaPeer::CAG_ID)) $criteria->add(CalidadaguaPeer::CAG_ID, $this->cag_id);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_CAL_ID)) $criteria->add(CalidadaguaPeer::CAG_CAL_ID, $this->cag_cal_id);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_CONTROL_CA_FUENTE)) $criteria->add(CalidadaguaPeer::CAG_CONTROL_CA_FUENTE, $this->cag_control_ca_fuente);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_MAPA_RIESGO)) $criteria->add(CalidadaguaPeer::CAG_MAPA_RIESGO, $this->cag_mapa_riesgo);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_DB05_VALOR)) $criteria->add(CalidadaguaPeer::CAG_DB05_VALOR, $this->cag_db05_valor);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_DB05_FRECUENCIA)) $criteria->add(CalidadaguaPeer::CAG_DB05_FRECUENCIA, $this->cag_db05_frecuencia);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_COLIFORMES_VALOR)) $criteria->add(CalidadaguaPeer::CAG_COLIFORMES_VALOR, $this->cag_coliformes_valor);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_COLIFORMES_FRECUENCIA)) $criteria->add(CalidadaguaPeer::CAG_COLIFORMES_FRECUENCIA, $this->cag_coliformes_frecuencia);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_OXIGENO_DISUELTO_VALOR)) $criteria->add(CalidadaguaPeer::CAG_OXIGENO_DISUELTO_VALOR, $this->cag_oxigeno_disuelto_valor);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_OXIGENO_DISUELTO_FRECUENCIA)) $criteria->add(CalidadaguaPeer::CAG_OXIGENO_DISUELTO_FRECUENCIA, $this->cag_oxigeno_disuelto_frecuencia);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_PH_VALOR)) $criteria->add(CalidadaguaPeer::CAG_PH_VALOR, $this->cag_ph_valor);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_PH_FRECUENCIA)) $criteria->add(CalidadaguaPeer::CAG_PH_FRECUENCIA, $this->cag_ph_frecuencia);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_TURBIEDAD_VALOR)) $criteria->add(CalidadaguaPeer::CAG_TURBIEDAD_VALOR, $this->cag_turbiedad_valor);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_TURBIEDAD_FRECUENCIA)) $criteria->add(CalidadaguaPeer::CAG_TURBIEDAD_FRECUENCIA, $this->cag_turbiedad_frecuencia);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_COLOR_VERDADERO_VALOR)) $criteria->add(CalidadaguaPeer::CAG_COLOR_VERDADERO_VALOR, $this->cag_color_verdadero_valor);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_COLOR_VERDADERO_FRECUENCIA)) $criteria->add(CalidadaguaPeer::CAG_COLOR_VERDADERO_FRECUENCIA, $this->cag_color_verdadero_frecuencia);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_SABOR_OLOR_VALOR)) $criteria->add(CalidadaguaPeer::CAG_SABOR_OLOR_VALOR, $this->cag_sabor_olor_valor);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_SABOR_OLOR_FRECUENCIA)) $criteria->add(CalidadaguaPeer::CAG_SABOR_OLOR_FRECUENCIA, $this->cag_sabor_olor_frecuencia);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_CLORUROS_VALOR)) $criteria->add(CalidadaguaPeer::CAG_CLORUROS_VALOR, $this->cag_cloruros_valor);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_CLORUROS_FRECUENCIA)) $criteria->add(CalidadaguaPeer::CAG_CLORUROS_FRECUENCIA, $this->cag_cloruros_frecuencia);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_FLUORUROS_VALOR)) $criteria->add(CalidadaguaPeer::CAG_FLUORUROS_VALOR, $this->cag_fluoruros_valor);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_FLUORUROS_FRECUENCIA)) $criteria->add(CalidadaguaPeer::CAG_FLUORUROS_FRECUENCIA, $this->cag_fluoruros_frecuencia);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_LABORATORIO_PROPIO)) $criteria->add(CalidadaguaPeer::CAG_LABORATORIO_PROPIO, $this->cag_laboratorio_propio);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_CONTROL_CA_DISTRIBUIDA)) $criteria->add(CalidadaguaPeer::CAG_CONTROL_CA_DISTRIBUIDA, $this->cag_control_ca_distribuida);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_PUNTOS_RED_ANALIZADOS)) $criteria->add(CalidadaguaPeer::CAG_PUNTOS_RED_ANALIZADOS, $this->cag_puntos_red_analizados);
		if ($this->isColumnModified(CalidadaguaPeer::CAG_VISITA_SSPD)) $criteria->add(CalidadaguaPeer::CAG_VISITA_SSPD, $this->cag_visita_sspd);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(CalidadaguaPeer::DATABASE_NAME);

		$criteria->add(CalidadaguaPeer::CAG_ID, $this->cag_id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getCagId();
	}

	/**
	 * Generic method to set the primary key (cag_id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setCagId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Calidadagua (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCagCalId($this->cag_cal_id);

		$copyObj->setCagControlCaFuente($this->cag_control_ca_fuente);

		$copyObj->setCagMapaRiesgo($this->cag_mapa_riesgo);

		$copyObj->setCagDb05Valor($this->cag_db05_valor);

		$copyObj->setCagDb05Frecuencia($this->cag_db05_frecuencia);

		$copyObj->setCagColiformesValor($this->cag_coliformes_valor);

		$copyObj->setCagColiformesFrecuencia($this->cag_coliformes_frecuencia);

		$copyObj->setCagOxigenoDisueltoValor($this->cag_oxigeno_disuelto_valor);

		$copyObj->setCagOxigenoDisueltoFrecuencia($this->cag_oxigeno_disuelto_frecuencia);

		$copyObj->setCagPhValor($this->cag_ph_valor);

		$copyObj->setCagPhFrecuencia($this->cag_ph_frecuencia);

		$copyObj->setCagTurbiedadValor($this->cag_turbiedad_valor);

		$copyObj->setCagTurbiedadFrecuencia($this->cag_turbiedad_frecuencia);

		$copyObj->setCagColorVerdaderoValor($this->cag_color_verdadero_valor);

		$copyObj->setCagColorVerdaderoFrecuencia($this->cag_color_verdadero_frecuencia);

		$copyObj->setCagSaborOlorValor($this->cag_sabor_olor_valor);

		$copyObj->setCagSaborOlorFrecuencia($this->cag_sabor_olor_frecuencia);

		$copyObj->setCagClorurosValor($this->cag_cloruros_valor);

		$copyObj->setCagClorurosFrecuencia($this->cag_cloruros_frecuencia);

		$copyObj->setCagFluorurosValor($this->cag_fluoruros_valor);

		$copyObj->setCagFluorurosFrecuencia($this->cag_fluoruros_frecuencia);

		$copyObj->setCagLaboratorioPropio($this->cag_laboratorio_propio);

		$copyObj->setCagControlCaDistribuida($this->cag_control_ca_distribuida);

		$copyObj->setCagPuntosRedAnalizados($this->cag_puntos_red_analizados);

		$copyObj->setCagVisitaSspd($this->cag_visita_sspd);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getParametroxfrecuencias() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addParametroxfrecuencia($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getResultadosxpuntos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addResultadosxpunto($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setCagId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Calidadagua Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     CalidadaguaPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new CalidadaguaPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Calidad object.
	 *
	 * @param      Calidad $v
	 * @return     Calidadagua The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCalidad(Calidad $v = null)
	{
		if ($v === null) {
			$this->setCagCalId(NULL);
		} else {
			$this->setCagCalId($v->getCalId());
		}

		$this->aCalidad = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Calidad object, it will not be re-added.
		if ($v !== null) {
			$v->addCalidadagua($this);
		}

		return $this;
	}


	/**
	 * Get the associated Calidad object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Calidad The associated Calidad object.
	 * @throws     PropelException
	 */
	public function getCalidad(PropelPDO $con = null)
	{
		if ($this->aCalidad === null && ($this->cag_cal_id !== null)) {
			$this->aCalidad = CalidadPeer::retrieveByPk($this->cag_cal_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCalidad->addCalidadaguas($this);
			 */
		}
		return $this->aCalidad;
	}

	/**
	 * Clears out the collParametroxfrecuencias collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addParametroxfrecuencias()
	 */
	public function clearParametroxfrecuencias()
	{
		$this->collParametroxfrecuencias = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collParametroxfrecuencias collection (array).
	 *
	 * By default this just sets the collParametroxfrecuencias collection to an empty array (like clearcollParametroxfrecuencias());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initParametroxfrecuencias()
	{
		$this->collParametroxfrecuencias = array();
	}

	/**
	 * Gets an array of Parametroxfrecuencia objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Calidadagua has previously been saved, it will retrieve
	 * related Parametroxfrecuencias from storage. If this Calidadagua is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Parametroxfrecuencia[]
	 * @throws     PropelException
	 */
	public function getParametroxfrecuencias($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CalidadaguaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collParametroxfrecuencias === null) {
			if ($this->isNew()) {
			   $this->collParametroxfrecuencias = array();
			} else {

				$criteria->add(ParametroxfrecuenciaPeer::PFE_CAG_ID, $this->cag_id);

				ParametroxfrecuenciaPeer::addSelectColumns($criteria);
				$this->collParametroxfrecuencias = ParametroxfrecuenciaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ParametroxfrecuenciaPeer::PFE_CAG_ID, $this->cag_id);

				ParametroxfrecuenciaPeer::addSelectColumns($criteria);
				if (!isset($this->lastParametroxfrecuenciaCriteria) || !$this->lastParametroxfrecuenciaCriteria->equals($criteria)) {
					$this->collParametroxfrecuencias = ParametroxfrecuenciaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastParametroxfrecuenciaCriteria = $criteria;
		return $this->collParametroxfrecuencias;
	}

	/**
	 * Returns the number of related Parametroxfrecuencia objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Parametroxfrecuencia objects.
	 * @throws     PropelException
	 */
	public function countParametroxfrecuencias(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CalidadaguaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collParametroxfrecuencias === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ParametroxfrecuenciaPeer::PFE_CAG_ID, $this->cag_id);

				$count = ParametroxfrecuenciaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ParametroxfrecuenciaPeer::PFE_CAG_ID, $this->cag_id);

				if (!isset($this->lastParametroxfrecuenciaCriteria) || !$this->lastParametroxfrecuenciaCriteria->equals($criteria)) {
					$count = ParametroxfrecuenciaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collParametroxfrecuencias);
				}
			} else {
				$count = count($this->collParametroxfrecuencias);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Parametroxfrecuencia object to this object
	 * through the Parametroxfrecuencia foreign key attribute.
	 *
	 * @param      Parametroxfrecuencia $l Parametroxfrecuencia
	 * @return     void
	 * @throws     PropelException
	 */
	public function addParametroxfrecuencia(Parametroxfrecuencia $l)
	{
		if ($this->collParametroxfrecuencias === null) {
			$this->initParametroxfrecuencias();
		}
		if (!in_array($l, $this->collParametroxfrecuencias, true)) { // only add it if the **same** object is not already associated
			array_push($this->collParametroxfrecuencias, $l);
			$l->setCalidadagua($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Calidadagua is new, it will return
	 * an empty collection; or if this Calidadagua has previously
	 * been saved, it will retrieve related Parametroxfrecuencias from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Calidadagua.
	 */
	public function getParametroxfrecuenciasJoinParametrospuntosred($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CalidadaguaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collParametroxfrecuencias === null) {
			if ($this->isNew()) {
				$this->collParametroxfrecuencias = array();
			} else {

				$criteria->add(ParametroxfrecuenciaPeer::PFE_CAG_ID, $this->cag_id);

				$this->collParametroxfrecuencias = ParametroxfrecuenciaPeer::doSelectJoinParametrospuntosred($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ParametroxfrecuenciaPeer::PFE_CAG_ID, $this->cag_id);

			if (!isset($this->lastParametroxfrecuenciaCriteria) || !$this->lastParametroxfrecuenciaCriteria->equals($criteria)) {
				$this->collParametroxfrecuencias = ParametroxfrecuenciaPeer::doSelectJoinParametrospuntosred($criteria, $con, $join_behavior);
			}
		}
		$this->lastParametroxfrecuenciaCriteria = $criteria;

		return $this->collParametroxfrecuencias;
	}

	/**
	 * Clears out the collResultadosxpuntos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addResultadosxpuntos()
	 */
	public function clearResultadosxpuntos()
	{
		$this->collResultadosxpuntos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collResultadosxpuntos collection (array).
	 *
	 * By default this just sets the collResultadosxpuntos collection to an empty array (like clearcollResultadosxpuntos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initResultadosxpuntos()
	{
		$this->collResultadosxpuntos = array();
	}

	/**
	 * Gets an array of Resultadosxpunto objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Calidadagua has previously been saved, it will retrieve
	 * related Resultadosxpuntos from storage. If this Calidadagua is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Resultadosxpunto[]
	 * @throws     PropelException
	 */
	public function getResultadosxpuntos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CalidadaguaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResultadosxpuntos === null) {
			if ($this->isNew()) {
			   $this->collResultadosxpuntos = array();
			} else {

				$criteria->add(ResultadosxpuntoPeer::REP_CAG_ID, $this->cag_id);

				ResultadosxpuntoPeer::addSelectColumns($criteria);
				$this->collResultadosxpuntos = ResultadosxpuntoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ResultadosxpuntoPeer::REP_CAG_ID, $this->cag_id);

				ResultadosxpuntoPeer::addSelectColumns($criteria);
				if (!isset($this->lastResultadosxpuntoCriteria) || !$this->lastResultadosxpuntoCriteria->equals($criteria)) {
					$this->collResultadosxpuntos = ResultadosxpuntoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastResultadosxpuntoCriteria = $criteria;
		return $this->collResultadosxpuntos;
	}

	/**
	 * Returns the number of related Resultadosxpunto objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Resultadosxpunto objects.
	 * @throws     PropelException
	 */
	public function countResultadosxpuntos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CalidadaguaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collResultadosxpuntos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ResultadosxpuntoPeer::REP_CAG_ID, $this->cag_id);

				$count = ResultadosxpuntoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ResultadosxpuntoPeer::REP_CAG_ID, $this->cag_id);

				if (!isset($this->lastResultadosxpuntoCriteria) || !$this->lastResultadosxpuntoCriteria->equals($criteria)) {
					$count = ResultadosxpuntoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collResultadosxpuntos);
				}
			} else {
				$count = count($this->collResultadosxpuntos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Resultadosxpunto object to this object
	 * through the Resultadosxpunto foreign key attribute.
	 *
	 * @param      Resultadosxpunto $l Resultadosxpunto
	 * @return     void
	 * @throws     PropelException
	 */
	public function addResultadosxpunto(Resultadosxpunto $l)
	{
		if ($this->collResultadosxpuntos === null) {
			$this->initResultadosxpuntos();
		}
		if (!in_array($l, $this->collResultadosxpuntos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collResultadosxpuntos, $l);
			$l->setCalidadagua($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Calidadagua is new, it will return
	 * an empty collection; or if this Calidadagua has previously
	 * been saved, it will retrieve related Resultadosxpuntos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Calidadagua.
	 */
	public function getResultadosxpuntosJoinParametrospuntosred($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CalidadaguaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResultadosxpuntos === null) {
			if ($this->isNew()) {
				$this->collResultadosxpuntos = array();
			} else {

				$criteria->add(ResultadosxpuntoPeer::REP_CAG_ID, $this->cag_id);

				$this->collResultadosxpuntos = ResultadosxpuntoPeer::doSelectJoinParametrospuntosred($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ResultadosxpuntoPeer::REP_CAG_ID, $this->cag_id);

			if (!isset($this->lastResultadosxpuntoCriteria) || !$this->lastResultadosxpuntoCriteria->equals($criteria)) {
				$this->collResultadosxpuntos = ResultadosxpuntoPeer::doSelectJoinParametrospuntosred($criteria, $con, $join_behavior);
			}
		}
		$this->lastResultadosxpuntoCriteria = $criteria;

		return $this->collResultadosxpuntos;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collParametroxfrecuencias) {
				foreach ((array) $this->collParametroxfrecuencias as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collResultadosxpuntos) {
				foreach ((array) $this->collResultadosxpuntos as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collParametroxfrecuencias = null;
		$this->collResultadosxpuntos = null;
			$this->aCalidad = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseCalidadagua:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseCalidadagua::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseCalidadagua
