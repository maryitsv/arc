<?php

/**
 * Base class that represents a row from the 'informacioncontable' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 07/29/10 00:07:00
 *
 * @package    lib.model.om
 */
abstract class BaseInformacioncontable extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        InformacioncontablePeer
	 */
	protected static $peer;

	/**
	 * The value for the ico_id field.
	 * @var        int
	 */
	protected $ico_id;

	/**
	 * The value for the ico_iaf_id field.
	 * @var        int
	 */
	protected $ico_iaf_id;

	/**
	 * The value for the ico_balance_general field.
	 * @var        string
	 */
	protected $ico_balance_general;

	/**
	 * The value for the ico_activos field.
	 * @var        string
	 */
	protected $ico_activos;

	/**
	 * The value for the ico_activos_corrientes field.
	 * @var        string
	 */
	protected $ico_activos_corrientes;

	/**
	 * The value for the ico_efectivo field.
	 * @var        string
	 */
	protected $ico_efectivo;

	/**
	 * The value for the ico_deudores field.
	 * @var        string
	 */
	protected $ico_deudores;

	/**
	 * The value for the ico_inventario field.
	 * @var        string
	 */
	protected $ico_inventario;

	/**
	 * The value for the ico_activos_fijos field.
	 * @var        string
	 */
	protected $ico_activos_fijos;

	/**
	 * The value for the ico_propiedad_planta_equipos field.
	 * @var        string
	 */
	protected $ico_propiedad_planta_equipos;

	/**
	 * The value for the ico_otros_activos field.
	 * @var        string
	 */
	protected $ico_otros_activos;

	/**
	 * The value for the ico_pasivos field.
	 * @var        string
	 */
	protected $ico_pasivos;

	/**
	 * The value for the ico_pasivos_corrientes field.
	 * @var        string
	 */
	protected $ico_pasivos_corrientes;

	/**
	 * The value for the ico_obligaciones_financieras field.
	 * @var        string
	 */
	protected $ico_obligaciones_financieras;

	/**
	 * The value for the ico_otras_cuentas_por_pagar field.
	 * @var        string
	 */
	protected $ico_otras_cuentas_por_pagar;

	/**
	 * The value for the ico_obligaciones_laborales field.
	 * @var        string
	 */
	protected $ico_obligaciones_laborales;

	/**
	 * The value for the ico_otros_pasivos field.
	 * @var        string
	 */
	protected $ico_otros_pasivos;

	/**
	 * The value for the ico_patrimonio field.
	 * @var        string
	 */
	protected $ico_patrimonio;

	/**
	 * The value for the ico_estado_de_resultados field.
	 * @var        string
	 */
	protected $ico_estado_de_resultados;

	/**
	 * The value for the ico_total_ingresos field.
	 * @var        string
	 */
	protected $ico_total_ingresos;

	/**
	 * The value for the ico_ingresos_operacionales field.
	 * @var        string
	 */
	protected $ico_ingresos_operacionales;

	/**
	 * The value for the ico_ingresos_no_operacionales field.
	 * @var        string
	 */
	protected $ico_ingresos_no_operacionales;

	/**
	 * The value for the ico_total_egresos field.
	 * @var        string
	 */
	protected $ico_total_egresos;

	/**
	 * The value for the ico_gastos_administrativos field.
	 * @var        string
	 */
	protected $ico_gastos_administrativos;

	/**
	 * The value for the ico_costo_operacion_mantenimiento field.
	 * @var        string
	 */
	protected $ico_costo_operacion_mantenimiento;

	/**
	 * The value for the ico_costo_inversion field.
	 * @var        string
	 */
	protected $ico_costo_inversion;

	/**
	 * The value for the ico_resultados_ejercicio field.
	 * @var        string
	 */
	protected $ico_resultados_ejercicio;

	/**
	 * @var        Administrativafinanciera
	 */
	protected $aAdministrativafinanciera;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'InformacioncontablePeer';

	/**
	 * Get the [ico_id] column value.
	 * 
	 * @return     int
	 */
	public function getIcoId()
	{
		return $this->ico_id;
	}

	/**
	 * Get the [ico_iaf_id] column value.
	 * 
	 * @return     int
	 */
	public function getIcoIafId()
	{
		return $this->ico_iaf_id;
	}

	/**
	 * Get the [optionally formatted] temporal [ico_balance_general] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getIcoBalanceGeneral($format = 'Y-m-d')
	{
		if ($this->ico_balance_general === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->ico_balance_general);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->ico_balance_general, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [ico_activos] column value.
	 * 
	 * @return     string
	 */
	public function getIcoActivos()
	{
		return $this->ico_activos;
	}

	/**
	 * Get the [ico_activos_corrientes] column value.
	 * 
	 * @return     string
	 */
	public function getIcoActivosCorrientes()
	{
		return $this->ico_activos_corrientes;
	}

	/**
	 * Get the [ico_efectivo] column value.
	 * 
	 * @return     string
	 */
	public function getIcoEfectivo()
	{
		return $this->ico_efectivo;
	}

	/**
	 * Get the [ico_deudores] column value.
	 * 
	 * @return     string
	 */
	public function getIcoDeudores()
	{
		return $this->ico_deudores;
	}

	/**
	 * Get the [ico_inventario] column value.
	 * 
	 * @return     string
	 */
	public function getIcoInventario()
	{
		return $this->ico_inventario;
	}

	/**
	 * Get the [ico_activos_fijos] column value.
	 * 
	 * @return     string
	 */
	public function getIcoActivosFijos()
	{
		return $this->ico_activos_fijos;
	}

	/**
	 * Get the [ico_propiedad_planta_equipos] column value.
	 * 
	 * @return     string
	 */
	public function getIcoPropiedadPlantaEquipos()
	{
		return $this->ico_propiedad_planta_equipos;
	}

	/**
	 * Get the [ico_otros_activos] column value.
	 * 
	 * @return     string
	 */
	public function getIcoOtrosActivos()
	{
		return $this->ico_otros_activos;
	}

	/**
	 * Get the [ico_pasivos] column value.
	 * 
	 * @return     string
	 */
	public function getIcoPasivos()
	{
		return $this->ico_pasivos;
	}

	/**
	 * Get the [ico_pasivos_corrientes] column value.
	 * 
	 * @return     string
	 */
	public function getIcoPasivosCorrientes()
	{
		return $this->ico_pasivos_corrientes;
	}

	/**
	 * Get the [ico_obligaciones_financieras] column value.
	 * 
	 * @return     string
	 */
	public function getIcoObligacionesFinancieras()
	{
		return $this->ico_obligaciones_financieras;
	}

	/**
	 * Get the [ico_otras_cuentas_por_pagar] column value.
	 * 
	 * @return     string
	 */
	public function getIcoOtrasCuentasPorPagar()
	{
		return $this->ico_otras_cuentas_por_pagar;
	}

	/**
	 * Get the [ico_obligaciones_laborales] column value.
	 * 
	 * @return     string
	 */
	public function getIcoObligacionesLaborales()
	{
		return $this->ico_obligaciones_laborales;
	}

	/**
	 * Get the [ico_otros_pasivos] column value.
	 * 
	 * @return     string
	 */
	public function getIcoOtrosPasivos()
	{
		return $this->ico_otros_pasivos;
	}

	/**
	 * Get the [ico_patrimonio] column value.
	 * 
	 * @return     string
	 */
	public function getIcoPatrimonio()
	{
		return $this->ico_patrimonio;
	}

	/**
	 * Get the [optionally formatted] temporal [ico_estado_de_resultados] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getIcoEstadoDeResultados($format = 'Y-m-d')
	{
		if ($this->ico_estado_de_resultados === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->ico_estado_de_resultados);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->ico_estado_de_resultados, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [ico_total_ingresos] column value.
	 * 
	 * @return     string
	 */
	public function getIcoTotalIngresos()
	{
		return $this->ico_total_ingresos;
	}

	/**
	 * Get the [ico_ingresos_operacionales] column value.
	 * 
	 * @return     string
	 */
	public function getIcoIngresosOperacionales()
	{
		return $this->ico_ingresos_operacionales;
	}

	/**
	 * Get the [ico_ingresos_no_operacionales] column value.
	 * 
	 * @return     string
	 */
	public function getIcoIngresosNoOperacionales()
	{
		return $this->ico_ingresos_no_operacionales;
	}

	/**
	 * Get the [ico_total_egresos] column value.
	 * 
	 * @return     string
	 */
	public function getIcoTotalEgresos()
	{
		return $this->ico_total_egresos;
	}

	/**
	 * Get the [ico_gastos_administrativos] column value.
	 * 
	 * @return     string
	 */
	public function getIcoGastosAdministrativos()
	{
		return $this->ico_gastos_administrativos;
	}

	/**
	 * Get the [ico_costo_operacion_mantenimiento] column value.
	 * 
	 * @return     string
	 */
	public function getIcoCostoOperacionMantenimiento()
	{
		return $this->ico_costo_operacion_mantenimiento;
	}

	/**
	 * Get the [ico_costo_inversion] column value.
	 * 
	 * @return     string
	 */
	public function getIcoCostoInversion()
	{
		return $this->ico_costo_inversion;
	}

	/**
	 * Get the [ico_resultados_ejercicio] column value.
	 * 
	 * @return     string
	 */
	public function getIcoResultadosEjercicio()
	{
		return $this->ico_resultados_ejercicio;
	}

	/**
	 * Set the value of [ico_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->ico_id !== $v) {
			$this->ico_id = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_ID;
		}

		return $this;
	} // setIcoId()

	/**
	 * Set the value of [ico_iaf_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoIafId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->ico_iaf_id !== $v) {
			$this->ico_iaf_id = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_IAF_ID;
		}

		if ($this->aAdministrativafinanciera !== null && $this->aAdministrativafinanciera->getIafId() !== $v) {
			$this->aAdministrativafinanciera = null;
		}

		return $this;
	} // setIcoIafId()

	/**
	 * Sets the value of [ico_balance_general] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoBalanceGeneral($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->ico_balance_general !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->ico_balance_general !== null && $tmpDt = new DateTime($this->ico_balance_general)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->ico_balance_general = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = InformacioncontablePeer::ICO_BALANCE_GENERAL;
			}
		} // if either are not null

		return $this;
	} // setIcoBalanceGeneral()

	/**
	 * Set the value of [ico_activos] column.
	 * 
	 * @param      string $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoActivos($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ico_activos !== $v) {
			$this->ico_activos = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_ACTIVOS;
		}

		return $this;
	} // setIcoActivos()

	/**
	 * Set the value of [ico_activos_corrientes] column.
	 * 
	 * @param      string $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoActivosCorrientes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ico_activos_corrientes !== $v) {
			$this->ico_activos_corrientes = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_ACTIVOS_CORRIENTES;
		}

		return $this;
	} // setIcoActivosCorrientes()

	/**
	 * Set the value of [ico_efectivo] column.
	 * 
	 * @param      string $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoEfectivo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ico_efectivo !== $v) {
			$this->ico_efectivo = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_EFECTIVO;
		}

		return $this;
	} // setIcoEfectivo()

	/**
	 * Set the value of [ico_deudores] column.
	 * 
	 * @param      string $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoDeudores($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ico_deudores !== $v) {
			$this->ico_deudores = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_DEUDORES;
		}

		return $this;
	} // setIcoDeudores()

	/**
	 * Set the value of [ico_inventario] column.
	 * 
	 * @param      string $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoInventario($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ico_inventario !== $v) {
			$this->ico_inventario = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_INVENTARIO;
		}

		return $this;
	} // setIcoInventario()

	/**
	 * Set the value of [ico_activos_fijos] column.
	 * 
	 * @param      string $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoActivosFijos($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ico_activos_fijos !== $v) {
			$this->ico_activos_fijos = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_ACTIVOS_FIJOS;
		}

		return $this;
	} // setIcoActivosFijos()

	/**
	 * Set the value of [ico_propiedad_planta_equipos] column.
	 * 
	 * @param      string $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoPropiedadPlantaEquipos($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ico_propiedad_planta_equipos !== $v) {
			$this->ico_propiedad_planta_equipos = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_PROPIEDAD_PLANTA_EQUIPOS;
		}

		return $this;
	} // setIcoPropiedadPlantaEquipos()

	/**
	 * Set the value of [ico_otros_activos] column.
	 * 
	 * @param      string $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoOtrosActivos($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ico_otros_activos !== $v) {
			$this->ico_otros_activos = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_OTROS_ACTIVOS;
		}

		return $this;
	} // setIcoOtrosActivos()

	/**
	 * Set the value of [ico_pasivos] column.
	 * 
	 * @param      string $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoPasivos($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ico_pasivos !== $v) {
			$this->ico_pasivos = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_PASIVOS;
		}

		return $this;
	} // setIcoPasivos()

	/**
	 * Set the value of [ico_pasivos_corrientes] column.
	 * 
	 * @param      string $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoPasivosCorrientes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ico_pasivos_corrientes !== $v) {
			$this->ico_pasivos_corrientes = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_PASIVOS_CORRIENTES;
		}

		return $this;
	} // setIcoPasivosCorrientes()

	/**
	 * Set the value of [ico_obligaciones_financieras] column.
	 * 
	 * @param      string $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoObligacionesFinancieras($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ico_obligaciones_financieras !== $v) {
			$this->ico_obligaciones_financieras = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_OBLIGACIONES_FINANCIERAS;
		}

		return $this;
	} // setIcoObligacionesFinancieras()

	/**
	 * Set the value of [ico_otras_cuentas_por_pagar] column.
	 * 
	 * @param      string $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoOtrasCuentasPorPagar($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ico_otras_cuentas_por_pagar !== $v) {
			$this->ico_otras_cuentas_por_pagar = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_OTRAS_CUENTAS_POR_PAGAR;
		}

		return $this;
	} // setIcoOtrasCuentasPorPagar()

	/**
	 * Set the value of [ico_obligaciones_laborales] column.
	 * 
	 * @param      string $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoObligacionesLaborales($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ico_obligaciones_laborales !== $v) {
			$this->ico_obligaciones_laborales = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_OBLIGACIONES_LABORALES;
		}

		return $this;
	} // setIcoObligacionesLaborales()

	/**
	 * Set the value of [ico_otros_pasivos] column.
	 * 
	 * @param      string $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoOtrosPasivos($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ico_otros_pasivos !== $v) {
			$this->ico_otros_pasivos = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_OTROS_PASIVOS;
		}

		return $this;
	} // setIcoOtrosPasivos()

	/**
	 * Set the value of [ico_patrimonio] column.
	 * 
	 * @param      string $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoPatrimonio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ico_patrimonio !== $v) {
			$this->ico_patrimonio = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_PATRIMONIO;
		}

		return $this;
	} // setIcoPatrimonio()

	/**
	 * Sets the value of [ico_estado_de_resultados] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoEstadoDeResultados($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->ico_estado_de_resultados !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->ico_estado_de_resultados !== null && $tmpDt = new DateTime($this->ico_estado_de_resultados)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->ico_estado_de_resultados = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = InformacioncontablePeer::ICO_ESTADO_DE_RESULTADOS;
			}
		} // if either are not null

		return $this;
	} // setIcoEstadoDeResultados()

	/**
	 * Set the value of [ico_total_ingresos] column.
	 * 
	 * @param      string $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoTotalIngresos($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ico_total_ingresos !== $v) {
			$this->ico_total_ingresos = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_TOTAL_INGRESOS;
		}

		return $this;
	} // setIcoTotalIngresos()

	/**
	 * Set the value of [ico_ingresos_operacionales] column.
	 * 
	 * @param      string $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoIngresosOperacionales($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ico_ingresos_operacionales !== $v) {
			$this->ico_ingresos_operacionales = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_INGRESOS_OPERACIONALES;
		}

		return $this;
	} // setIcoIngresosOperacionales()

	/**
	 * Set the value of [ico_ingresos_no_operacionales] column.
	 * 
	 * @param      string $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoIngresosNoOperacionales($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ico_ingresos_no_operacionales !== $v) {
			$this->ico_ingresos_no_operacionales = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_INGRESOS_NO_OPERACIONALES;
		}

		return $this;
	} // setIcoIngresosNoOperacionales()

	/**
	 * Set the value of [ico_total_egresos] column.
	 * 
	 * @param      string $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoTotalEgresos($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ico_total_egresos !== $v) {
			$this->ico_total_egresos = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_TOTAL_EGRESOS;
		}

		return $this;
	} // setIcoTotalEgresos()

	/**
	 * Set the value of [ico_gastos_administrativos] column.
	 * 
	 * @param      string $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoGastosAdministrativos($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ico_gastos_administrativos !== $v) {
			$this->ico_gastos_administrativos = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_GASTOS_ADMINISTRATIVOS;
		}

		return $this;
	} // setIcoGastosAdministrativos()

	/**
	 * Set the value of [ico_costo_operacion_mantenimiento] column.
	 * 
	 * @param      string $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoCostoOperacionMantenimiento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ico_costo_operacion_mantenimiento !== $v) {
			$this->ico_costo_operacion_mantenimiento = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_COSTO_OPERACION_MANTENIMIENTO;
		}

		return $this;
	} // setIcoCostoOperacionMantenimiento()

	/**
	 * Set the value of [ico_costo_inversion] column.
	 * 
	 * @param      string $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoCostoInversion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ico_costo_inversion !== $v) {
			$this->ico_costo_inversion = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_COSTO_INVERSION;
		}

		return $this;
	} // setIcoCostoInversion()

	/**
	 * Set the value of [ico_resultados_ejercicio] column.
	 * 
	 * @param      string $v new value
	 * @return     Informacioncontable The current object (for fluent API support)
	 */
	public function setIcoResultadosEjercicio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ico_resultados_ejercicio !== $v) {
			$this->ico_resultados_ejercicio = $v;
			$this->modifiedColumns[] = InformacioncontablePeer::ICO_RESULTADOS_EJERCICIO;
		}

		return $this;
	} // setIcoResultadosEjercicio()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->ico_id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->ico_iaf_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->ico_balance_general = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->ico_activos = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->ico_activos_corrientes = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->ico_efectivo = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->ico_deudores = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->ico_inventario = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->ico_activos_fijos = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->ico_propiedad_planta_equipos = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->ico_otros_activos = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->ico_pasivos = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->ico_pasivos_corrientes = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->ico_obligaciones_financieras = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->ico_otras_cuentas_por_pagar = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->ico_obligaciones_laborales = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->ico_otros_pasivos = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->ico_patrimonio = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->ico_estado_de_resultados = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->ico_total_ingresos = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->ico_ingresos_operacionales = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->ico_ingresos_no_operacionales = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->ico_total_egresos = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->ico_gastos_administrativos = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->ico_costo_operacion_mantenimiento = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->ico_costo_inversion = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->ico_resultados_ejercicio = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 27; // 27 = InformacioncontablePeer::NUM_COLUMNS - InformacioncontablePeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Informacioncontable object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aAdministrativafinanciera !== null && $this->ico_iaf_id !== $this->aAdministrativafinanciera->getIafId()) {
			$this->aAdministrativafinanciera = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(InformacioncontablePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = InformacioncontablePeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aAdministrativafinanciera = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(InformacioncontablePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseInformacioncontable:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				InformacioncontablePeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseInformacioncontable:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(InformacioncontablePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseInformacioncontable:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseInformacioncontable:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				InformacioncontablePeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aAdministrativafinanciera !== null) {
				if ($this->aAdministrativafinanciera->isModified() || $this->aAdministrativafinanciera->isNew()) {
					$affectedRows += $this->aAdministrativafinanciera->save($con);
				}
				$this->setAdministrativafinanciera($this->aAdministrativafinanciera);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = InformacioncontablePeer::ICO_ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = InformacioncontablePeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setIcoId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += InformacioncontablePeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aAdministrativafinanciera !== null) {
				if (!$this->aAdministrativafinanciera->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAdministrativafinanciera->getValidationFailures());
				}
			}


			if (($retval = InformacioncontablePeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = InformacioncontablePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getIcoId();
				break;
			case 1:
				return $this->getIcoIafId();
				break;
			case 2:
				return $this->getIcoBalanceGeneral();
				break;
			case 3:
				return $this->getIcoActivos();
				break;
			case 4:
				return $this->getIcoActivosCorrientes();
				break;
			case 5:
				return $this->getIcoEfectivo();
				break;
			case 6:
				return $this->getIcoDeudores();
				break;
			case 7:
				return $this->getIcoInventario();
				break;
			case 8:
				return $this->getIcoActivosFijos();
				break;
			case 9:
				return $this->getIcoPropiedadPlantaEquipos();
				break;
			case 10:
				return $this->getIcoOtrosActivos();
				break;
			case 11:
				return $this->getIcoPasivos();
				break;
			case 12:
				return $this->getIcoPasivosCorrientes();
				break;
			case 13:
				return $this->getIcoObligacionesFinancieras();
				break;
			case 14:
				return $this->getIcoOtrasCuentasPorPagar();
				break;
			case 15:
				return $this->getIcoObligacionesLaborales();
				break;
			case 16:
				return $this->getIcoOtrosPasivos();
				break;
			case 17:
				return $this->getIcoPatrimonio();
				break;
			case 18:
				return $this->getIcoEstadoDeResultados();
				break;
			case 19:
				return $this->getIcoTotalIngresos();
				break;
			case 20:
				return $this->getIcoIngresosOperacionales();
				break;
			case 21:
				return $this->getIcoIngresosNoOperacionales();
				break;
			case 22:
				return $this->getIcoTotalEgresos();
				break;
			case 23:
				return $this->getIcoGastosAdministrativos();
				break;
			case 24:
				return $this->getIcoCostoOperacionMantenimiento();
				break;
			case 25:
				return $this->getIcoCostoInversion();
				break;
			case 26:
				return $this->getIcoResultadosEjercicio();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = InformacioncontablePeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getIcoId(),
			$keys[1] => $this->getIcoIafId(),
			$keys[2] => $this->getIcoBalanceGeneral(),
			$keys[3] => $this->getIcoActivos(),
			$keys[4] => $this->getIcoActivosCorrientes(),
			$keys[5] => $this->getIcoEfectivo(),
			$keys[6] => $this->getIcoDeudores(),
			$keys[7] => $this->getIcoInventario(),
			$keys[8] => $this->getIcoActivosFijos(),
			$keys[9] => $this->getIcoPropiedadPlantaEquipos(),
			$keys[10] => $this->getIcoOtrosActivos(),
			$keys[11] => $this->getIcoPasivos(),
			$keys[12] => $this->getIcoPasivosCorrientes(),
			$keys[13] => $this->getIcoObligacionesFinancieras(),
			$keys[14] => $this->getIcoOtrasCuentasPorPagar(),
			$keys[15] => $this->getIcoObligacionesLaborales(),
			$keys[16] => $this->getIcoOtrosPasivos(),
			$keys[17] => $this->getIcoPatrimonio(),
			$keys[18] => $this->getIcoEstadoDeResultados(),
			$keys[19] => $this->getIcoTotalIngresos(),
			$keys[20] => $this->getIcoIngresosOperacionales(),
			$keys[21] => $this->getIcoIngresosNoOperacionales(),
			$keys[22] => $this->getIcoTotalEgresos(),
			$keys[23] => $this->getIcoGastosAdministrativos(),
			$keys[24] => $this->getIcoCostoOperacionMantenimiento(),
			$keys[25] => $this->getIcoCostoInversion(),
			$keys[26] => $this->getIcoResultadosEjercicio(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = InformacioncontablePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setIcoId($value);
				break;
			case 1:
				$this->setIcoIafId($value);
				break;
			case 2:
				$this->setIcoBalanceGeneral($value);
				break;
			case 3:
				$this->setIcoActivos($value);
				break;
			case 4:
				$this->setIcoActivosCorrientes($value);
				break;
			case 5:
				$this->setIcoEfectivo($value);
				break;
			case 6:
				$this->setIcoDeudores($value);
				break;
			case 7:
				$this->setIcoInventario($value);
				break;
			case 8:
				$this->setIcoActivosFijos($value);
				break;
			case 9:
				$this->setIcoPropiedadPlantaEquipos($value);
				break;
			case 10:
				$this->setIcoOtrosActivos($value);
				break;
			case 11:
				$this->setIcoPasivos($value);
				break;
			case 12:
				$this->setIcoPasivosCorrientes($value);
				break;
			case 13:
				$this->setIcoObligacionesFinancieras($value);
				break;
			case 14:
				$this->setIcoOtrasCuentasPorPagar($value);
				break;
			case 15:
				$this->setIcoObligacionesLaborales($value);
				break;
			case 16:
				$this->setIcoOtrosPasivos($value);
				break;
			case 17:
				$this->setIcoPatrimonio($value);
				break;
			case 18:
				$this->setIcoEstadoDeResultados($value);
				break;
			case 19:
				$this->setIcoTotalIngresos($value);
				break;
			case 20:
				$this->setIcoIngresosOperacionales($value);
				break;
			case 21:
				$this->setIcoIngresosNoOperacionales($value);
				break;
			case 22:
				$this->setIcoTotalEgresos($value);
				break;
			case 23:
				$this->setIcoGastosAdministrativos($value);
				break;
			case 24:
				$this->setIcoCostoOperacionMantenimiento($value);
				break;
			case 25:
				$this->setIcoCostoInversion($value);
				break;
			case 26:
				$this->setIcoResultadosEjercicio($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = InformacioncontablePeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setIcoId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setIcoIafId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setIcoBalanceGeneral($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setIcoActivos($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setIcoActivosCorrientes($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setIcoEfectivo($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setIcoDeudores($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setIcoInventario($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setIcoActivosFijos($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setIcoPropiedadPlantaEquipos($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setIcoOtrosActivos($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setIcoPasivos($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setIcoPasivosCorrientes($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setIcoObligacionesFinancieras($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setIcoOtrasCuentasPorPagar($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setIcoObligacionesLaborales($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setIcoOtrosPasivos($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setIcoPatrimonio($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setIcoEstadoDeResultados($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setIcoTotalIngresos($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setIcoIngresosOperacionales($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setIcoIngresosNoOperacionales($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setIcoTotalEgresos($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setIcoGastosAdministrativos($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setIcoCostoOperacionMantenimiento($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setIcoCostoInversion($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setIcoResultadosEjercicio($arr[$keys[26]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(InformacioncontablePeer::DATABASE_NAME);

		if ($this->isColumnModified(InformacioncontablePeer::ICO_ID)) $criteria->add(InformacioncontablePeer::ICO_ID, $this->ico_id);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_IAF_ID)) $criteria->add(InformacioncontablePeer::ICO_IAF_ID, $this->ico_iaf_id);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_BALANCE_GENERAL)) $criteria->add(InformacioncontablePeer::ICO_BALANCE_GENERAL, $this->ico_balance_general);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_ACTIVOS)) $criteria->add(InformacioncontablePeer::ICO_ACTIVOS, $this->ico_activos);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_ACTIVOS_CORRIENTES)) $criteria->add(InformacioncontablePeer::ICO_ACTIVOS_CORRIENTES, $this->ico_activos_corrientes);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_EFECTIVO)) $criteria->add(InformacioncontablePeer::ICO_EFECTIVO, $this->ico_efectivo);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_DEUDORES)) $criteria->add(InformacioncontablePeer::ICO_DEUDORES, $this->ico_deudores);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_INVENTARIO)) $criteria->add(InformacioncontablePeer::ICO_INVENTARIO, $this->ico_inventario);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_ACTIVOS_FIJOS)) $criteria->add(InformacioncontablePeer::ICO_ACTIVOS_FIJOS, $this->ico_activos_fijos);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_PROPIEDAD_PLANTA_EQUIPOS)) $criteria->add(InformacioncontablePeer::ICO_PROPIEDAD_PLANTA_EQUIPOS, $this->ico_propiedad_planta_equipos);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_OTROS_ACTIVOS)) $criteria->add(InformacioncontablePeer::ICO_OTROS_ACTIVOS, $this->ico_otros_activos);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_PASIVOS)) $criteria->add(InformacioncontablePeer::ICO_PASIVOS, $this->ico_pasivos);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_PASIVOS_CORRIENTES)) $criteria->add(InformacioncontablePeer::ICO_PASIVOS_CORRIENTES, $this->ico_pasivos_corrientes);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_OBLIGACIONES_FINANCIERAS)) $criteria->add(InformacioncontablePeer::ICO_OBLIGACIONES_FINANCIERAS, $this->ico_obligaciones_financieras);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_OTRAS_CUENTAS_POR_PAGAR)) $criteria->add(InformacioncontablePeer::ICO_OTRAS_CUENTAS_POR_PAGAR, $this->ico_otras_cuentas_por_pagar);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_OBLIGACIONES_LABORALES)) $criteria->add(InformacioncontablePeer::ICO_OBLIGACIONES_LABORALES, $this->ico_obligaciones_laborales);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_OTROS_PASIVOS)) $criteria->add(InformacioncontablePeer::ICO_OTROS_PASIVOS, $this->ico_otros_pasivos);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_PATRIMONIO)) $criteria->add(InformacioncontablePeer::ICO_PATRIMONIO, $this->ico_patrimonio);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_ESTADO_DE_RESULTADOS)) $criteria->add(InformacioncontablePeer::ICO_ESTADO_DE_RESULTADOS, $this->ico_estado_de_resultados);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_TOTAL_INGRESOS)) $criteria->add(InformacioncontablePeer::ICO_TOTAL_INGRESOS, $this->ico_total_ingresos);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_INGRESOS_OPERACIONALES)) $criteria->add(InformacioncontablePeer::ICO_INGRESOS_OPERACIONALES, $this->ico_ingresos_operacionales);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_INGRESOS_NO_OPERACIONALES)) $criteria->add(InformacioncontablePeer::ICO_INGRESOS_NO_OPERACIONALES, $this->ico_ingresos_no_operacionales);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_TOTAL_EGRESOS)) $criteria->add(InformacioncontablePeer::ICO_TOTAL_EGRESOS, $this->ico_total_egresos);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_GASTOS_ADMINISTRATIVOS)) $criteria->add(InformacioncontablePeer::ICO_GASTOS_ADMINISTRATIVOS, $this->ico_gastos_administrativos);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_COSTO_OPERACION_MANTENIMIENTO)) $criteria->add(InformacioncontablePeer::ICO_COSTO_OPERACION_MANTENIMIENTO, $this->ico_costo_operacion_mantenimiento);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_COSTO_INVERSION)) $criteria->add(InformacioncontablePeer::ICO_COSTO_INVERSION, $this->ico_costo_inversion);
		if ($this->isColumnModified(InformacioncontablePeer::ICO_RESULTADOS_EJERCICIO)) $criteria->add(InformacioncontablePeer::ICO_RESULTADOS_EJERCICIO, $this->ico_resultados_ejercicio);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(InformacioncontablePeer::DATABASE_NAME);

		$criteria->add(InformacioncontablePeer::ICO_ID, $this->ico_id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getIcoId();
	}

	/**
	 * Generic method to set the primary key (ico_id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setIcoId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Informacioncontable (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setIcoIafId($this->ico_iaf_id);

		$copyObj->setIcoBalanceGeneral($this->ico_balance_general);

		$copyObj->setIcoActivos($this->ico_activos);

		$copyObj->setIcoActivosCorrientes($this->ico_activos_corrientes);

		$copyObj->setIcoEfectivo($this->ico_efectivo);

		$copyObj->setIcoDeudores($this->ico_deudores);

		$copyObj->setIcoInventario($this->ico_inventario);

		$copyObj->setIcoActivosFijos($this->ico_activos_fijos);

		$copyObj->setIcoPropiedadPlantaEquipos($this->ico_propiedad_planta_equipos);

		$copyObj->setIcoOtrosActivos($this->ico_otros_activos);

		$copyObj->setIcoPasivos($this->ico_pasivos);

		$copyObj->setIcoPasivosCorrientes($this->ico_pasivos_corrientes);

		$copyObj->setIcoObligacionesFinancieras($this->ico_obligaciones_financieras);

		$copyObj->setIcoOtrasCuentasPorPagar($this->ico_otras_cuentas_por_pagar);

		$copyObj->setIcoObligacionesLaborales($this->ico_obligaciones_laborales);

		$copyObj->setIcoOtrosPasivos($this->ico_otros_pasivos);

		$copyObj->setIcoPatrimonio($this->ico_patrimonio);

		$copyObj->setIcoEstadoDeResultados($this->ico_estado_de_resultados);

		$copyObj->setIcoTotalIngresos($this->ico_total_ingresos);

		$copyObj->setIcoIngresosOperacionales($this->ico_ingresos_operacionales);

		$copyObj->setIcoIngresosNoOperacionales($this->ico_ingresos_no_operacionales);

		$copyObj->setIcoTotalEgresos($this->ico_total_egresos);

		$copyObj->setIcoGastosAdministrativos($this->ico_gastos_administrativos);

		$copyObj->setIcoCostoOperacionMantenimiento($this->ico_costo_operacion_mantenimiento);

		$copyObj->setIcoCostoInversion($this->ico_costo_inversion);

		$copyObj->setIcoResultadosEjercicio($this->ico_resultados_ejercicio);


		$copyObj->setNew(true);

		$copyObj->setIcoId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Informacioncontable Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     InformacioncontablePeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new InformacioncontablePeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Administrativafinanciera object.
	 *
	 * @param      Administrativafinanciera $v
	 * @return     Informacioncontable The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAdministrativafinanciera(Administrativafinanciera $v = null)
	{
		if ($v === null) {
			$this->setIcoIafId(NULL);
		} else {
			$this->setIcoIafId($v->getIafId());
		}

		$this->aAdministrativafinanciera = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Administrativafinanciera object, it will not be re-added.
		if ($v !== null) {
			$v->addInformacioncontable($this);
		}

		return $this;
	}


	/**
	 * Get the associated Administrativafinanciera object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Administrativafinanciera The associated Administrativafinanciera object.
	 * @throws     PropelException
	 */
	public function getAdministrativafinanciera(PropelPDO $con = null)
	{
		if ($this->aAdministrativafinanciera === null && ($this->ico_iaf_id !== null)) {
			$this->aAdministrativafinanciera = AdministrativafinancieraPeer::retrieveByPk($this->ico_iaf_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aAdministrativafinanciera->addInformacioncontables($this);
			 */
		}
		return $this->aAdministrativafinanciera;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

			$this->aAdministrativafinanciera = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseInformacioncontable:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseInformacioncontable::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseInformacioncontable
