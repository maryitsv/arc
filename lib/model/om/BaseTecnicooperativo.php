<?php

/**
 * Base class that represents a row from the 'tecnicooperativo' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 07/30/10 12:26:17
 *
 * @package    lib.model.om
 */
abstract class BaseTecnicooperativo extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        TecnicooperativoPeer
	 */
	protected static $peer;

	/**
	 * The value for the top_id field.
	 * @var        int
	 */
	protected $top_id;

	/**
	 * The value for the top_pps_pre_id field.
	 * @var        int
	 */
	protected $top_pps_pre_id;

	/**
	 * The value for the top_pps_anio field.
	 * @var        int
	 */
	protected $top_pps_anio;

	/**
	 * The value for the top_pps_ser_id field.
	 * @var        int
	 */
	protected $top_pps_ser_id;

	/**
	 * @var        Periodoporprestadorservicio
	 */
	protected $aPeriodoporprestadorservicio;

	/**
	 * @var        array Actividadesresiduossolidosaseo[] Collection to store aggregation of Actividadesresiduossolidosaseo objects.
	 */
	protected $collActividadesresiduossolidosaseos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collActividadesresiduossolidosaseos.
	 */
	private $lastActividadesresiduossolidosaseoCriteria = null;

	/**
	 * @var        array Disposicionfinalresiduosaseo[] Collection to store aggregation of Disposicionfinalresiduosaseo objects.
	 */
	protected $collDisposicionfinalresiduosaseos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDisposicionfinalresiduosaseos.
	 */
	private $lastDisposicionfinalresiduosaseoCriteria = null;

	/**
	 * @var        array Recolecciontrasnporteaseo[] Collection to store aggregation of Recolecciontrasnporteaseo objects.
	 */
	protected $collRecolecciontrasnporteaseos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRecolecciontrasnporteaseos.
	 */
	private $lastRecolecciontrasnporteaseoCriteria = null;

	/**
	 * @var        array Separacionresiduossolidosfuentesaseo[] Collection to store aggregation of Separacionresiduossolidosfuentesaseo objects.
	 */
	protected $collSeparacionresiduossolidosfuentesaseos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSeparacionresiduossolidosfuentesaseos.
	 */
	private $lastSeparacionresiduossolidosfuentesaseoCriteria = null;

	/**
	 * @var        array Tecnicooperativaacueducto[] Collection to store aggregation of Tecnicooperativaacueducto objects.
	 */
	protected $collTecnicooperativaacueductos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTecnicooperativaacueductos.
	 */
	private $lastTecnicooperativaacueductoCriteria = null;

	/**
	 * @var        array Tecnicooperativaaduccionimpulsionacueducto[] Collection to store aggregation of Tecnicooperativaaduccionimpulsionacueducto objects.
	 */
	protected $collTecnicooperativaaduccionimpulsionacueductos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTecnicooperativaaduccionimpulsionacueductos.
	 */
	private $lastTecnicooperativaaduccionimpulsionacueductoCriteria = null;

	/**
	 * @var        array Tecnicooperativaalmacenamientoacueducto[] Collection to store aggregation of Tecnicooperativaalmacenamientoacueducto objects.
	 */
	protected $collTecnicooperativaalmacenamientoacueductos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTecnicooperativaalmacenamientoacueductos.
	 */
	private $lastTecnicooperativaalmacenamientoacueductoCriteria = null;

	/**
	 * @var        array Tecnicooperativacomponentessistema[] Collection to store aggregation of Tecnicooperativacomponentessistema objects.
	 */
	protected $collTecnicooperativacomponentessistemas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTecnicooperativacomponentessistemas.
	 */
	private $lastTecnicooperativacomponentessistemaCriteria = null;

	/**
	 * @var        array Tecnicooperativadesarenadoracueducto[] Collection to store aggregation of Tecnicooperativadesarenadoracueducto objects.
	 */
	protected $collTecnicooperativadesarenadoracueductos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTecnicooperativadesarenadoracueductos.
	 */
	private $lastTecnicooperativadesarenadoracueductoCriteria = null;

	/**
	 * @var        array Tecnicooperativadesinfeccionacueducto[] Collection to store aggregation of Tecnicooperativadesinfeccionacueducto objects.
	 */
	protected $collTecnicooperativadesinfeccionacueductos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTecnicooperativadesinfeccionacueductos.
	 */
	private $lastTecnicooperativadesinfeccionacueductoCriteria = null;

	/**
	 * @var        array Tecnicooperativalineaconduccionaguacrudaacueducto[] Collection to store aggregation of Tecnicooperativalineaconduccionaguacrudaacueducto objects.
	 */
	protected $collTecnicooperativalineaconduccionaguacrudaacueductos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTecnicooperativalineaconduccionaguacrudaacueductos.
	 */
	private $lastTecnicooperativalineaconduccionaguacrudaacueductoCriteria = null;

	/**
	 * @var        array Tecnicooperativaplantaaguapotableacueducto[] Collection to store aggregation of Tecnicooperativaplantaaguapotableacueducto objects.
	 */
	protected $collTecnicooperativaplantaaguapotableacueductos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTecnicooperativaplantaaguapotableacueductos.
	 */
	private $lastTecnicooperativaplantaaguapotableacueductoCriteria = null;

	/**
	 * @var        array Tecnicooperativareddistribucionacueducto[] Collection to store aggregation of Tecnicooperativareddistribucionacueducto objects.
	 */
	protected $collTecnicooperativareddistribucionacueductos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTecnicooperativareddistribucionacueductos.
	 */
	private $lastTecnicooperativareddistribucionacueductoCriteria = null;

	/**
	 * @var        array Tecnicooperativasolucioncolectivaalcantarillado[] Collection to store aggregation of Tecnicooperativasolucioncolectivaalcantarillado objects.
	 */
	protected $collTecnicooperativasolucioncolectivaalcantarillados;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTecnicooperativasolucioncolectivaalcantarillados.
	 */
	private $lastTecnicooperativasolucioncolectivaalcantarilladoCriteria = null;

	/**
	 * @var        array Tecnicooperativasolucionindividualalcantarillado[] Collection to store aggregation of Tecnicooperativasolucionindividualalcantarillado objects.
	 */
	protected $collTecnicooperativasolucionindividualalcantarillados;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTecnicooperativasolucionindividualalcantarillados.
	 */
	private $lastTecnicooperativasolucionindividualalcantarilladoCriteria = null;

	/**
	 * @var        array Tratamientoaprovechamientoresiduossolidosaseo[] Collection to store aggregation of Tratamientoaprovechamientoresiduossolidosaseo objects.
	 */
	protected $collTratamientoaprovechamientoresiduossolidosaseos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTratamientoaprovechamientoresiduossolidosaseos.
	 */
	private $lastTratamientoaprovechamientoresiduossolidosaseoCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'TecnicooperativoPeer';

	/**
	 * Get the [top_id] column value.
	 * 
	 * @return     int
	 */
	public function getTopId()
	{
		return $this->top_id;
	}

	/**
	 * Get the [top_pps_pre_id] column value.
	 * 
	 * @return     int
	 */
	public function getTopPpsPreId()
	{
		return $this->top_pps_pre_id;
	}

	/**
	 * Get the [top_pps_anio] column value.
	 * 
	 * @return     int
	 */
	public function getTopPpsAnio()
	{
		return $this->top_pps_anio;
	}

	/**
	 * Get the [top_pps_ser_id] column value.
	 * 
	 * @return     int
	 */
	public function getTopPpsSerId()
	{
		return $this->top_pps_ser_id;
	}

	/**
	 * Set the value of [top_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativo The current object (for fluent API support)
	 */
	public function setTopId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->top_id !== $v) {
			$this->top_id = $v;
			$this->modifiedColumns[] = TecnicooperativoPeer::TOP_ID;
		}

		return $this;
	} // setTopId()

	/**
	 * Set the value of [top_pps_pre_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativo The current object (for fluent API support)
	 */
	public function setTopPpsPreId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->top_pps_pre_id !== $v) {
			$this->top_pps_pre_id = $v;
			$this->modifiedColumns[] = TecnicooperativoPeer::TOP_PPS_PRE_ID;
		}

		if ($this->aPeriodoporprestadorservicio !== null && $this->aPeriodoporprestadorservicio->getPpsPreId() !== $v) {
			$this->aPeriodoporprestadorservicio = null;
		}

		return $this;
	} // setTopPpsPreId()

	/**
	 * Set the value of [top_pps_anio] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativo The current object (for fluent API support)
	 */
	public function setTopPpsAnio($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->top_pps_anio !== $v) {
			$this->top_pps_anio = $v;
			$this->modifiedColumns[] = TecnicooperativoPeer::TOP_PPS_ANIO;
		}

		return $this;
	} // setTopPpsAnio()

	/**
	 * Set the value of [top_pps_ser_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativo The current object (for fluent API support)
	 */
	public function setTopPpsSerId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->top_pps_ser_id !== $v) {
			$this->top_pps_ser_id = $v;
			$this->modifiedColumns[] = TecnicooperativoPeer::TOP_PPS_SER_ID;
		}

		return $this;
	} // setTopPpsSerId()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->top_id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->top_pps_pre_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->top_pps_anio = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->top_pps_ser_id = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 4; // 4 = TecnicooperativoPeer::NUM_COLUMNS - TecnicooperativoPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Tecnicooperativo object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aPeriodoporprestadorservicio !== null && $this->top_pps_pre_id !== $this->aPeriodoporprestadorservicio->getPpsPreId()) {
			$this->aPeriodoporprestadorservicio = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TecnicooperativoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = TecnicooperativoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aPeriodoporprestadorservicio = null;
			$this->collActividadesresiduossolidosaseos = null;
			$this->lastActividadesresiduossolidosaseoCriteria = null;

			$this->collDisposicionfinalresiduosaseos = null;
			$this->lastDisposicionfinalresiduosaseoCriteria = null;

			$this->collRecolecciontrasnporteaseos = null;
			$this->lastRecolecciontrasnporteaseoCriteria = null;

			$this->collSeparacionresiduossolidosfuentesaseos = null;
			$this->lastSeparacionresiduossolidosfuentesaseoCriteria = null;

			$this->collTecnicooperativaacueductos = null;
			$this->lastTecnicooperativaacueductoCriteria = null;

			$this->collTecnicooperativaaduccionimpulsionacueductos = null;
			$this->lastTecnicooperativaaduccionimpulsionacueductoCriteria = null;

			$this->collTecnicooperativaalmacenamientoacueductos = null;
			$this->lastTecnicooperativaalmacenamientoacueductoCriteria = null;

			$this->collTecnicooperativacomponentessistemas = null;
			$this->lastTecnicooperativacomponentessistemaCriteria = null;

			$this->collTecnicooperativadesarenadoracueductos = null;
			$this->lastTecnicooperativadesarenadoracueductoCriteria = null;

			$this->collTecnicooperativadesinfeccionacueductos = null;
			$this->lastTecnicooperativadesinfeccionacueductoCriteria = null;

			$this->collTecnicooperativalineaconduccionaguacrudaacueductos = null;
			$this->lastTecnicooperativalineaconduccionaguacrudaacueductoCriteria = null;

			$this->collTecnicooperativaplantaaguapotableacueductos = null;
			$this->lastTecnicooperativaplantaaguapotableacueductoCriteria = null;

			$this->collTecnicooperativareddistribucionacueductos = null;
			$this->lastTecnicooperativareddistribucionacueductoCriteria = null;

			$this->collTecnicooperativasolucioncolectivaalcantarillados = null;
			$this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria = null;

			$this->collTecnicooperativasolucionindividualalcantarillados = null;
			$this->lastTecnicooperativasolucionindividualalcantarilladoCriteria = null;

			$this->collTratamientoaprovechamientoresiduossolidosaseos = null;
			$this->lastTratamientoaprovechamientoresiduossolidosaseoCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TecnicooperativoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTecnicooperativo:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				TecnicooperativoPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTecnicooperativo:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TecnicooperativoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTecnicooperativo:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTecnicooperativo:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				TecnicooperativoPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aPeriodoporprestadorservicio !== null) {
				if ($this->aPeriodoporprestadorservicio->isModified() || $this->aPeriodoporprestadorservicio->isNew()) {
					$affectedRows += $this->aPeriodoporprestadorservicio->save($con);
				}
				$this->setPeriodoporprestadorservicio($this->aPeriodoporprestadorservicio);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = TecnicooperativoPeer::TOP_ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = TecnicooperativoPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setTopId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += TecnicooperativoPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collActividadesresiduossolidosaseos !== null) {
				foreach ($this->collActividadesresiduossolidosaseos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDisposicionfinalresiduosaseos !== null) {
				foreach ($this->collDisposicionfinalresiduosaseos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRecolecciontrasnporteaseos !== null) {
				foreach ($this->collRecolecciontrasnporteaseos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSeparacionresiduossolidosfuentesaseos !== null) {
				foreach ($this->collSeparacionresiduossolidosfuentesaseos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTecnicooperativaacueductos !== null) {
				foreach ($this->collTecnicooperativaacueductos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTecnicooperativaaduccionimpulsionacueductos !== null) {
				foreach ($this->collTecnicooperativaaduccionimpulsionacueductos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTecnicooperativaalmacenamientoacueductos !== null) {
				foreach ($this->collTecnicooperativaalmacenamientoacueductos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTecnicooperativacomponentessistemas !== null) {
				foreach ($this->collTecnicooperativacomponentessistemas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTecnicooperativadesarenadoracueductos !== null) {
				foreach ($this->collTecnicooperativadesarenadoracueductos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTecnicooperativadesinfeccionacueductos !== null) {
				foreach ($this->collTecnicooperativadesinfeccionacueductos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTecnicooperativalineaconduccionaguacrudaacueductos !== null) {
				foreach ($this->collTecnicooperativalineaconduccionaguacrudaacueductos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTecnicooperativaplantaaguapotableacueductos !== null) {
				foreach ($this->collTecnicooperativaplantaaguapotableacueductos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTecnicooperativareddistribucionacueductos !== null) {
				foreach ($this->collTecnicooperativareddistribucionacueductos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTecnicooperativasolucioncolectivaalcantarillados !== null) {
				foreach ($this->collTecnicooperativasolucioncolectivaalcantarillados as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTecnicooperativasolucionindividualalcantarillados !== null) {
				foreach ($this->collTecnicooperativasolucionindividualalcantarillados as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTratamientoaprovechamientoresiduossolidosaseos !== null) {
				foreach ($this->collTratamientoaprovechamientoresiduossolidosaseos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aPeriodoporprestadorservicio !== null) {
				if (!$this->aPeriodoporprestadorservicio->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPeriodoporprestadorservicio->getValidationFailures());
				}
			}


			if (($retval = TecnicooperativoPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collActividadesresiduossolidosaseos !== null) {
					foreach ($this->collActividadesresiduossolidosaseos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDisposicionfinalresiduosaseos !== null) {
					foreach ($this->collDisposicionfinalresiduosaseos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRecolecciontrasnporteaseos !== null) {
					foreach ($this->collRecolecciontrasnporteaseos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSeparacionresiduossolidosfuentesaseos !== null) {
					foreach ($this->collSeparacionresiduossolidosfuentesaseos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTecnicooperativaacueductos !== null) {
					foreach ($this->collTecnicooperativaacueductos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTecnicooperativaaduccionimpulsionacueductos !== null) {
					foreach ($this->collTecnicooperativaaduccionimpulsionacueductos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTecnicooperativaalmacenamientoacueductos !== null) {
					foreach ($this->collTecnicooperativaalmacenamientoacueductos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTecnicooperativacomponentessistemas !== null) {
					foreach ($this->collTecnicooperativacomponentessistemas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTecnicooperativadesarenadoracueductos !== null) {
					foreach ($this->collTecnicooperativadesarenadoracueductos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTecnicooperativadesinfeccionacueductos !== null) {
					foreach ($this->collTecnicooperativadesinfeccionacueductos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTecnicooperativalineaconduccionaguacrudaacueductos !== null) {
					foreach ($this->collTecnicooperativalineaconduccionaguacrudaacueductos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTecnicooperativaplantaaguapotableacueductos !== null) {
					foreach ($this->collTecnicooperativaplantaaguapotableacueductos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTecnicooperativareddistribucionacueductos !== null) {
					foreach ($this->collTecnicooperativareddistribucionacueductos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTecnicooperativasolucioncolectivaalcantarillados !== null) {
					foreach ($this->collTecnicooperativasolucioncolectivaalcantarillados as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTecnicooperativasolucionindividualalcantarillados !== null) {
					foreach ($this->collTecnicooperativasolucionindividualalcantarillados as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTratamientoaprovechamientoresiduossolidosaseos !== null) {
					foreach ($this->collTratamientoaprovechamientoresiduossolidosaseos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TecnicooperativoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getTopId();
				break;
			case 1:
				return $this->getTopPpsPreId();
				break;
			case 2:
				return $this->getTopPpsAnio();
				break;
			case 3:
				return $this->getTopPpsSerId();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = TecnicooperativoPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getTopId(),
			$keys[1] => $this->getTopPpsPreId(),
			$keys[2] => $this->getTopPpsAnio(),
			$keys[3] => $this->getTopPpsSerId(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TecnicooperativoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setTopId($value);
				break;
			case 1:
				$this->setTopPpsPreId($value);
				break;
			case 2:
				$this->setTopPpsAnio($value);
				break;
			case 3:
				$this->setTopPpsSerId($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = TecnicooperativoPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setTopId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setTopPpsPreId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setTopPpsAnio($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setTopPpsSerId($arr[$keys[3]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);

		if ($this->isColumnModified(TecnicooperativoPeer::TOP_ID)) $criteria->add(TecnicooperativoPeer::TOP_ID, $this->top_id);
		if ($this->isColumnModified(TecnicooperativoPeer::TOP_PPS_PRE_ID)) $criteria->add(TecnicooperativoPeer::TOP_PPS_PRE_ID, $this->top_pps_pre_id);
		if ($this->isColumnModified(TecnicooperativoPeer::TOP_PPS_ANIO)) $criteria->add(TecnicooperativoPeer::TOP_PPS_ANIO, $this->top_pps_anio);
		if ($this->isColumnModified(TecnicooperativoPeer::TOP_PPS_SER_ID)) $criteria->add(TecnicooperativoPeer::TOP_PPS_SER_ID, $this->top_pps_ser_id);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);

		$criteria->add(TecnicooperativoPeer::TOP_ID, $this->top_id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getTopId();
	}

	/**
	 * Generic method to set the primary key (top_id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setTopId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Tecnicooperativo (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setTopPpsPreId($this->top_pps_pre_id);

		$copyObj->setTopPpsAnio($this->top_pps_anio);

		$copyObj->setTopPpsSerId($this->top_pps_ser_id);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getActividadesresiduossolidosaseos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addActividadesresiduossolidosaseo($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDisposicionfinalresiduosaseos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDisposicionfinalresiduosaseo($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRecolecciontrasnporteaseos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRecolecciontrasnporteaseo($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSeparacionresiduossolidosfuentesaseos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSeparacionresiduossolidosfuentesaseo($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTecnicooperativaacueductos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTecnicooperativaacueducto($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTecnicooperativaaduccionimpulsionacueductos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTecnicooperativaaduccionimpulsionacueducto($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTecnicooperativaalmacenamientoacueductos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTecnicooperativaalmacenamientoacueducto($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTecnicooperativacomponentessistemas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTecnicooperativacomponentessistema($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTecnicooperativadesarenadoracueductos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTecnicooperativadesarenadoracueducto($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTecnicooperativadesinfeccionacueductos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTecnicooperativadesinfeccionacueducto($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTecnicooperativalineaconduccionaguacrudaacueductos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTecnicooperativalineaconduccionaguacrudaacueducto($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTecnicooperativaplantaaguapotableacueductos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTecnicooperativaplantaaguapotableacueducto($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTecnicooperativareddistribucionacueductos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTecnicooperativareddistribucionacueducto($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTecnicooperativasolucioncolectivaalcantarillados() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTecnicooperativasolucioncolectivaalcantarillado($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTecnicooperativasolucionindividualalcantarillados() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTecnicooperativasolucionindividualalcantarillado($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTratamientoaprovechamientoresiduossolidosaseos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTratamientoaprovechamientoresiduossolidosaseo($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setTopId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Tecnicooperativo Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     TecnicooperativoPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new TecnicooperativoPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Periodoporprestadorservicio object.
	 *
	 * @param      Periodoporprestadorservicio $v
	 * @return     Tecnicooperativo The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPeriodoporprestadorservicio(Periodoporprestadorservicio $v = null)
	{
		if ($v === null) {
			$this->setTopPpsPreId(NULL);
		} else {
			$this->setTopPpsPreId($v->getPpsPreId());
		}

		$this->aPeriodoporprestadorservicio = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Periodoporprestadorservicio object, it will not be re-added.
		if ($v !== null) {
			$v->addTecnicooperativo($this);
		}

		return $this;
	}


	/**
	 * Get the associated Periodoporprestadorservicio object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Periodoporprestadorservicio The associated Periodoporprestadorservicio object.
	 * @throws     PropelException
	 */
	public function getPeriodoporprestadorservicio(PropelPDO $con = null)
	{
		if ($this->aPeriodoporprestadorservicio === null && ($this->top_pps_pre_id !== null)) {
			$this->aPeriodoporprestadorservicio = PeriodoporprestadorservicioPeer::retrieveByPk($this->top_pps_pre_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aPeriodoporprestadorservicio->addTecnicooperativos($this);
			 */
		}
		return $this->aPeriodoporprestadorservicio;
	}

	/**
	 * Clears out the collActividadesresiduossolidosaseos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addActividadesresiduossolidosaseos()
	 */
	public function clearActividadesresiduossolidosaseos()
	{
		$this->collActividadesresiduossolidosaseos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collActividadesresiduossolidosaseos collection (array).
	 *
	 * By default this just sets the collActividadesresiduossolidosaseos collection to an empty array (like clearcollActividadesresiduossolidosaseos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initActividadesresiduossolidosaseos()
	{
		$this->collActividadesresiduossolidosaseos = array();
	}

	/**
	 * Gets an array of Actividadesresiduossolidosaseo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo has previously been saved, it will retrieve
	 * related Actividadesresiduossolidosaseos from storage. If this Tecnicooperativo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Actividadesresiduossolidosaseo[]
	 * @throws     PropelException
	 */
	public function getActividadesresiduossolidosaseos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collActividadesresiduossolidosaseos === null) {
			if ($this->isNew()) {
			   $this->collActividadesresiduossolidosaseos = array();
			} else {

				$criteria->add(ActividadesresiduossolidosaseoPeer::ARS_TOP_ID, $this->top_id);

				ActividadesresiduossolidosaseoPeer::addSelectColumns($criteria);
				$this->collActividadesresiduossolidosaseos = ActividadesresiduossolidosaseoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ActividadesresiduossolidosaseoPeer::ARS_TOP_ID, $this->top_id);

				ActividadesresiduossolidosaseoPeer::addSelectColumns($criteria);
				if (!isset($this->lastActividadesresiduossolidosaseoCriteria) || !$this->lastActividadesresiduossolidosaseoCriteria->equals($criteria)) {
					$this->collActividadesresiduossolidosaseos = ActividadesresiduossolidosaseoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastActividadesresiduossolidosaseoCriteria = $criteria;
		return $this->collActividadesresiduossolidosaseos;
	}

	/**
	 * Returns the number of related Actividadesresiduossolidosaseo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Actividadesresiduossolidosaseo objects.
	 * @throws     PropelException
	 */
	public function countActividadesresiduossolidosaseos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collActividadesresiduossolidosaseos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ActividadesresiduossolidosaseoPeer::ARS_TOP_ID, $this->top_id);

				$count = ActividadesresiduossolidosaseoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ActividadesresiduossolidosaseoPeer::ARS_TOP_ID, $this->top_id);

				if (!isset($this->lastActividadesresiduossolidosaseoCriteria) || !$this->lastActividadesresiduossolidosaseoCriteria->equals($criteria)) {
					$count = ActividadesresiduossolidosaseoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collActividadesresiduossolidosaseos);
				}
			} else {
				$count = count($this->collActividadesresiduossolidosaseos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Actividadesresiduossolidosaseo object to this object
	 * through the Actividadesresiduossolidosaseo foreign key attribute.
	 *
	 * @param      Actividadesresiduossolidosaseo $l Actividadesresiduossolidosaseo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addActividadesresiduossolidosaseo(Actividadesresiduossolidosaseo $l)
	{
		if ($this->collActividadesresiduossolidosaseos === null) {
			$this->initActividadesresiduossolidosaseos();
		}
		if (!in_array($l, $this->collActividadesresiduossolidosaseos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collActividadesresiduossolidosaseos, $l);
			$l->setTecnicooperativo($this);
		}
	}

	/**
	 * Clears out the collDisposicionfinalresiduosaseos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDisposicionfinalresiduosaseos()
	 */
	public function clearDisposicionfinalresiduosaseos()
	{
		$this->collDisposicionfinalresiduosaseos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDisposicionfinalresiduosaseos collection (array).
	 *
	 * By default this just sets the collDisposicionfinalresiduosaseos collection to an empty array (like clearcollDisposicionfinalresiduosaseos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDisposicionfinalresiduosaseos()
	{
		$this->collDisposicionfinalresiduosaseos = array();
	}

	/**
	 * Gets an array of Disposicionfinalresiduosaseo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo has previously been saved, it will retrieve
	 * related Disposicionfinalresiduosaseos from storage. If this Tecnicooperativo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Disposicionfinalresiduosaseo[]
	 * @throws     PropelException
	 */
	public function getDisposicionfinalresiduosaseos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDisposicionfinalresiduosaseos === null) {
			if ($this->isNew()) {
			   $this->collDisposicionfinalresiduosaseos = array();
			} else {

				$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID, $this->top_id);

				DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
				$this->collDisposicionfinalresiduosaseos = DisposicionfinalresiduosaseoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID, $this->top_id);

				DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
				if (!isset($this->lastDisposicionfinalresiduosaseoCriteria) || !$this->lastDisposicionfinalresiduosaseoCriteria->equals($criteria)) {
					$this->collDisposicionfinalresiduosaseos = DisposicionfinalresiduosaseoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDisposicionfinalresiduosaseoCriteria = $criteria;
		return $this->collDisposicionfinalresiduosaseos;
	}

	/**
	 * Returns the number of related Disposicionfinalresiduosaseo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Disposicionfinalresiduosaseo objects.
	 * @throws     PropelException
	 */
	public function countDisposicionfinalresiduosaseos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDisposicionfinalresiduosaseos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID, $this->top_id);

				$count = DisposicionfinalresiduosaseoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID, $this->top_id);

				if (!isset($this->lastDisposicionfinalresiduosaseoCriteria) || !$this->lastDisposicionfinalresiduosaseoCriteria->equals($criteria)) {
					$count = DisposicionfinalresiduosaseoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDisposicionfinalresiduosaseos);
				}
			} else {
				$count = count($this->collDisposicionfinalresiduosaseos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Disposicionfinalresiduosaseo object to this object
	 * through the Disposicionfinalresiduosaseo foreign key attribute.
	 *
	 * @param      Disposicionfinalresiduosaseo $l Disposicionfinalresiduosaseo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDisposicionfinalresiduosaseo(Disposicionfinalresiduosaseo $l)
	{
		if ($this->collDisposicionfinalresiduosaseos === null) {
			$this->initDisposicionfinalresiduosaseos();
		}
		if (!in_array($l, $this->collDisposicionfinalresiduosaseos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDisposicionfinalresiduosaseos, $l);
			$l->setTecnicooperativo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Disposicionfinalresiduosaseos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getDisposicionfinalresiduosaseosJoinAutoridadambiental($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDisposicionfinalresiduosaseos === null) {
			if ($this->isNew()) {
				$this->collDisposicionfinalresiduosaseos = array();
			} else {

				$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID, $this->top_id);

				$this->collDisposicionfinalresiduosaseos = DisposicionfinalresiduosaseoPeer::doSelectJoinAutoridadambiental($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID, $this->top_id);

			if (!isset($this->lastDisposicionfinalresiduosaseoCriteria) || !$this->lastDisposicionfinalresiduosaseoCriteria->equals($criteria)) {
				$this->collDisposicionfinalresiduosaseos = DisposicionfinalresiduosaseoPeer::doSelectJoinAutoridadambiental($criteria, $con, $join_behavior);
			}
		}
		$this->lastDisposicionfinalresiduosaseoCriteria = $criteria;

		return $this->collDisposicionfinalresiduosaseos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Disposicionfinalresiduosaseos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getDisposicionfinalresiduosaseosJoinEstadogeneral($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDisposicionfinalresiduosaseos === null) {
			if ($this->isNew()) {
				$this->collDisposicionfinalresiduosaseos = array();
			} else {

				$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID, $this->top_id);

				$this->collDisposicionfinalresiduosaseos = DisposicionfinalresiduosaseoPeer::doSelectJoinEstadogeneral($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID, $this->top_id);

			if (!isset($this->lastDisposicionfinalresiduosaseoCriteria) || !$this->lastDisposicionfinalresiduosaseoCriteria->equals($criteria)) {
				$this->collDisposicionfinalresiduosaseos = DisposicionfinalresiduosaseoPeer::doSelectJoinEstadogeneral($criteria, $con, $join_behavior);
			}
		}
		$this->lastDisposicionfinalresiduosaseoCriteria = $criteria;

		return $this->collDisposicionfinalresiduosaseos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Disposicionfinalresiduosaseos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getDisposicionfinalresiduosaseosJoinDepartamento($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDisposicionfinalresiduosaseos === null) {
			if ($this->isNew()) {
				$this->collDisposicionfinalresiduosaseos = array();
			} else {

				$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID, $this->top_id);

				$this->collDisposicionfinalresiduosaseos = DisposicionfinalresiduosaseoPeer::doSelectJoinDepartamento($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID, $this->top_id);

			if (!isset($this->lastDisposicionfinalresiduosaseoCriteria) || !$this->lastDisposicionfinalresiduosaseoCriteria->equals($criteria)) {
				$this->collDisposicionfinalresiduosaseos = DisposicionfinalresiduosaseoPeer::doSelectJoinDepartamento($criteria, $con, $join_behavior);
			}
		}
		$this->lastDisposicionfinalresiduosaseoCriteria = $criteria;

		return $this->collDisposicionfinalresiduosaseos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Disposicionfinalresiduosaseos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getDisposicionfinalresiduosaseosJoinMunicipio($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDisposicionfinalresiduosaseos === null) {
			if ($this->isNew()) {
				$this->collDisposicionfinalresiduosaseos = array();
			} else {

				$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID, $this->top_id);

				$this->collDisposicionfinalresiduosaseos = DisposicionfinalresiduosaseoPeer::doSelectJoinMunicipio($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID, $this->top_id);

			if (!isset($this->lastDisposicionfinalresiduosaseoCriteria) || !$this->lastDisposicionfinalresiduosaseoCriteria->equals($criteria)) {
				$this->collDisposicionfinalresiduosaseos = DisposicionfinalresiduosaseoPeer::doSelectJoinMunicipio($criteria, $con, $join_behavior);
			}
		}
		$this->lastDisposicionfinalresiduosaseoCriteria = $criteria;

		return $this->collDisposicionfinalresiduosaseos;
	}

	/**
	 * Clears out the collRecolecciontrasnporteaseos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRecolecciontrasnporteaseos()
	 */
	public function clearRecolecciontrasnporteaseos()
	{
		$this->collRecolecciontrasnporteaseos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRecolecciontrasnporteaseos collection (array).
	 *
	 * By default this just sets the collRecolecciontrasnporteaseos collection to an empty array (like clearcollRecolecciontrasnporteaseos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRecolecciontrasnporteaseos()
	{
		$this->collRecolecciontrasnporteaseos = array();
	}

	/**
	 * Gets an array of Recolecciontrasnporteaseo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo has previously been saved, it will retrieve
	 * related Recolecciontrasnporteaseos from storage. If this Tecnicooperativo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Recolecciontrasnporteaseo[]
	 * @throws     PropelException
	 */
	public function getRecolecciontrasnporteaseos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRecolecciontrasnporteaseos === null) {
			if ($this->isNew()) {
			   $this->collRecolecciontrasnporteaseos = array();
			} else {

				$criteria->add(RecolecciontrasnporteaseoPeer::RTR_TOP_ID, $this->top_id);

				RecolecciontrasnporteaseoPeer::addSelectColumns($criteria);
				$this->collRecolecciontrasnporteaseos = RecolecciontrasnporteaseoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RecolecciontrasnporteaseoPeer::RTR_TOP_ID, $this->top_id);

				RecolecciontrasnporteaseoPeer::addSelectColumns($criteria);
				if (!isset($this->lastRecolecciontrasnporteaseoCriteria) || !$this->lastRecolecciontrasnporteaseoCriteria->equals($criteria)) {
					$this->collRecolecciontrasnporteaseos = RecolecciontrasnporteaseoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRecolecciontrasnporteaseoCriteria = $criteria;
		return $this->collRecolecciontrasnporteaseos;
	}

	/**
	 * Returns the number of related Recolecciontrasnporteaseo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Recolecciontrasnporteaseo objects.
	 * @throws     PropelException
	 */
	public function countRecolecciontrasnporteaseos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRecolecciontrasnporteaseos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RecolecciontrasnporteaseoPeer::RTR_TOP_ID, $this->top_id);

				$count = RecolecciontrasnporteaseoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RecolecciontrasnporteaseoPeer::RTR_TOP_ID, $this->top_id);

				if (!isset($this->lastRecolecciontrasnporteaseoCriteria) || !$this->lastRecolecciontrasnporteaseoCriteria->equals($criteria)) {
					$count = RecolecciontrasnporteaseoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collRecolecciontrasnporteaseos);
				}
			} else {
				$count = count($this->collRecolecciontrasnporteaseos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Recolecciontrasnporteaseo object to this object
	 * through the Recolecciontrasnporteaseo foreign key attribute.
	 *
	 * @param      Recolecciontrasnporteaseo $l Recolecciontrasnporteaseo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRecolecciontrasnporteaseo(Recolecciontrasnporteaseo $l)
	{
		if ($this->collRecolecciontrasnporteaseos === null) {
			$this->initRecolecciontrasnporteaseos();
		}
		if (!in_array($l, $this->collRecolecciontrasnporteaseos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRecolecciontrasnporteaseos, $l);
			$l->setTecnicooperativo($this);
		}
	}

	/**
	 * Clears out the collSeparacionresiduossolidosfuentesaseos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSeparacionresiduossolidosfuentesaseos()
	 */
	public function clearSeparacionresiduossolidosfuentesaseos()
	{
		$this->collSeparacionresiduossolidosfuentesaseos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSeparacionresiduossolidosfuentesaseos collection (array).
	 *
	 * By default this just sets the collSeparacionresiduossolidosfuentesaseos collection to an empty array (like clearcollSeparacionresiduossolidosfuentesaseos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSeparacionresiduossolidosfuentesaseos()
	{
		$this->collSeparacionresiduossolidosfuentesaseos = array();
	}

	/**
	 * Gets an array of Separacionresiduossolidosfuentesaseo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo has previously been saved, it will retrieve
	 * related Separacionresiduossolidosfuentesaseos from storage. If this Tecnicooperativo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Separacionresiduossolidosfuentesaseo[]
	 * @throws     PropelException
	 */
	public function getSeparacionresiduossolidosfuentesaseos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSeparacionresiduossolidosfuentesaseos === null) {
			if ($this->isNew()) {
			   $this->collSeparacionresiduossolidosfuentesaseos = array();
			} else {

				$criteria->add(SeparacionresiduossolidosfuentesaseoPeer::SRSF_TOP_ID, $this->top_id);

				SeparacionresiduossolidosfuentesaseoPeer::addSelectColumns($criteria);
				$this->collSeparacionresiduossolidosfuentesaseos = SeparacionresiduossolidosfuentesaseoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SeparacionresiduossolidosfuentesaseoPeer::SRSF_TOP_ID, $this->top_id);

				SeparacionresiduossolidosfuentesaseoPeer::addSelectColumns($criteria);
				if (!isset($this->lastSeparacionresiduossolidosfuentesaseoCriteria) || !$this->lastSeparacionresiduossolidosfuentesaseoCriteria->equals($criteria)) {
					$this->collSeparacionresiduossolidosfuentesaseos = SeparacionresiduossolidosfuentesaseoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSeparacionresiduossolidosfuentesaseoCriteria = $criteria;
		return $this->collSeparacionresiduossolidosfuentesaseos;
	}

	/**
	 * Returns the number of related Separacionresiduossolidosfuentesaseo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Separacionresiduossolidosfuentesaseo objects.
	 * @throws     PropelException
	 */
	public function countSeparacionresiduossolidosfuentesaseos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSeparacionresiduossolidosfuentesaseos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SeparacionresiduossolidosfuentesaseoPeer::SRSF_TOP_ID, $this->top_id);

				$count = SeparacionresiduossolidosfuentesaseoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SeparacionresiduossolidosfuentesaseoPeer::SRSF_TOP_ID, $this->top_id);

				if (!isset($this->lastSeparacionresiduossolidosfuentesaseoCriteria) || !$this->lastSeparacionresiduossolidosfuentesaseoCriteria->equals($criteria)) {
					$count = SeparacionresiduossolidosfuentesaseoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collSeparacionresiduossolidosfuentesaseos);
				}
			} else {
				$count = count($this->collSeparacionresiduossolidosfuentesaseos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Separacionresiduossolidosfuentesaseo object to this object
	 * through the Separacionresiduossolidosfuentesaseo foreign key attribute.
	 *
	 * @param      Separacionresiduossolidosfuentesaseo $l Separacionresiduossolidosfuentesaseo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSeparacionresiduossolidosfuentesaseo(Separacionresiduossolidosfuentesaseo $l)
	{
		if ($this->collSeparacionresiduossolidosfuentesaseos === null) {
			$this->initSeparacionresiduossolidosfuentesaseos();
		}
		if (!in_array($l, $this->collSeparacionresiduossolidosfuentesaseos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSeparacionresiduossolidosfuentesaseos, $l);
			$l->setTecnicooperativo($this);
		}
	}

	/**
	 * Clears out the collTecnicooperativaacueductos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTecnicooperativaacueductos()
	 */
	public function clearTecnicooperativaacueductos()
	{
		$this->collTecnicooperativaacueductos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTecnicooperativaacueductos collection (array).
	 *
	 * By default this just sets the collTecnicooperativaacueductos collection to an empty array (like clearcollTecnicooperativaacueductos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTecnicooperativaacueductos()
	{
		$this->collTecnicooperativaacueductos = array();
	}

	/**
	 * Gets an array of Tecnicooperativaacueducto objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo has previously been saved, it will retrieve
	 * related Tecnicooperativaacueductos from storage. If this Tecnicooperativo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tecnicooperativaacueducto[]
	 * @throws     PropelException
	 */
	public function getTecnicooperativaacueductos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativaacueductos === null) {
			if ($this->isNew()) {
			   $this->collTecnicooperativaacueductos = array();
			} else {

				$criteria->add(TecnicooperativaacueductoPeer::TOA_TOP_ID, $this->top_id);

				TecnicooperativaacueductoPeer::addSelectColumns($criteria);
				$this->collTecnicooperativaacueductos = TecnicooperativaacueductoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TecnicooperativaacueductoPeer::TOA_TOP_ID, $this->top_id);

				TecnicooperativaacueductoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTecnicooperativaacueductoCriteria) || !$this->lastTecnicooperativaacueductoCriteria->equals($criteria)) {
					$this->collTecnicooperativaacueductos = TecnicooperativaacueductoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTecnicooperativaacueductoCriteria = $criteria;
		return $this->collTecnicooperativaacueductos;
	}

	/**
	 * Returns the number of related Tecnicooperativaacueducto objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tecnicooperativaacueducto objects.
	 * @throws     PropelException
	 */
	public function countTecnicooperativaacueductos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTecnicooperativaacueductos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TecnicooperativaacueductoPeer::TOA_TOP_ID, $this->top_id);

				$count = TecnicooperativaacueductoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TecnicooperativaacueductoPeer::TOA_TOP_ID, $this->top_id);

				if (!isset($this->lastTecnicooperativaacueductoCriteria) || !$this->lastTecnicooperativaacueductoCriteria->equals($criteria)) {
					$count = TecnicooperativaacueductoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTecnicooperativaacueductos);
				}
			} else {
				$count = count($this->collTecnicooperativaacueductos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tecnicooperativaacueducto object to this object
	 * through the Tecnicooperativaacueducto foreign key attribute.
	 *
	 * @param      Tecnicooperativaacueducto $l Tecnicooperativaacueducto
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTecnicooperativaacueducto(Tecnicooperativaacueducto $l)
	{
		if ($this->collTecnicooperativaacueductos === null) {
			$this->initTecnicooperativaacueductos();
		}
		if (!in_array($l, $this->collTecnicooperativaacueductos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTecnicooperativaacueductos, $l);
			$l->setTecnicooperativo($this);
		}
	}

	/**
	 * Clears out the collTecnicooperativaaduccionimpulsionacueductos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTecnicooperativaaduccionimpulsionacueductos()
	 */
	public function clearTecnicooperativaaduccionimpulsionacueductos()
	{
		$this->collTecnicooperativaaduccionimpulsionacueductos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTecnicooperativaaduccionimpulsionacueductos collection (array).
	 *
	 * By default this just sets the collTecnicooperativaaduccionimpulsionacueductos collection to an empty array (like clearcollTecnicooperativaaduccionimpulsionacueductos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTecnicooperativaaduccionimpulsionacueductos()
	{
		$this->collTecnicooperativaaduccionimpulsionacueductos = array();
	}

	/**
	 * Gets an array of Tecnicooperativaaduccionimpulsionacueducto objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo has previously been saved, it will retrieve
	 * related Tecnicooperativaaduccionimpulsionacueductos from storage. If this Tecnicooperativo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tecnicooperativaaduccionimpulsionacueducto[]
	 * @throws     PropelException
	 */
	public function getTecnicooperativaaduccionimpulsionacueductos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativaaduccionimpulsionacueductos === null) {
			if ($this->isNew()) {
			   $this->collTecnicooperativaaduccionimpulsionacueductos = array();
			} else {

				$criteria->add(TecnicooperativaaduccionimpulsionacueductoPeer::TOAI_TOP_ID, $this->top_id);

				TecnicooperativaaduccionimpulsionacueductoPeer::addSelectColumns($criteria);
				$this->collTecnicooperativaaduccionimpulsionacueductos = TecnicooperativaaduccionimpulsionacueductoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TecnicooperativaaduccionimpulsionacueductoPeer::TOAI_TOP_ID, $this->top_id);

				TecnicooperativaaduccionimpulsionacueductoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTecnicooperativaaduccionimpulsionacueductoCriteria) || !$this->lastTecnicooperativaaduccionimpulsionacueductoCriteria->equals($criteria)) {
					$this->collTecnicooperativaaduccionimpulsionacueductos = TecnicooperativaaduccionimpulsionacueductoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTecnicooperativaaduccionimpulsionacueductoCriteria = $criteria;
		return $this->collTecnicooperativaaduccionimpulsionacueductos;
	}

	/**
	 * Returns the number of related Tecnicooperativaaduccionimpulsionacueducto objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tecnicooperativaaduccionimpulsionacueducto objects.
	 * @throws     PropelException
	 */
	public function countTecnicooperativaaduccionimpulsionacueductos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTecnicooperativaaduccionimpulsionacueductos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TecnicooperativaaduccionimpulsionacueductoPeer::TOAI_TOP_ID, $this->top_id);

				$count = TecnicooperativaaduccionimpulsionacueductoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TecnicooperativaaduccionimpulsionacueductoPeer::TOAI_TOP_ID, $this->top_id);

				if (!isset($this->lastTecnicooperativaaduccionimpulsionacueductoCriteria) || !$this->lastTecnicooperativaaduccionimpulsionacueductoCriteria->equals($criteria)) {
					$count = TecnicooperativaaduccionimpulsionacueductoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTecnicooperativaaduccionimpulsionacueductos);
				}
			} else {
				$count = count($this->collTecnicooperativaaduccionimpulsionacueductos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tecnicooperativaaduccionimpulsionacueducto object to this object
	 * through the Tecnicooperativaaduccionimpulsionacueducto foreign key attribute.
	 *
	 * @param      Tecnicooperativaaduccionimpulsionacueducto $l Tecnicooperativaaduccionimpulsionacueducto
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTecnicooperativaaduccionimpulsionacueducto(Tecnicooperativaaduccionimpulsionacueducto $l)
	{
		if ($this->collTecnicooperativaaduccionimpulsionacueductos === null) {
			$this->initTecnicooperativaaduccionimpulsionacueductos();
		}
		if (!in_array($l, $this->collTecnicooperativaaduccionimpulsionacueductos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTecnicooperativaaduccionimpulsionacueductos, $l);
			$l->setTecnicooperativo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Tecnicooperativaaduccionimpulsionacueductos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getTecnicooperativaaduccionimpulsionacueductosJoinMaterialcanal($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativaaduccionimpulsionacueductos === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativaaduccionimpulsionacueductos = array();
			} else {

				$criteria->add(TecnicooperativaaduccionimpulsionacueductoPeer::TOAI_TOP_ID, $this->top_id);

				$this->collTecnicooperativaaduccionimpulsionacueductos = TecnicooperativaaduccionimpulsionacueductoPeer::doSelectJoinMaterialcanal($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativaaduccionimpulsionacueductoPeer::TOAI_TOP_ID, $this->top_id);

			if (!isset($this->lastTecnicooperativaaduccionimpulsionacueductoCriteria) || !$this->lastTecnicooperativaaduccionimpulsionacueductoCriteria->equals($criteria)) {
				$this->collTecnicooperativaaduccionimpulsionacueductos = TecnicooperativaaduccionimpulsionacueductoPeer::doSelectJoinMaterialcanal($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativaaduccionimpulsionacueductoCriteria = $criteria;

		return $this->collTecnicooperativaaduccionimpulsionacueductos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Tecnicooperativaaduccionimpulsionacueductos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getTecnicooperativaaduccionimpulsionacueductosJoinTipocanal($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativaaduccionimpulsionacueductos === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativaaduccionimpulsionacueductos = array();
			} else {

				$criteria->add(TecnicooperativaaduccionimpulsionacueductoPeer::TOAI_TOP_ID, $this->top_id);

				$this->collTecnicooperativaaduccionimpulsionacueductos = TecnicooperativaaduccionimpulsionacueductoPeer::doSelectJoinTipocanal($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativaaduccionimpulsionacueductoPeer::TOAI_TOP_ID, $this->top_id);

			if (!isset($this->lastTecnicooperativaaduccionimpulsionacueductoCriteria) || !$this->lastTecnicooperativaaduccionimpulsionacueductoCriteria->equals($criteria)) {
				$this->collTecnicooperativaaduccionimpulsionacueductos = TecnicooperativaaduccionimpulsionacueductoPeer::doSelectJoinTipocanal($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativaaduccionimpulsionacueductoCriteria = $criteria;

		return $this->collTecnicooperativaaduccionimpulsionacueductos;
	}

	/**
	 * Clears out the collTecnicooperativaalmacenamientoacueductos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTecnicooperativaalmacenamientoacueductos()
	 */
	public function clearTecnicooperativaalmacenamientoacueductos()
	{
		$this->collTecnicooperativaalmacenamientoacueductos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTecnicooperativaalmacenamientoacueductos collection (array).
	 *
	 * By default this just sets the collTecnicooperativaalmacenamientoacueductos collection to an empty array (like clearcollTecnicooperativaalmacenamientoacueductos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTecnicooperativaalmacenamientoacueductos()
	{
		$this->collTecnicooperativaalmacenamientoacueductos = array();
	}

	/**
	 * Gets an array of Tecnicooperativaalmacenamientoacueducto objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo has previously been saved, it will retrieve
	 * related Tecnicooperativaalmacenamientoacueductos from storage. If this Tecnicooperativo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tecnicooperativaalmacenamientoacueducto[]
	 * @throws     PropelException
	 */
	public function getTecnicooperativaalmacenamientoacueductos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativaalmacenamientoacueductos === null) {
			if ($this->isNew()) {
			   $this->collTecnicooperativaalmacenamientoacueductos = array();
			} else {

				$criteria->add(TecnicooperativaalmacenamientoacueductoPeer::TOAA_TOP_ID, $this->top_id);

				TecnicooperativaalmacenamientoacueductoPeer::addSelectColumns($criteria);
				$this->collTecnicooperativaalmacenamientoacueductos = TecnicooperativaalmacenamientoacueductoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TecnicooperativaalmacenamientoacueductoPeer::TOAA_TOP_ID, $this->top_id);

				TecnicooperativaalmacenamientoacueductoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTecnicooperativaalmacenamientoacueductoCriteria) || !$this->lastTecnicooperativaalmacenamientoacueductoCriteria->equals($criteria)) {
					$this->collTecnicooperativaalmacenamientoacueductos = TecnicooperativaalmacenamientoacueductoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTecnicooperativaalmacenamientoacueductoCriteria = $criteria;
		return $this->collTecnicooperativaalmacenamientoacueductos;
	}

	/**
	 * Returns the number of related Tecnicooperativaalmacenamientoacueducto objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tecnicooperativaalmacenamientoacueducto objects.
	 * @throws     PropelException
	 */
	public function countTecnicooperativaalmacenamientoacueductos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTecnicooperativaalmacenamientoacueductos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TecnicooperativaalmacenamientoacueductoPeer::TOAA_TOP_ID, $this->top_id);

				$count = TecnicooperativaalmacenamientoacueductoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TecnicooperativaalmacenamientoacueductoPeer::TOAA_TOP_ID, $this->top_id);

				if (!isset($this->lastTecnicooperativaalmacenamientoacueductoCriteria) || !$this->lastTecnicooperativaalmacenamientoacueductoCriteria->equals($criteria)) {
					$count = TecnicooperativaalmacenamientoacueductoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTecnicooperativaalmacenamientoacueductos);
				}
			} else {
				$count = count($this->collTecnicooperativaalmacenamientoacueductos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tecnicooperativaalmacenamientoacueducto object to this object
	 * through the Tecnicooperativaalmacenamientoacueducto foreign key attribute.
	 *
	 * @param      Tecnicooperativaalmacenamientoacueducto $l Tecnicooperativaalmacenamientoacueducto
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTecnicooperativaalmacenamientoacueducto(Tecnicooperativaalmacenamientoacueducto $l)
	{
		if ($this->collTecnicooperativaalmacenamientoacueductos === null) {
			$this->initTecnicooperativaalmacenamientoacueductos();
		}
		if (!in_array($l, $this->collTecnicooperativaalmacenamientoacueductos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTecnicooperativaalmacenamientoacueductos, $l);
			$l->setTecnicooperativo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Tecnicooperativaalmacenamientoacueductos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getTecnicooperativaalmacenamientoacueductosJoinTanque($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativaalmacenamientoacueductos === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativaalmacenamientoacueductos = array();
			} else {

				$criteria->add(TecnicooperativaalmacenamientoacueductoPeer::TOAA_TOP_ID, $this->top_id);

				$this->collTecnicooperativaalmacenamientoacueductos = TecnicooperativaalmacenamientoacueductoPeer::doSelectJoinTanque($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativaalmacenamientoacueductoPeer::TOAA_TOP_ID, $this->top_id);

			if (!isset($this->lastTecnicooperativaalmacenamientoacueductoCriteria) || !$this->lastTecnicooperativaalmacenamientoacueductoCriteria->equals($criteria)) {
				$this->collTecnicooperativaalmacenamientoacueductos = TecnicooperativaalmacenamientoacueductoPeer::doSelectJoinTanque($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativaalmacenamientoacueductoCriteria = $criteria;

		return $this->collTecnicooperativaalmacenamientoacueductos;
	}

	/**
	 * Clears out the collTecnicooperativacomponentessistemas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTecnicooperativacomponentessistemas()
	 */
	public function clearTecnicooperativacomponentessistemas()
	{
		$this->collTecnicooperativacomponentessistemas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTecnicooperativacomponentessistemas collection (array).
	 *
	 * By default this just sets the collTecnicooperativacomponentessistemas collection to an empty array (like clearcollTecnicooperativacomponentessistemas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTecnicooperativacomponentessistemas()
	{
		$this->collTecnicooperativacomponentessistemas = array();
	}

	/**
	 * Gets an array of Tecnicooperativacomponentessistema objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo has previously been saved, it will retrieve
	 * related Tecnicooperativacomponentessistemas from storage. If this Tecnicooperativo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tecnicooperativacomponentessistema[]
	 * @throws     PropelException
	 */
	public function getTecnicooperativacomponentessistemas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativacomponentessistemas === null) {
			if ($this->isNew()) {
			   $this->collTecnicooperativacomponentessistemas = array();
			} else {

				$criteria->add(TecnicooperativacomponentessistemaPeer::TOCS_TOP_ID, $this->top_id);

				TecnicooperativacomponentessistemaPeer::addSelectColumns($criteria);
				$this->collTecnicooperativacomponentessistemas = TecnicooperativacomponentessistemaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TecnicooperativacomponentessistemaPeer::TOCS_TOP_ID, $this->top_id);

				TecnicooperativacomponentessistemaPeer::addSelectColumns($criteria);
				if (!isset($this->lastTecnicooperativacomponentessistemaCriteria) || !$this->lastTecnicooperativacomponentessistemaCriteria->equals($criteria)) {
					$this->collTecnicooperativacomponentessistemas = TecnicooperativacomponentessistemaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTecnicooperativacomponentessistemaCriteria = $criteria;
		return $this->collTecnicooperativacomponentessistemas;
	}

	/**
	 * Returns the number of related Tecnicooperativacomponentessistema objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tecnicooperativacomponentessistema objects.
	 * @throws     PropelException
	 */
	public function countTecnicooperativacomponentessistemas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTecnicooperativacomponentessistemas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TecnicooperativacomponentessistemaPeer::TOCS_TOP_ID, $this->top_id);

				$count = TecnicooperativacomponentessistemaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TecnicooperativacomponentessistemaPeer::TOCS_TOP_ID, $this->top_id);

				if (!isset($this->lastTecnicooperativacomponentessistemaCriteria) || !$this->lastTecnicooperativacomponentessistemaCriteria->equals($criteria)) {
					$count = TecnicooperativacomponentessistemaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTecnicooperativacomponentessistemas);
				}
			} else {
				$count = count($this->collTecnicooperativacomponentessistemas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tecnicooperativacomponentessistema object to this object
	 * through the Tecnicooperativacomponentessistema foreign key attribute.
	 *
	 * @param      Tecnicooperativacomponentessistema $l Tecnicooperativacomponentessistema
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTecnicooperativacomponentessistema(Tecnicooperativacomponentessistema $l)
	{
		if ($this->collTecnicooperativacomponentessistemas === null) {
			$this->initTecnicooperativacomponentessistemas();
		}
		if (!in_array($l, $this->collTecnicooperativacomponentessistemas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTecnicooperativacomponentessistemas, $l);
			$l->setTecnicooperativo($this);
		}
	}

	/**
	 * Clears out the collTecnicooperativadesarenadoracueductos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTecnicooperativadesarenadoracueductos()
	 */
	public function clearTecnicooperativadesarenadoracueductos()
	{
		$this->collTecnicooperativadesarenadoracueductos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTecnicooperativadesarenadoracueductos collection (array).
	 *
	 * By default this just sets the collTecnicooperativadesarenadoracueductos collection to an empty array (like clearcollTecnicooperativadesarenadoracueductos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTecnicooperativadesarenadoracueductos()
	{
		$this->collTecnicooperativadesarenadoracueductos = array();
	}

	/**
	 * Gets an array of Tecnicooperativadesarenadoracueducto objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo has previously been saved, it will retrieve
	 * related Tecnicooperativadesarenadoracueductos from storage. If this Tecnicooperativo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tecnicooperativadesarenadoracueducto[]
	 * @throws     PropelException
	 */
	public function getTecnicooperativadesarenadoracueductos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativadesarenadoracueductos === null) {
			if ($this->isNew()) {
			   $this->collTecnicooperativadesarenadoracueductos = array();
			} else {

				$criteria->add(TecnicooperativadesarenadoracueductoPeer::TODES_TOP_ID, $this->top_id);

				TecnicooperativadesarenadoracueductoPeer::addSelectColumns($criteria);
				$this->collTecnicooperativadesarenadoracueductos = TecnicooperativadesarenadoracueductoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TecnicooperativadesarenadoracueductoPeer::TODES_TOP_ID, $this->top_id);

				TecnicooperativadesarenadoracueductoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTecnicooperativadesarenadoracueductoCriteria) || !$this->lastTecnicooperativadesarenadoracueductoCriteria->equals($criteria)) {
					$this->collTecnicooperativadesarenadoracueductos = TecnicooperativadesarenadoracueductoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTecnicooperativadesarenadoracueductoCriteria = $criteria;
		return $this->collTecnicooperativadesarenadoracueductos;
	}

	/**
	 * Returns the number of related Tecnicooperativadesarenadoracueducto objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tecnicooperativadesarenadoracueducto objects.
	 * @throws     PropelException
	 */
	public function countTecnicooperativadesarenadoracueductos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTecnicooperativadesarenadoracueductos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TecnicooperativadesarenadoracueductoPeer::TODES_TOP_ID, $this->top_id);

				$count = TecnicooperativadesarenadoracueductoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TecnicooperativadesarenadoracueductoPeer::TODES_TOP_ID, $this->top_id);

				if (!isset($this->lastTecnicooperativadesarenadoracueductoCriteria) || !$this->lastTecnicooperativadesarenadoracueductoCriteria->equals($criteria)) {
					$count = TecnicooperativadesarenadoracueductoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTecnicooperativadesarenadoracueductos);
				}
			} else {
				$count = count($this->collTecnicooperativadesarenadoracueductos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tecnicooperativadesarenadoracueducto object to this object
	 * through the Tecnicooperativadesarenadoracueducto foreign key attribute.
	 *
	 * @param      Tecnicooperativadesarenadoracueducto $l Tecnicooperativadesarenadoracueducto
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTecnicooperativadesarenadoracueducto(Tecnicooperativadesarenadoracueducto $l)
	{
		if ($this->collTecnicooperativadesarenadoracueductos === null) {
			$this->initTecnicooperativadesarenadoracueductos();
		}
		if (!in_array($l, $this->collTecnicooperativadesarenadoracueductos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTecnicooperativadesarenadoracueductos, $l);
			$l->setTecnicooperativo($this);
		}
	}

	/**
	 * Clears out the collTecnicooperativadesinfeccionacueductos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTecnicooperativadesinfeccionacueductos()
	 */
	public function clearTecnicooperativadesinfeccionacueductos()
	{
		$this->collTecnicooperativadesinfeccionacueductos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTecnicooperativadesinfeccionacueductos collection (array).
	 *
	 * By default this just sets the collTecnicooperativadesinfeccionacueductos collection to an empty array (like clearcollTecnicooperativadesinfeccionacueductos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTecnicooperativadesinfeccionacueductos()
	{
		$this->collTecnicooperativadesinfeccionacueductos = array();
	}

	/**
	 * Gets an array of Tecnicooperativadesinfeccionacueducto objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo has previously been saved, it will retrieve
	 * related Tecnicooperativadesinfeccionacueductos from storage. If this Tecnicooperativo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tecnicooperativadesinfeccionacueducto[]
	 * @throws     PropelException
	 */
	public function getTecnicooperativadesinfeccionacueductos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativadesinfeccionacueductos === null) {
			if ($this->isNew()) {
			   $this->collTecnicooperativadesinfeccionacueductos = array();
			} else {

				$criteria->add(TecnicooperativadesinfeccionacueductoPeer::TODA_TOP_ID, $this->top_id);

				TecnicooperativadesinfeccionacueductoPeer::addSelectColumns($criteria);
				$this->collTecnicooperativadesinfeccionacueductos = TecnicooperativadesinfeccionacueductoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TecnicooperativadesinfeccionacueductoPeer::TODA_TOP_ID, $this->top_id);

				TecnicooperativadesinfeccionacueductoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTecnicooperativadesinfeccionacueductoCriteria) || !$this->lastTecnicooperativadesinfeccionacueductoCriteria->equals($criteria)) {
					$this->collTecnicooperativadesinfeccionacueductos = TecnicooperativadesinfeccionacueductoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTecnicooperativadesinfeccionacueductoCriteria = $criteria;
		return $this->collTecnicooperativadesinfeccionacueductos;
	}

	/**
	 * Returns the number of related Tecnicooperativadesinfeccionacueducto objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tecnicooperativadesinfeccionacueducto objects.
	 * @throws     PropelException
	 */
	public function countTecnicooperativadesinfeccionacueductos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTecnicooperativadesinfeccionacueductos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TecnicooperativadesinfeccionacueductoPeer::TODA_TOP_ID, $this->top_id);

				$count = TecnicooperativadesinfeccionacueductoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TecnicooperativadesinfeccionacueductoPeer::TODA_TOP_ID, $this->top_id);

				if (!isset($this->lastTecnicooperativadesinfeccionacueductoCriteria) || !$this->lastTecnicooperativadesinfeccionacueductoCriteria->equals($criteria)) {
					$count = TecnicooperativadesinfeccionacueductoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTecnicooperativadesinfeccionacueductos);
				}
			} else {
				$count = count($this->collTecnicooperativadesinfeccionacueductos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tecnicooperativadesinfeccionacueducto object to this object
	 * through the Tecnicooperativadesinfeccionacueducto foreign key attribute.
	 *
	 * @param      Tecnicooperativadesinfeccionacueducto $l Tecnicooperativadesinfeccionacueducto
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTecnicooperativadesinfeccionacueducto(Tecnicooperativadesinfeccionacueducto $l)
	{
		if ($this->collTecnicooperativadesinfeccionacueductos === null) {
			$this->initTecnicooperativadesinfeccionacueductos();
		}
		if (!in_array($l, $this->collTecnicooperativadesinfeccionacueductos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTecnicooperativadesinfeccionacueductos, $l);
			$l->setTecnicooperativo($this);
		}
	}

	/**
	 * Clears out the collTecnicooperativalineaconduccionaguacrudaacueductos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTecnicooperativalineaconduccionaguacrudaacueductos()
	 */
	public function clearTecnicooperativalineaconduccionaguacrudaacueductos()
	{
		$this->collTecnicooperativalineaconduccionaguacrudaacueductos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTecnicooperativalineaconduccionaguacrudaacueductos collection (array).
	 *
	 * By default this just sets the collTecnicooperativalineaconduccionaguacrudaacueductos collection to an empty array (like clearcollTecnicooperativalineaconduccionaguacrudaacueductos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTecnicooperativalineaconduccionaguacrudaacueductos()
	{
		$this->collTecnicooperativalineaconduccionaguacrudaacueductos = array();
	}

	/**
	 * Gets an array of Tecnicooperativalineaconduccionaguacrudaacueducto objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo has previously been saved, it will retrieve
	 * related Tecnicooperativalineaconduccionaguacrudaacueductos from storage. If this Tecnicooperativo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tecnicooperativalineaconduccionaguacrudaacueducto[]
	 * @throws     PropelException
	 */
	public function getTecnicooperativalineaconduccionaguacrudaacueductos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativalineaconduccionaguacrudaacueductos === null) {
			if ($this->isNew()) {
			   $this->collTecnicooperativalineaconduccionaguacrudaacueductos = array();
			} else {

				$criteria->add(TecnicooperativalineaconduccionaguacrudaacueductoPeer::TOLC_TOP_ID, $this->top_id);

				TecnicooperativalineaconduccionaguacrudaacueductoPeer::addSelectColumns($criteria);
				$this->collTecnicooperativalineaconduccionaguacrudaacueductos = TecnicooperativalineaconduccionaguacrudaacueductoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TecnicooperativalineaconduccionaguacrudaacueductoPeer::TOLC_TOP_ID, $this->top_id);

				TecnicooperativalineaconduccionaguacrudaacueductoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTecnicooperativalineaconduccionaguacrudaacueductoCriteria) || !$this->lastTecnicooperativalineaconduccionaguacrudaacueductoCriteria->equals($criteria)) {
					$this->collTecnicooperativalineaconduccionaguacrudaacueductos = TecnicooperativalineaconduccionaguacrudaacueductoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTecnicooperativalineaconduccionaguacrudaacueductoCriteria = $criteria;
		return $this->collTecnicooperativalineaconduccionaguacrudaacueductos;
	}

	/**
	 * Returns the number of related Tecnicooperativalineaconduccionaguacrudaacueducto objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tecnicooperativalineaconduccionaguacrudaacueducto objects.
	 * @throws     PropelException
	 */
	public function countTecnicooperativalineaconduccionaguacrudaacueductos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTecnicooperativalineaconduccionaguacrudaacueductos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TecnicooperativalineaconduccionaguacrudaacueductoPeer::TOLC_TOP_ID, $this->top_id);

				$count = TecnicooperativalineaconduccionaguacrudaacueductoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TecnicooperativalineaconduccionaguacrudaacueductoPeer::TOLC_TOP_ID, $this->top_id);

				if (!isset($this->lastTecnicooperativalineaconduccionaguacrudaacueductoCriteria) || !$this->lastTecnicooperativalineaconduccionaguacrudaacueductoCriteria->equals($criteria)) {
					$count = TecnicooperativalineaconduccionaguacrudaacueductoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTecnicooperativalineaconduccionaguacrudaacueductos);
				}
			} else {
				$count = count($this->collTecnicooperativalineaconduccionaguacrudaacueductos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tecnicooperativalineaconduccionaguacrudaacueducto object to this object
	 * through the Tecnicooperativalineaconduccionaguacrudaacueducto foreign key attribute.
	 *
	 * @param      Tecnicooperativalineaconduccionaguacrudaacueducto $l Tecnicooperativalineaconduccionaguacrudaacueducto
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTecnicooperativalineaconduccionaguacrudaacueducto(Tecnicooperativalineaconduccionaguacrudaacueducto $l)
	{
		if ($this->collTecnicooperativalineaconduccionaguacrudaacueductos === null) {
			$this->initTecnicooperativalineaconduccionaguacrudaacueductos();
		}
		if (!in_array($l, $this->collTecnicooperativalineaconduccionaguacrudaacueductos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTecnicooperativalineaconduccionaguacrudaacueductos, $l);
			$l->setTecnicooperativo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Tecnicooperativalineaconduccionaguacrudaacueductos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getTecnicooperativalineaconduccionaguacrudaacueductosJoinTipocanal($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativalineaconduccionaguacrudaacueductos === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativalineaconduccionaguacrudaacueductos = array();
			} else {

				$criteria->add(TecnicooperativalineaconduccionaguacrudaacueductoPeer::TOLC_TOP_ID, $this->top_id);

				$this->collTecnicooperativalineaconduccionaguacrudaacueductos = TecnicooperativalineaconduccionaguacrudaacueductoPeer::doSelectJoinTipocanal($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativalineaconduccionaguacrudaacueductoPeer::TOLC_TOP_ID, $this->top_id);

			if (!isset($this->lastTecnicooperativalineaconduccionaguacrudaacueductoCriteria) || !$this->lastTecnicooperativalineaconduccionaguacrudaacueductoCriteria->equals($criteria)) {
				$this->collTecnicooperativalineaconduccionaguacrudaacueductos = TecnicooperativalineaconduccionaguacrudaacueductoPeer::doSelectJoinTipocanal($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativalineaconduccionaguacrudaacueductoCriteria = $criteria;

		return $this->collTecnicooperativalineaconduccionaguacrudaacueductos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Tecnicooperativalineaconduccionaguacrudaacueductos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getTecnicooperativalineaconduccionaguacrudaacueductosJoinMaterialcanal($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativalineaconduccionaguacrudaacueductos === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativalineaconduccionaguacrudaacueductos = array();
			} else {

				$criteria->add(TecnicooperativalineaconduccionaguacrudaacueductoPeer::TOLC_TOP_ID, $this->top_id);

				$this->collTecnicooperativalineaconduccionaguacrudaacueductos = TecnicooperativalineaconduccionaguacrudaacueductoPeer::doSelectJoinMaterialcanal($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativalineaconduccionaguacrudaacueductoPeer::TOLC_TOP_ID, $this->top_id);

			if (!isset($this->lastTecnicooperativalineaconduccionaguacrudaacueductoCriteria) || !$this->lastTecnicooperativalineaconduccionaguacrudaacueductoCriteria->equals($criteria)) {
				$this->collTecnicooperativalineaconduccionaguacrudaacueductos = TecnicooperativalineaconduccionaguacrudaacueductoPeer::doSelectJoinMaterialcanal($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativalineaconduccionaguacrudaacueductoCriteria = $criteria;

		return $this->collTecnicooperativalineaconduccionaguacrudaacueductos;
	}

	/**
	 * Clears out the collTecnicooperativaplantaaguapotableacueductos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTecnicooperativaplantaaguapotableacueductos()
	 */
	public function clearTecnicooperativaplantaaguapotableacueductos()
	{
		$this->collTecnicooperativaplantaaguapotableacueductos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTecnicooperativaplantaaguapotableacueductos collection (array).
	 *
	 * By default this just sets the collTecnicooperativaplantaaguapotableacueductos collection to an empty array (like clearcollTecnicooperativaplantaaguapotableacueductos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTecnicooperativaplantaaguapotableacueductos()
	{
		$this->collTecnicooperativaplantaaguapotableacueductos = array();
	}

	/**
	 * Gets an array of Tecnicooperativaplantaaguapotableacueducto objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo has previously been saved, it will retrieve
	 * related Tecnicooperativaplantaaguapotableacueductos from storage. If this Tecnicooperativo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tecnicooperativaplantaaguapotableacueducto[]
	 * @throws     PropelException
	 */
	public function getTecnicooperativaplantaaguapotableacueductos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativaplantaaguapotableacueductos === null) {
			if ($this->isNew()) {
			   $this->collTecnicooperativaplantaaguapotableacueductos = array();
			} else {

				$criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TOP_ID, $this->top_id);

				TecnicooperativaplantaaguapotableacueductoPeer::addSelectColumns($criteria);
				$this->collTecnicooperativaplantaaguapotableacueductos = TecnicooperativaplantaaguapotableacueductoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TOP_ID, $this->top_id);

				TecnicooperativaplantaaguapotableacueductoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTecnicooperativaplantaaguapotableacueductoCriteria) || !$this->lastTecnicooperativaplantaaguapotableacueductoCriteria->equals($criteria)) {
					$this->collTecnicooperativaplantaaguapotableacueductos = TecnicooperativaplantaaguapotableacueductoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTecnicooperativaplantaaguapotableacueductoCriteria = $criteria;
		return $this->collTecnicooperativaplantaaguapotableacueductos;
	}

	/**
	 * Returns the number of related Tecnicooperativaplantaaguapotableacueducto objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tecnicooperativaplantaaguapotableacueducto objects.
	 * @throws     PropelException
	 */
	public function countTecnicooperativaplantaaguapotableacueductos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTecnicooperativaplantaaguapotableacueductos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TOP_ID, $this->top_id);

				$count = TecnicooperativaplantaaguapotableacueductoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TOP_ID, $this->top_id);

				if (!isset($this->lastTecnicooperativaplantaaguapotableacueductoCriteria) || !$this->lastTecnicooperativaplantaaguapotableacueductoCriteria->equals($criteria)) {
					$count = TecnicooperativaplantaaguapotableacueductoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTecnicooperativaplantaaguapotableacueductos);
				}
			} else {
				$count = count($this->collTecnicooperativaplantaaguapotableacueductos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tecnicooperativaplantaaguapotableacueducto object to this object
	 * through the Tecnicooperativaplantaaguapotableacueducto foreign key attribute.
	 *
	 * @param      Tecnicooperativaplantaaguapotableacueducto $l Tecnicooperativaplantaaguapotableacueducto
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTecnicooperativaplantaaguapotableacueducto(Tecnicooperativaplantaaguapotableacueducto $l)
	{
		if ($this->collTecnicooperativaplantaaguapotableacueductos === null) {
			$this->initTecnicooperativaplantaaguapotableacueductos();
		}
		if (!in_array($l, $this->collTecnicooperativaplantaaguapotableacueductos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTecnicooperativaplantaaguapotableacueductos, $l);
			$l->setTecnicooperativo($this);
		}
	}

	/**
	 * Clears out the collTecnicooperativareddistribucionacueductos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTecnicooperativareddistribucionacueductos()
	 */
	public function clearTecnicooperativareddistribucionacueductos()
	{
		$this->collTecnicooperativareddistribucionacueductos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTecnicooperativareddistribucionacueductos collection (array).
	 *
	 * By default this just sets the collTecnicooperativareddistribucionacueductos collection to an empty array (like clearcollTecnicooperativareddistribucionacueductos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTecnicooperativareddistribucionacueductos()
	{
		$this->collTecnicooperativareddistribucionacueductos = array();
	}

	/**
	 * Gets an array of Tecnicooperativareddistribucionacueducto objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo has previously been saved, it will retrieve
	 * related Tecnicooperativareddistribucionacueductos from storage. If this Tecnicooperativo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tecnicooperativareddistribucionacueducto[]
	 * @throws     PropelException
	 */
	public function getTecnicooperativareddistribucionacueductos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativareddistribucionacueductos === null) {
			if ($this->isNew()) {
			   $this->collTecnicooperativareddistribucionacueductos = array();
			} else {

				$criteria->add(TecnicooperativareddistribucionacueductoPeer::TORD_TOP_ID, $this->top_id);

				TecnicooperativareddistribucionacueductoPeer::addSelectColumns($criteria);
				$this->collTecnicooperativareddistribucionacueductos = TecnicooperativareddistribucionacueductoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TecnicooperativareddistribucionacueductoPeer::TORD_TOP_ID, $this->top_id);

				TecnicooperativareddistribucionacueductoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTecnicooperativareddistribucionacueductoCriteria) || !$this->lastTecnicooperativareddistribucionacueductoCriteria->equals($criteria)) {
					$this->collTecnicooperativareddistribucionacueductos = TecnicooperativareddistribucionacueductoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTecnicooperativareddistribucionacueductoCriteria = $criteria;
		return $this->collTecnicooperativareddistribucionacueductos;
	}

	/**
	 * Returns the number of related Tecnicooperativareddistribucionacueducto objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tecnicooperativareddistribucionacueducto objects.
	 * @throws     PropelException
	 */
	public function countTecnicooperativareddistribucionacueductos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTecnicooperativareddistribucionacueductos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TecnicooperativareddistribucionacueductoPeer::TORD_TOP_ID, $this->top_id);

				$count = TecnicooperativareddistribucionacueductoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TecnicooperativareddistribucionacueductoPeer::TORD_TOP_ID, $this->top_id);

				if (!isset($this->lastTecnicooperativareddistribucionacueductoCriteria) || !$this->lastTecnicooperativareddistribucionacueductoCriteria->equals($criteria)) {
					$count = TecnicooperativareddistribucionacueductoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTecnicooperativareddistribucionacueductos);
				}
			} else {
				$count = count($this->collTecnicooperativareddistribucionacueductos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tecnicooperativareddistribucionacueducto object to this object
	 * through the Tecnicooperativareddistribucionacueducto foreign key attribute.
	 *
	 * @param      Tecnicooperativareddistribucionacueducto $l Tecnicooperativareddistribucionacueducto
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTecnicooperativareddistribucionacueducto(Tecnicooperativareddistribucionacueducto $l)
	{
		if ($this->collTecnicooperativareddistribucionacueductos === null) {
			$this->initTecnicooperativareddistribucionacueductos();
		}
		if (!in_array($l, $this->collTecnicooperativareddistribucionacueductos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTecnicooperativareddistribucionacueductos, $l);
			$l->setTecnicooperativo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Tecnicooperativareddistribucionacueductos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getTecnicooperativareddistribucionacueductosJoinReddistribucion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativareddistribucionacueductos === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativareddistribucionacueductos = array();
			} else {

				$criteria->add(TecnicooperativareddistribucionacueductoPeer::TORD_TOP_ID, $this->top_id);

				$this->collTecnicooperativareddistribucionacueductos = TecnicooperativareddistribucionacueductoPeer::doSelectJoinReddistribucion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativareddistribucionacueductoPeer::TORD_TOP_ID, $this->top_id);

			if (!isset($this->lastTecnicooperativareddistribucionacueductoCriteria) || !$this->lastTecnicooperativareddistribucionacueductoCriteria->equals($criteria)) {
				$this->collTecnicooperativareddistribucionacueductos = TecnicooperativareddistribucionacueductoPeer::doSelectJoinReddistribucion($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativareddistribucionacueductoCriteria = $criteria;

		return $this->collTecnicooperativareddistribucionacueductos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Tecnicooperativareddistribucionacueductos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getTecnicooperativareddistribucionacueductosJoinMaterialreddistribucion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativareddistribucionacueductos === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativareddistribucionacueductos = array();
			} else {

				$criteria->add(TecnicooperativareddistribucionacueductoPeer::TORD_TOP_ID, $this->top_id);

				$this->collTecnicooperativareddistribucionacueductos = TecnicooperativareddistribucionacueductoPeer::doSelectJoinMaterialreddistribucion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativareddistribucionacueductoPeer::TORD_TOP_ID, $this->top_id);

			if (!isset($this->lastTecnicooperativareddistribucionacueductoCriteria) || !$this->lastTecnicooperativareddistribucionacueductoCriteria->equals($criteria)) {
				$this->collTecnicooperativareddistribucionacueductos = TecnicooperativareddistribucionacueductoPeer::doSelectJoinMaterialreddistribucion($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativareddistribucionacueductoCriteria = $criteria;

		return $this->collTecnicooperativareddistribucionacueductos;
	}

	/**
	 * Clears out the collTecnicooperativasolucioncolectivaalcantarillados collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTecnicooperativasolucioncolectivaalcantarillados()
	 */
	public function clearTecnicooperativasolucioncolectivaalcantarillados()
	{
		$this->collTecnicooperativasolucioncolectivaalcantarillados = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTecnicooperativasolucioncolectivaalcantarillados collection (array).
	 *
	 * By default this just sets the collTecnicooperativasolucioncolectivaalcantarillados collection to an empty array (like clearcollTecnicooperativasolucioncolectivaalcantarillados());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTecnicooperativasolucioncolectivaalcantarillados()
	{
		$this->collTecnicooperativasolucioncolectivaalcantarillados = array();
	}

	/**
	 * Gets an array of Tecnicooperativasolucioncolectivaalcantarillado objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo has previously been saved, it will retrieve
	 * related Tecnicooperativasolucioncolectivaalcantarillados from storage. If this Tecnicooperativo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tecnicooperativasolucioncolectivaalcantarillado[]
	 * @throws     PropelException
	 */
	public function getTecnicooperativasolucioncolectivaalcantarillados($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarillados === null) {
			if ($this->isNew()) {
			   $this->collTecnicooperativasolucioncolectivaalcantarillados = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_TOP_ID, $this->top_id);

				TecnicooperativasolucioncolectivaalcantarilladoPeer::addSelectColumns($criteria);
				$this->collTecnicooperativasolucioncolectivaalcantarillados = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_TOP_ID, $this->top_id);

				TecnicooperativasolucioncolectivaalcantarilladoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria->equals($criteria)) {
					$this->collTecnicooperativasolucioncolectivaalcantarillados = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria = $criteria;
		return $this->collTecnicooperativasolucioncolectivaalcantarillados;
	}

	/**
	 * Returns the number of related Tecnicooperativasolucioncolectivaalcantarillado objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tecnicooperativasolucioncolectivaalcantarillado objects.
	 * @throws     PropelException
	 */
	public function countTecnicooperativasolucioncolectivaalcantarillados(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTecnicooperativasolucioncolectivaalcantarillados === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_TOP_ID, $this->top_id);

				$count = TecnicooperativasolucioncolectivaalcantarilladoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_TOP_ID, $this->top_id);

				if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria->equals($criteria)) {
					$count = TecnicooperativasolucioncolectivaalcantarilladoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTecnicooperativasolucioncolectivaalcantarillados);
				}
			} else {
				$count = count($this->collTecnicooperativasolucioncolectivaalcantarillados);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tecnicooperativasolucioncolectivaalcantarillado object to this object
	 * through the Tecnicooperativasolucioncolectivaalcantarillado foreign key attribute.
	 *
	 * @param      Tecnicooperativasolucioncolectivaalcantarillado $l Tecnicooperativasolucioncolectivaalcantarillado
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTecnicooperativasolucioncolectivaalcantarillado(Tecnicooperativasolucioncolectivaalcantarillado $l)
	{
		if ($this->collTecnicooperativasolucioncolectivaalcantarillados === null) {
			$this->initTecnicooperativasolucioncolectivaalcantarillados();
		}
		if (!in_array($l, $this->collTecnicooperativasolucioncolectivaalcantarillados, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTecnicooperativasolucioncolectivaalcantarillados, $l);
			$l->setTecnicooperativo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Tecnicooperativasolucioncolectivaalcantarillados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosJoinEstadogeneralRelatedByToscaSanitarioEstado($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarillados === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucioncolectivaalcantarillados = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_TOP_ID, $this->top_id);

				$this->collTecnicooperativasolucioncolectivaalcantarillados = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinEstadogeneralRelatedByToscaSanitarioEstado($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_TOP_ID, $this->top_id);

			if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucioncolectivaalcantarillados = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinEstadogeneralRelatedByToscaSanitarioEstado($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria = $criteria;

		return $this->collTecnicooperativasolucioncolectivaalcantarillados;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Tecnicooperativasolucioncolectivaalcantarillados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosJoinEstadogeneralRelatedByToscaPluvialEstado($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarillados === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucioncolectivaalcantarillados = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_TOP_ID, $this->top_id);

				$this->collTecnicooperativasolucioncolectivaalcantarillados = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinEstadogeneralRelatedByToscaPluvialEstado($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_TOP_ID, $this->top_id);

			if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucioncolectivaalcantarillados = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinEstadogeneralRelatedByToscaPluvialEstado($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria = $criteria;

		return $this->collTecnicooperativasolucioncolectivaalcantarillados;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Tecnicooperativasolucioncolectivaalcantarillados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosJoinEstadogeneralRelatedByToscaCombiConvencionalEstado($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarillados === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucioncolectivaalcantarillados = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_TOP_ID, $this->top_id);

				$this->collTecnicooperativasolucioncolectivaalcantarillados = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinEstadogeneralRelatedByToscaCombiConvencionalEstado($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_TOP_ID, $this->top_id);

			if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucioncolectivaalcantarillados = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinEstadogeneralRelatedByToscaCombiConvencionalEstado($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria = $criteria;

		return $this->collTecnicooperativasolucioncolectivaalcantarillados;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Tecnicooperativasolucioncolectivaalcantarillados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosJoinEstadogeneralRelatedByToscaCombiNoConvencionalEstado($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarillados === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucioncolectivaalcantarillados = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_TOP_ID, $this->top_id);

				$this->collTecnicooperativasolucioncolectivaalcantarillados = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinEstadogeneralRelatedByToscaCombiNoConvencionalEstado($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_TOP_ID, $this->top_id);

			if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucioncolectivaalcantarillados = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinEstadogeneralRelatedByToscaCombiNoConvencionalEstado($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria = $criteria;

		return $this->collTecnicooperativasolucioncolectivaalcantarillados;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Tecnicooperativasolucioncolectivaalcantarillados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosJoinEstadogeneralRelatedByToscaSimplificadoEstado($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarillados === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucioncolectivaalcantarillados = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_TOP_ID, $this->top_id);

				$this->collTecnicooperativasolucioncolectivaalcantarillados = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinEstadogeneralRelatedByToscaSimplificadoEstado($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_TOP_ID, $this->top_id);

			if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucioncolectivaalcantarillados = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinEstadogeneralRelatedByToscaSimplificadoEstado($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria = $criteria;

		return $this->collTecnicooperativasolucioncolectivaalcantarillados;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Tecnicooperativasolucioncolectivaalcantarillados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosJoinEstadogeneralRelatedByToscaSinArrastreSolidosEstado($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarillados === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucioncolectivaalcantarillados = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_TOP_ID, $this->top_id);

				$this->collTecnicooperativasolucioncolectivaalcantarillados = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinEstadogeneralRelatedByToscaSinArrastreSolidosEstado($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_TOP_ID, $this->top_id);

			if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucioncolectivaalcantarillados = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinEstadogeneralRelatedByToscaSinArrastreSolidosEstado($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria = $criteria;

		return $this->collTecnicooperativasolucioncolectivaalcantarillados;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Tecnicooperativasolucioncolectivaalcantarillados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosJoinEstadogeneralRelatedByToscaOtroEstado($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarillados === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucioncolectivaalcantarillados = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_TOP_ID, $this->top_id);

				$this->collTecnicooperativasolucioncolectivaalcantarillados = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinEstadogeneralRelatedByToscaOtroEstado($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_TOP_ID, $this->top_id);

			if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucioncolectivaalcantarillados = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinEstadogeneralRelatedByToscaOtroEstado($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria = $criteria;

		return $this->collTecnicooperativasolucioncolectivaalcantarillados;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Tecnicooperativasolucioncolectivaalcantarillados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosJoinActividadesaejecutarporprestadoralcantarillado($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarillados === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucioncolectivaalcantarillados = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_TOP_ID, $this->top_id);

				$this->collTecnicooperativasolucioncolectivaalcantarillados = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinActividadesaejecutarporprestadoralcantarillado($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_TOP_ID, $this->top_id);

			if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucioncolectivaalcantarillados = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinActividadesaejecutarporprestadoralcantarillado($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoCriteria = $criteria;

		return $this->collTecnicooperativasolucioncolectivaalcantarillados;
	}

	/**
	 * Clears out the collTecnicooperativasolucionindividualalcantarillados collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTecnicooperativasolucionindividualalcantarillados()
	 */
	public function clearTecnicooperativasolucionindividualalcantarillados()
	{
		$this->collTecnicooperativasolucionindividualalcantarillados = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTecnicooperativasolucionindividualalcantarillados collection (array).
	 *
	 * By default this just sets the collTecnicooperativasolucionindividualalcantarillados collection to an empty array (like clearcollTecnicooperativasolucionindividualalcantarillados());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTecnicooperativasolucionindividualalcantarillados()
	{
		$this->collTecnicooperativasolucionindividualalcantarillados = array();
	}

	/**
	 * Gets an array of Tecnicooperativasolucionindividualalcantarillado objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo has previously been saved, it will retrieve
	 * related Tecnicooperativasolucionindividualalcantarillados from storage. If this Tecnicooperativo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tecnicooperativasolucionindividualalcantarillado[]
	 * @throws     PropelException
	 */
	public function getTecnicooperativasolucionindividualalcantarillados($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucionindividualalcantarillados === null) {
			if ($this->isNew()) {
			   $this->collTecnicooperativasolucionindividualalcantarillados = array();
			} else {

				$criteria->add(TecnicooperativasolucionindividualalcantarilladoPeer::TOSIA_TOP_ID, $this->top_id);

				TecnicooperativasolucionindividualalcantarilladoPeer::addSelectColumns($criteria);
				$this->collTecnicooperativasolucionindividualalcantarillados = TecnicooperativasolucionindividualalcantarilladoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TecnicooperativasolucionindividualalcantarilladoPeer::TOSIA_TOP_ID, $this->top_id);

				TecnicooperativasolucionindividualalcantarilladoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTecnicooperativasolucionindividualalcantarilladoCriteria) || !$this->lastTecnicooperativasolucionindividualalcantarilladoCriteria->equals($criteria)) {
					$this->collTecnicooperativasolucionindividualalcantarillados = TecnicooperativasolucionindividualalcantarilladoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTecnicooperativasolucionindividualalcantarilladoCriteria = $criteria;
		return $this->collTecnicooperativasolucionindividualalcantarillados;
	}

	/**
	 * Returns the number of related Tecnicooperativasolucionindividualalcantarillado objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tecnicooperativasolucionindividualalcantarillado objects.
	 * @throws     PropelException
	 */
	public function countTecnicooperativasolucionindividualalcantarillados(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTecnicooperativasolucionindividualalcantarillados === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TecnicooperativasolucionindividualalcantarilladoPeer::TOSIA_TOP_ID, $this->top_id);

				$count = TecnicooperativasolucionindividualalcantarilladoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TecnicooperativasolucionindividualalcantarilladoPeer::TOSIA_TOP_ID, $this->top_id);

				if (!isset($this->lastTecnicooperativasolucionindividualalcantarilladoCriteria) || !$this->lastTecnicooperativasolucionindividualalcantarilladoCriteria->equals($criteria)) {
					$count = TecnicooperativasolucionindividualalcantarilladoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTecnicooperativasolucionindividualalcantarillados);
				}
			} else {
				$count = count($this->collTecnicooperativasolucionindividualalcantarillados);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tecnicooperativasolucionindividualalcantarillado object to this object
	 * through the Tecnicooperativasolucionindividualalcantarillado foreign key attribute.
	 *
	 * @param      Tecnicooperativasolucionindividualalcantarillado $l Tecnicooperativasolucionindividualalcantarillado
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTecnicooperativasolucionindividualalcantarillado(Tecnicooperativasolucionindividualalcantarillado $l)
	{
		if ($this->collTecnicooperativasolucionindividualalcantarillados === null) {
			$this->initTecnicooperativasolucionindividualalcantarillados();
		}
		if (!in_array($l, $this->collTecnicooperativasolucionindividualalcantarillados, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTecnicooperativasolucionindividualalcantarillados, $l);
			$l->setTecnicooperativo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Tecnicooperativasolucionindividualalcantarillados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getTecnicooperativasolucionindividualalcantarilladosJoinCategoriadetipodesolucionindividualalcantarilladoRelatedByTosiaOpcion1CtdsiaId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucionindividualalcantarillados === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucionindividualalcantarillados = array();
			} else {

				$criteria->add(TecnicooperativasolucionindividualalcantarilladoPeer::TOSIA_TOP_ID, $this->top_id);

				$this->collTecnicooperativasolucionindividualalcantarillados = TecnicooperativasolucionindividualalcantarilladoPeer::doSelectJoinCategoriadetipodesolucionindividualalcantarilladoRelatedByTosiaOpcion1CtdsiaId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucionindividualalcantarilladoPeer::TOSIA_TOP_ID, $this->top_id);

			if (!isset($this->lastTecnicooperativasolucionindividualalcantarilladoCriteria) || !$this->lastTecnicooperativasolucionindividualalcantarilladoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucionindividualalcantarillados = TecnicooperativasolucionindividualalcantarilladoPeer::doSelectJoinCategoriadetipodesolucionindividualalcantarilladoRelatedByTosiaOpcion1CtdsiaId($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucionindividualalcantarilladoCriteria = $criteria;

		return $this->collTecnicooperativasolucionindividualalcantarillados;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Tecnicooperativasolucionindividualalcantarillados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getTecnicooperativasolucionindividualalcantarilladosJoinCategoriadetipodesolucionindividualalcantarilladoRelatedByTosiaOpcion2CtdsiaId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucionindividualalcantarillados === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucionindividualalcantarillados = array();
			} else {

				$criteria->add(TecnicooperativasolucionindividualalcantarilladoPeer::TOSIA_TOP_ID, $this->top_id);

				$this->collTecnicooperativasolucionindividualalcantarillados = TecnicooperativasolucionindividualalcantarilladoPeer::doSelectJoinCategoriadetipodesolucionindividualalcantarilladoRelatedByTosiaOpcion2CtdsiaId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucionindividualalcantarilladoPeer::TOSIA_TOP_ID, $this->top_id);

			if (!isset($this->lastTecnicooperativasolucionindividualalcantarilladoCriteria) || !$this->lastTecnicooperativasolucionindividualalcantarilladoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucionindividualalcantarillados = TecnicooperativasolucionindividualalcantarilladoPeer::doSelectJoinCategoriadetipodesolucionindividualalcantarilladoRelatedByTosiaOpcion2CtdsiaId($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucionindividualalcantarilladoCriteria = $criteria;

		return $this->collTecnicooperativasolucionindividualalcantarillados;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Tecnicooperativasolucionindividualalcantarillados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getTecnicooperativasolucionindividualalcantarilladosJoinCategoriadetipodesolucionindividualalcantarilladoRelatedByTosiaOpcion3CtdsiaId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucionindividualalcantarillados === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucionindividualalcantarillados = array();
			} else {

				$criteria->add(TecnicooperativasolucionindividualalcantarilladoPeer::TOSIA_TOP_ID, $this->top_id);

				$this->collTecnicooperativasolucionindividualalcantarillados = TecnicooperativasolucionindividualalcantarilladoPeer::doSelectJoinCategoriadetipodesolucionindividualalcantarilladoRelatedByTosiaOpcion3CtdsiaId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucionindividualalcantarilladoPeer::TOSIA_TOP_ID, $this->top_id);

			if (!isset($this->lastTecnicooperativasolucionindividualalcantarilladoCriteria) || !$this->lastTecnicooperativasolucionindividualalcantarilladoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucionindividualalcantarillados = TecnicooperativasolucionindividualalcantarilladoPeer::doSelectJoinCategoriadetipodesolucionindividualalcantarilladoRelatedByTosiaOpcion3CtdsiaId($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucionindividualalcantarilladoCriteria = $criteria;

		return $this->collTecnicooperativasolucionindividualalcantarillados;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Tecnicooperativasolucionindividualalcantarillados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getTecnicooperativasolucionindividualalcantarilladosJoinCategoriadetipodesolucionindividualalcantarilladoRelatedByTosiaOpcion4CtdsiaId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucionindividualalcantarillados === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucionindividualalcantarillados = array();
			} else {

				$criteria->add(TecnicooperativasolucionindividualalcantarilladoPeer::TOSIA_TOP_ID, $this->top_id);

				$this->collTecnicooperativasolucionindividualalcantarillados = TecnicooperativasolucionindividualalcantarilladoPeer::doSelectJoinCategoriadetipodesolucionindividualalcantarilladoRelatedByTosiaOpcion4CtdsiaId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucionindividualalcantarilladoPeer::TOSIA_TOP_ID, $this->top_id);

			if (!isset($this->lastTecnicooperativasolucionindividualalcantarilladoCriteria) || !$this->lastTecnicooperativasolucionindividualalcantarilladoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucionindividualalcantarillados = TecnicooperativasolucionindividualalcantarilladoPeer::doSelectJoinCategoriadetipodesolucionindividualalcantarilladoRelatedByTosiaOpcion4CtdsiaId($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucionindividualalcantarilladoCriteria = $criteria;

		return $this->collTecnicooperativasolucionindividualalcantarillados;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Tecnicooperativasolucionindividualalcantarillados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getTecnicooperativasolucionindividualalcantarilladosJoinCategoriadetipodesolucionindividualalcantarilladoRelatedByTosiaOpcion5CtdsiaId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucionindividualalcantarillados === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucionindividualalcantarillados = array();
			} else {

				$criteria->add(TecnicooperativasolucionindividualalcantarilladoPeer::TOSIA_TOP_ID, $this->top_id);

				$this->collTecnicooperativasolucionindividualalcantarillados = TecnicooperativasolucionindividualalcantarilladoPeer::doSelectJoinCategoriadetipodesolucionindividualalcantarilladoRelatedByTosiaOpcion5CtdsiaId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucionindividualalcantarilladoPeer::TOSIA_TOP_ID, $this->top_id);

			if (!isset($this->lastTecnicooperativasolucionindividualalcantarilladoCriteria) || !$this->lastTecnicooperativasolucionindividualalcantarilladoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucionindividualalcantarillados = TecnicooperativasolucionindividualalcantarilladoPeer::doSelectJoinCategoriadetipodesolucionindividualalcantarilladoRelatedByTosiaOpcion5CtdsiaId($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucionindividualalcantarilladoCriteria = $criteria;

		return $this->collTecnicooperativasolucionindividualalcantarillados;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo is new, it will return
	 * an empty collection; or if this Tecnicooperativo has previously
	 * been saved, it will retrieve related Tecnicooperativasolucionindividualalcantarillados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tecnicooperativo.
	 */
	public function getTecnicooperativasolucionindividualalcantarilladosJoinCategoriadetipodesolucionindividualalcantarilladoRelatedByTosiaOpcion6CtdsiaId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucionindividualalcantarillados === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucionindividualalcantarillados = array();
			} else {

				$criteria->add(TecnicooperativasolucionindividualalcantarilladoPeer::TOSIA_TOP_ID, $this->top_id);

				$this->collTecnicooperativasolucionindividualalcantarillados = TecnicooperativasolucionindividualalcantarilladoPeer::doSelectJoinCategoriadetipodesolucionindividualalcantarilladoRelatedByTosiaOpcion6CtdsiaId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucionindividualalcantarilladoPeer::TOSIA_TOP_ID, $this->top_id);

			if (!isset($this->lastTecnicooperativasolucionindividualalcantarilladoCriteria) || !$this->lastTecnicooperativasolucionindividualalcantarilladoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucionindividualalcantarillados = TecnicooperativasolucionindividualalcantarilladoPeer::doSelectJoinCategoriadetipodesolucionindividualalcantarilladoRelatedByTosiaOpcion6CtdsiaId($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucionindividualalcantarilladoCriteria = $criteria;

		return $this->collTecnicooperativasolucionindividualalcantarillados;
	}

	/**
	 * Clears out the collTratamientoaprovechamientoresiduossolidosaseos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTratamientoaprovechamientoresiduossolidosaseos()
	 */
	public function clearTratamientoaprovechamientoresiduossolidosaseos()
	{
		$this->collTratamientoaprovechamientoresiduossolidosaseos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTratamientoaprovechamientoresiduossolidosaseos collection (array).
	 *
	 * By default this just sets the collTratamientoaprovechamientoresiduossolidosaseos collection to an empty array (like clearcollTratamientoaprovechamientoresiduossolidosaseos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTratamientoaprovechamientoresiduossolidosaseos()
	{
		$this->collTratamientoaprovechamientoresiduossolidosaseos = array();
	}

	/**
	 * Gets an array of Tratamientoaprovechamientoresiduossolidosaseo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tecnicooperativo has previously been saved, it will retrieve
	 * related Tratamientoaprovechamientoresiduossolidosaseos from storage. If this Tecnicooperativo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tratamientoaprovechamientoresiduossolidosaseo[]
	 * @throws     PropelException
	 */
	public function getTratamientoaprovechamientoresiduossolidosaseos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTratamientoaprovechamientoresiduossolidosaseos === null) {
			if ($this->isNew()) {
			   $this->collTratamientoaprovechamientoresiduossolidosaseos = array();
			} else {

				$criteria->add(TratamientoaprovechamientoresiduossolidosaseoPeer::TAP_TOP_ID, $this->top_id);

				TratamientoaprovechamientoresiduossolidosaseoPeer::addSelectColumns($criteria);
				$this->collTratamientoaprovechamientoresiduossolidosaseos = TratamientoaprovechamientoresiduossolidosaseoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TratamientoaprovechamientoresiduossolidosaseoPeer::TAP_TOP_ID, $this->top_id);

				TratamientoaprovechamientoresiduossolidosaseoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTratamientoaprovechamientoresiduossolidosaseoCriteria) || !$this->lastTratamientoaprovechamientoresiduossolidosaseoCriteria->equals($criteria)) {
					$this->collTratamientoaprovechamientoresiduossolidosaseos = TratamientoaprovechamientoresiduossolidosaseoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTratamientoaprovechamientoresiduossolidosaseoCriteria = $criteria;
		return $this->collTratamientoaprovechamientoresiduossolidosaseos;
	}

	/**
	 * Returns the number of related Tratamientoaprovechamientoresiduossolidosaseo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tratamientoaprovechamientoresiduossolidosaseo objects.
	 * @throws     PropelException
	 */
	public function countTratamientoaprovechamientoresiduossolidosaseos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TecnicooperativoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTratamientoaprovechamientoresiduossolidosaseos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TratamientoaprovechamientoresiduossolidosaseoPeer::TAP_TOP_ID, $this->top_id);

				$count = TratamientoaprovechamientoresiduossolidosaseoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TratamientoaprovechamientoresiduossolidosaseoPeer::TAP_TOP_ID, $this->top_id);

				if (!isset($this->lastTratamientoaprovechamientoresiduossolidosaseoCriteria) || !$this->lastTratamientoaprovechamientoresiduossolidosaseoCriteria->equals($criteria)) {
					$count = TratamientoaprovechamientoresiduossolidosaseoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTratamientoaprovechamientoresiduossolidosaseos);
				}
			} else {
				$count = count($this->collTratamientoaprovechamientoresiduossolidosaseos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tratamientoaprovechamientoresiduossolidosaseo object to this object
	 * through the Tratamientoaprovechamientoresiduossolidosaseo foreign key attribute.
	 *
	 * @param      Tratamientoaprovechamientoresiduossolidosaseo $l Tratamientoaprovechamientoresiduossolidosaseo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTratamientoaprovechamientoresiduossolidosaseo(Tratamientoaprovechamientoresiduossolidosaseo $l)
	{
		if ($this->collTratamientoaprovechamientoresiduossolidosaseos === null) {
			$this->initTratamientoaprovechamientoresiduossolidosaseos();
		}
		if (!in_array($l, $this->collTratamientoaprovechamientoresiduossolidosaseos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTratamientoaprovechamientoresiduossolidosaseos, $l);
			$l->setTecnicooperativo($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collActividadesresiduossolidosaseos) {
				foreach ((array) $this->collActividadesresiduossolidosaseos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDisposicionfinalresiduosaseos) {
				foreach ((array) $this->collDisposicionfinalresiduosaseos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRecolecciontrasnporteaseos) {
				foreach ((array) $this->collRecolecciontrasnporteaseos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSeparacionresiduossolidosfuentesaseos) {
				foreach ((array) $this->collSeparacionresiduossolidosfuentesaseos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTecnicooperativaacueductos) {
				foreach ((array) $this->collTecnicooperativaacueductos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTecnicooperativaaduccionimpulsionacueductos) {
				foreach ((array) $this->collTecnicooperativaaduccionimpulsionacueductos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTecnicooperativaalmacenamientoacueductos) {
				foreach ((array) $this->collTecnicooperativaalmacenamientoacueductos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTecnicooperativacomponentessistemas) {
				foreach ((array) $this->collTecnicooperativacomponentessistemas as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTecnicooperativadesarenadoracueductos) {
				foreach ((array) $this->collTecnicooperativadesarenadoracueductos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTecnicooperativadesinfeccionacueductos) {
				foreach ((array) $this->collTecnicooperativadesinfeccionacueductos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTecnicooperativalineaconduccionaguacrudaacueductos) {
				foreach ((array) $this->collTecnicooperativalineaconduccionaguacrudaacueductos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTecnicooperativaplantaaguapotableacueductos) {
				foreach ((array) $this->collTecnicooperativaplantaaguapotableacueductos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTecnicooperativareddistribucionacueductos) {
				foreach ((array) $this->collTecnicooperativareddistribucionacueductos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTecnicooperativasolucioncolectivaalcantarillados) {
				foreach ((array) $this->collTecnicooperativasolucioncolectivaalcantarillados as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTecnicooperativasolucionindividualalcantarillados) {
				foreach ((array) $this->collTecnicooperativasolucionindividualalcantarillados as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTratamientoaprovechamientoresiduossolidosaseos) {
				foreach ((array) $this->collTratamientoaprovechamientoresiduossolidosaseos as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collActividadesresiduossolidosaseos = null;
		$this->collDisposicionfinalresiduosaseos = null;
		$this->collRecolecciontrasnporteaseos = null;
		$this->collSeparacionresiduossolidosfuentesaseos = null;
		$this->collTecnicooperativaacueductos = null;
		$this->collTecnicooperativaaduccionimpulsionacueductos = null;
		$this->collTecnicooperativaalmacenamientoacueductos = null;
		$this->collTecnicooperativacomponentessistemas = null;
		$this->collTecnicooperativadesarenadoracueductos = null;
		$this->collTecnicooperativadesinfeccionacueductos = null;
		$this->collTecnicooperativalineaconduccionaguacrudaacueductos = null;
		$this->collTecnicooperativaplantaaguapotableacueductos = null;
		$this->collTecnicooperativareddistribucionacueductos = null;
		$this->collTecnicooperativasolucioncolectivaalcantarillados = null;
		$this->collTecnicooperativasolucionindividualalcantarillados = null;
		$this->collTratamientoaprovechamientoresiduossolidosaseos = null;
			$this->aPeriodoporprestadorservicio = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseTecnicooperativo:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseTecnicooperativo::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseTecnicooperativo
