<?php

/**
 * Base class that represents a row from the 'estadogeneral' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 07/29/10 01:11:07
 *
 * @package    lib.model.om
 */
abstract class BaseEstadogeneral extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        EstadogeneralPeer
	 */
	protected static $peer;

	/**
	 * The value for the esg_id field.
	 * @var        int
	 */
	protected $esg_id;

	/**
	 * The value for the esg_nombre field.
	 * @var        string
	 */
	protected $esg_nombre;

	/**
	 * @var        array Captacion[] Collection to store aggregation of Captacion objects.
	 */
	protected $collCaptacionsRelatedByCaptEstadoEstructuraId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCaptacionsRelatedByCaptEstadoEstructuraId.
	 */
	private $lastCaptacionRelatedByCaptEstadoEstructuraIdCriteria = null;

	/**
	 * @var        array Captacion[] Collection to store aggregation of Captacion objects.
	 */
	protected $collCaptacionsRelatedByCaptEstadoPozoId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCaptacionsRelatedByCaptEstadoPozoId.
	 */
	private $lastCaptacionRelatedByCaptEstadoPozoIdCriteria = null;

	/**
	 * @var        array Captacion[] Collection to store aggregation of Captacion objects.
	 */
	protected $collCaptacionsRelatedByCaptEstadoBombaId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCaptacionsRelatedByCaptEstadoBombaId.
	 */
	private $lastCaptacionRelatedByCaptEstadoBombaIdCriteria = null;

	/**
	 * @var        array Disposicionfinalresiduosaseo[] Collection to store aggregation of Disposicionfinalresiduosaseo objects.
	 */
	protected $collDisposicionfinalresiduosaseos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDisposicionfinalresiduosaseos.
	 */
	private $lastDisposicionfinalresiduosaseoCriteria = null;

	/**
	 * @var        array Tanque[] Collection to store aggregation of Tanque objects.
	 */
	protected $collTanques;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTanques.
	 */
	private $lastTanqueCriteria = null;

	/**
	 * @var        array Tecnicooperativasolucioncolectivaalcantarillado[] Collection to store aggregation of Tecnicooperativasolucioncolectivaalcantarillado objects.
	 */
	protected $collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado.
	 */
	private $lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSanitarioEstadoCriteria = null;

	/**
	 * @var        array Tecnicooperativasolucioncolectivaalcantarillado[] Collection to store aggregation of Tecnicooperativasolucioncolectivaalcantarillado objects.
	 */
	protected $collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado.
	 */
	private $lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaPluvialEstadoCriteria = null;

	/**
	 * @var        array Tecnicooperativasolucioncolectivaalcantarillado[] Collection to store aggregation of Tecnicooperativasolucioncolectivaalcantarillado objects.
	 */
	protected $collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado.
	 */
	private $lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiConvencionalEstadoCriteria = null;

	/**
	 * @var        array Tecnicooperativasolucioncolectivaalcantarillado[] Collection to store aggregation of Tecnicooperativasolucioncolectivaalcantarillado objects.
	 */
	protected $collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado.
	 */
	private $lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiNoConvencionalEstadoCriteria = null;

	/**
	 * @var        array Tecnicooperativasolucioncolectivaalcantarillado[] Collection to store aggregation of Tecnicooperativasolucioncolectivaalcantarillado objects.
	 */
	protected $collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado.
	 */
	private $lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSimplificadoEstadoCriteria = null;

	/**
	 * @var        array Tecnicooperativasolucioncolectivaalcantarillado[] Collection to store aggregation of Tecnicooperativasolucioncolectivaalcantarillado objects.
	 */
	protected $collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado.
	 */
	private $lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSinArrastreSolidosEstadoCriteria = null;

	/**
	 * @var        array Tecnicooperativasolucioncolectivaalcantarillado[] Collection to store aggregation of Tecnicooperativasolucioncolectivaalcantarillado objects.
	 */
	protected $collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado.
	 */
	private $lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaOtroEstadoCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'EstadogeneralPeer';

	/**
	 * Get the [esg_id] column value.
	 * 
	 * @return     int
	 */
	public function getEsgId()
	{
		return $this->esg_id;
	}

	/**
	 * Get the [esg_nombre] column value.
	 * 
	 * @return     string
	 */
	public function getEsgNombre()
	{
		return $this->esg_nombre;
	}

	/**
	 * Set the value of [esg_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Estadogeneral The current object (for fluent API support)
	 */
	public function setEsgId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->esg_id !== $v) {
			$this->esg_id = $v;
			$this->modifiedColumns[] = EstadogeneralPeer::ESG_ID;
		}

		return $this;
	} // setEsgId()

	/**
	 * Set the value of [esg_nombre] column.
	 * 
	 * @param      string $v new value
	 * @return     Estadogeneral The current object (for fluent API support)
	 */
	public function setEsgNombre($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->esg_nombre !== $v) {
			$this->esg_nombre = $v;
			$this->modifiedColumns[] = EstadogeneralPeer::ESG_NOMBRE;
		}

		return $this;
	} // setEsgNombre()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->esg_id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->esg_nombre = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 2; // 2 = EstadogeneralPeer::NUM_COLUMNS - EstadogeneralPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Estadogeneral object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EstadogeneralPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = EstadogeneralPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collCaptacionsRelatedByCaptEstadoEstructuraId = null;
			$this->lastCaptacionRelatedByCaptEstadoEstructuraIdCriteria = null;

			$this->collCaptacionsRelatedByCaptEstadoPozoId = null;
			$this->lastCaptacionRelatedByCaptEstadoPozoIdCriteria = null;

			$this->collCaptacionsRelatedByCaptEstadoBombaId = null;
			$this->lastCaptacionRelatedByCaptEstadoBombaIdCriteria = null;

			$this->collDisposicionfinalresiduosaseos = null;
			$this->lastDisposicionfinalresiduosaseoCriteria = null;

			$this->collTanques = null;
			$this->lastTanqueCriteria = null;

			$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado = null;
			$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSanitarioEstadoCriteria = null;

			$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado = null;
			$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaPluvialEstadoCriteria = null;

			$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado = null;
			$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiConvencionalEstadoCriteria = null;

			$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado = null;
			$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiNoConvencionalEstadoCriteria = null;

			$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado = null;
			$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSimplificadoEstadoCriteria = null;

			$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado = null;
			$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSinArrastreSolidosEstadoCriteria = null;

			$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado = null;
			$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaOtroEstadoCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EstadogeneralPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseEstadogeneral:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				EstadogeneralPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseEstadogeneral:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EstadogeneralPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseEstadogeneral:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseEstadogeneral:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				EstadogeneralPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = EstadogeneralPeer::ESG_ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = EstadogeneralPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setEsgId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += EstadogeneralPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collCaptacionsRelatedByCaptEstadoEstructuraId !== null) {
				foreach ($this->collCaptacionsRelatedByCaptEstadoEstructuraId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCaptacionsRelatedByCaptEstadoPozoId !== null) {
				foreach ($this->collCaptacionsRelatedByCaptEstadoPozoId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCaptacionsRelatedByCaptEstadoBombaId !== null) {
				foreach ($this->collCaptacionsRelatedByCaptEstadoBombaId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDisposicionfinalresiduosaseos !== null) {
				foreach ($this->collDisposicionfinalresiduosaseos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTanques !== null) {
				foreach ($this->collTanques as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado !== null) {
				foreach ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado !== null) {
				foreach ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado !== null) {
				foreach ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado !== null) {
				foreach ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado !== null) {
				foreach ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado !== null) {
				foreach ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado !== null) {
				foreach ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = EstadogeneralPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collCaptacionsRelatedByCaptEstadoEstructuraId !== null) {
					foreach ($this->collCaptacionsRelatedByCaptEstadoEstructuraId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCaptacionsRelatedByCaptEstadoPozoId !== null) {
					foreach ($this->collCaptacionsRelatedByCaptEstadoPozoId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCaptacionsRelatedByCaptEstadoBombaId !== null) {
					foreach ($this->collCaptacionsRelatedByCaptEstadoBombaId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDisposicionfinalresiduosaseos !== null) {
					foreach ($this->collDisposicionfinalresiduosaseos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTanques !== null) {
					foreach ($this->collTanques as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado !== null) {
					foreach ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado !== null) {
					foreach ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado !== null) {
					foreach ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado !== null) {
					foreach ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado !== null) {
					foreach ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado !== null) {
					foreach ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado !== null) {
					foreach ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = EstadogeneralPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getEsgId();
				break;
			case 1:
				return $this->getEsgNombre();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = EstadogeneralPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getEsgId(),
			$keys[1] => $this->getEsgNombre(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = EstadogeneralPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setEsgId($value);
				break;
			case 1:
				$this->setEsgNombre($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = EstadogeneralPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setEsgId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setEsgNombre($arr[$keys[1]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);

		if ($this->isColumnModified(EstadogeneralPeer::ESG_ID)) $criteria->add(EstadogeneralPeer::ESG_ID, $this->esg_id);
		if ($this->isColumnModified(EstadogeneralPeer::ESG_NOMBRE)) $criteria->add(EstadogeneralPeer::ESG_NOMBRE, $this->esg_nombre);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);

		$criteria->add(EstadogeneralPeer::ESG_ID, $this->esg_id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getEsgId();
	}

	/**
	 * Generic method to set the primary key (esg_id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setEsgId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Estadogeneral (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setEsgNombre($this->esg_nombre);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getCaptacionsRelatedByCaptEstadoEstructuraId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCaptacionRelatedByCaptEstadoEstructuraId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCaptacionsRelatedByCaptEstadoPozoId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCaptacionRelatedByCaptEstadoPozoId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCaptacionsRelatedByCaptEstadoBombaId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCaptacionRelatedByCaptEstadoBombaId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDisposicionfinalresiduosaseos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDisposicionfinalresiduosaseo($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTanques() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTanque($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSanitarioEstado($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaPluvialEstado($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiConvencionalEstado($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiNoConvencionalEstado($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSimplificadoEstado($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSinArrastreSolidosEstado($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaOtroEstado($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setEsgId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Estadogeneral Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     EstadogeneralPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new EstadogeneralPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collCaptacionsRelatedByCaptEstadoEstructuraId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCaptacionsRelatedByCaptEstadoEstructuraId()
	 */
	public function clearCaptacionsRelatedByCaptEstadoEstructuraId()
	{
		$this->collCaptacionsRelatedByCaptEstadoEstructuraId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCaptacionsRelatedByCaptEstadoEstructuraId collection (array).
	 *
	 * By default this just sets the collCaptacionsRelatedByCaptEstadoEstructuraId collection to an empty array (like clearcollCaptacionsRelatedByCaptEstadoEstructuraId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCaptacionsRelatedByCaptEstadoEstructuraId()
	{
		$this->collCaptacionsRelatedByCaptEstadoEstructuraId = array();
	}

	/**
	 * Gets an array of Captacion objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Estadogeneral has previously been saved, it will retrieve
	 * related CaptacionsRelatedByCaptEstadoEstructuraId from storage. If this Estadogeneral is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Captacion[]
	 * @throws     PropelException
	 */
	public function getCaptacionsRelatedByCaptEstadoEstructuraId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCaptacionsRelatedByCaptEstadoEstructuraId === null) {
			if ($this->isNew()) {
			   $this->collCaptacionsRelatedByCaptEstadoEstructuraId = array();
			} else {

				$criteria->add(CaptacionPeer::CAPT_ESTADO_ESTRUCTURA_ID, $this->esg_id);

				CaptacionPeer::addSelectColumns($criteria);
				$this->collCaptacionsRelatedByCaptEstadoEstructuraId = CaptacionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CaptacionPeer::CAPT_ESTADO_ESTRUCTURA_ID, $this->esg_id);

				CaptacionPeer::addSelectColumns($criteria);
				if (!isset($this->lastCaptacionRelatedByCaptEstadoEstructuraIdCriteria) || !$this->lastCaptacionRelatedByCaptEstadoEstructuraIdCriteria->equals($criteria)) {
					$this->collCaptacionsRelatedByCaptEstadoEstructuraId = CaptacionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCaptacionRelatedByCaptEstadoEstructuraIdCriteria = $criteria;
		return $this->collCaptacionsRelatedByCaptEstadoEstructuraId;
	}

	/**
	 * Returns the number of related Captacion objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Captacion objects.
	 * @throws     PropelException
	 */
	public function countCaptacionsRelatedByCaptEstadoEstructuraId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCaptacionsRelatedByCaptEstadoEstructuraId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CaptacionPeer::CAPT_ESTADO_ESTRUCTURA_ID, $this->esg_id);

				$count = CaptacionPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CaptacionPeer::CAPT_ESTADO_ESTRUCTURA_ID, $this->esg_id);

				if (!isset($this->lastCaptacionRelatedByCaptEstadoEstructuraIdCriteria) || !$this->lastCaptacionRelatedByCaptEstadoEstructuraIdCriteria->equals($criteria)) {
					$count = CaptacionPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCaptacionsRelatedByCaptEstadoEstructuraId);
				}
			} else {
				$count = count($this->collCaptacionsRelatedByCaptEstadoEstructuraId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Captacion object to this object
	 * through the Captacion foreign key attribute.
	 *
	 * @param      Captacion $l Captacion
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCaptacionRelatedByCaptEstadoEstructuraId(Captacion $l)
	{
		if ($this->collCaptacionsRelatedByCaptEstadoEstructuraId === null) {
			$this->initCaptacionsRelatedByCaptEstadoEstructuraId();
		}
		if (!in_array($l, $this->collCaptacionsRelatedByCaptEstadoEstructuraId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCaptacionsRelatedByCaptEstadoEstructuraId, $l);
			$l->setEstadogeneralRelatedByCaptEstadoEstructuraId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Estadogeneral is new, it will return
	 * an empty collection; or if this Estadogeneral has previously
	 * been saved, it will retrieve related CaptacionsRelatedByCaptEstadoEstructuraId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Estadogeneral.
	 */
	public function getCaptacionsRelatedByCaptEstadoEstructuraIdJoinFuenteenergia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCaptacionsRelatedByCaptEstadoEstructuraId === null) {
			if ($this->isNew()) {
				$this->collCaptacionsRelatedByCaptEstadoEstructuraId = array();
			} else {

				$criteria->add(CaptacionPeer::CAPT_ESTADO_ESTRUCTURA_ID, $this->esg_id);

				$this->collCaptacionsRelatedByCaptEstadoEstructuraId = CaptacionPeer::doSelectJoinFuenteenergia($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CaptacionPeer::CAPT_ESTADO_ESTRUCTURA_ID, $this->esg_id);

			if (!isset($this->lastCaptacionRelatedByCaptEstadoEstructuraIdCriteria) || !$this->lastCaptacionRelatedByCaptEstadoEstructuraIdCriteria->equals($criteria)) {
				$this->collCaptacionsRelatedByCaptEstadoEstructuraId = CaptacionPeer::doSelectJoinFuenteenergia($criteria, $con, $join_behavior);
			}
		}
		$this->lastCaptacionRelatedByCaptEstadoEstructuraIdCriteria = $criteria;

		return $this->collCaptacionsRelatedByCaptEstadoEstructuraId;
	}

	/**
	 * Clears out the collCaptacionsRelatedByCaptEstadoPozoId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCaptacionsRelatedByCaptEstadoPozoId()
	 */
	public function clearCaptacionsRelatedByCaptEstadoPozoId()
	{
		$this->collCaptacionsRelatedByCaptEstadoPozoId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCaptacionsRelatedByCaptEstadoPozoId collection (array).
	 *
	 * By default this just sets the collCaptacionsRelatedByCaptEstadoPozoId collection to an empty array (like clearcollCaptacionsRelatedByCaptEstadoPozoId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCaptacionsRelatedByCaptEstadoPozoId()
	{
		$this->collCaptacionsRelatedByCaptEstadoPozoId = array();
	}

	/**
	 * Gets an array of Captacion objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Estadogeneral has previously been saved, it will retrieve
	 * related CaptacionsRelatedByCaptEstadoPozoId from storage. If this Estadogeneral is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Captacion[]
	 * @throws     PropelException
	 */
	public function getCaptacionsRelatedByCaptEstadoPozoId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCaptacionsRelatedByCaptEstadoPozoId === null) {
			if ($this->isNew()) {
			   $this->collCaptacionsRelatedByCaptEstadoPozoId = array();
			} else {

				$criteria->add(CaptacionPeer::CAPT_ESTADO_POZO_ID, $this->esg_id);

				CaptacionPeer::addSelectColumns($criteria);
				$this->collCaptacionsRelatedByCaptEstadoPozoId = CaptacionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CaptacionPeer::CAPT_ESTADO_POZO_ID, $this->esg_id);

				CaptacionPeer::addSelectColumns($criteria);
				if (!isset($this->lastCaptacionRelatedByCaptEstadoPozoIdCriteria) || !$this->lastCaptacionRelatedByCaptEstadoPozoIdCriteria->equals($criteria)) {
					$this->collCaptacionsRelatedByCaptEstadoPozoId = CaptacionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCaptacionRelatedByCaptEstadoPozoIdCriteria = $criteria;
		return $this->collCaptacionsRelatedByCaptEstadoPozoId;
	}

	/**
	 * Returns the number of related Captacion objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Captacion objects.
	 * @throws     PropelException
	 */
	public function countCaptacionsRelatedByCaptEstadoPozoId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCaptacionsRelatedByCaptEstadoPozoId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CaptacionPeer::CAPT_ESTADO_POZO_ID, $this->esg_id);

				$count = CaptacionPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CaptacionPeer::CAPT_ESTADO_POZO_ID, $this->esg_id);

				if (!isset($this->lastCaptacionRelatedByCaptEstadoPozoIdCriteria) || !$this->lastCaptacionRelatedByCaptEstadoPozoIdCriteria->equals($criteria)) {
					$count = CaptacionPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCaptacionsRelatedByCaptEstadoPozoId);
				}
			} else {
				$count = count($this->collCaptacionsRelatedByCaptEstadoPozoId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Captacion object to this object
	 * through the Captacion foreign key attribute.
	 *
	 * @param      Captacion $l Captacion
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCaptacionRelatedByCaptEstadoPozoId(Captacion $l)
	{
		if ($this->collCaptacionsRelatedByCaptEstadoPozoId === null) {
			$this->initCaptacionsRelatedByCaptEstadoPozoId();
		}
		if (!in_array($l, $this->collCaptacionsRelatedByCaptEstadoPozoId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCaptacionsRelatedByCaptEstadoPozoId, $l);
			$l->setEstadogeneralRelatedByCaptEstadoPozoId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Estadogeneral is new, it will return
	 * an empty collection; or if this Estadogeneral has previously
	 * been saved, it will retrieve related CaptacionsRelatedByCaptEstadoPozoId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Estadogeneral.
	 */
	public function getCaptacionsRelatedByCaptEstadoPozoIdJoinFuenteenergia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCaptacionsRelatedByCaptEstadoPozoId === null) {
			if ($this->isNew()) {
				$this->collCaptacionsRelatedByCaptEstadoPozoId = array();
			} else {

				$criteria->add(CaptacionPeer::CAPT_ESTADO_POZO_ID, $this->esg_id);

				$this->collCaptacionsRelatedByCaptEstadoPozoId = CaptacionPeer::doSelectJoinFuenteenergia($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CaptacionPeer::CAPT_ESTADO_POZO_ID, $this->esg_id);

			if (!isset($this->lastCaptacionRelatedByCaptEstadoPozoIdCriteria) || !$this->lastCaptacionRelatedByCaptEstadoPozoIdCriteria->equals($criteria)) {
				$this->collCaptacionsRelatedByCaptEstadoPozoId = CaptacionPeer::doSelectJoinFuenteenergia($criteria, $con, $join_behavior);
			}
		}
		$this->lastCaptacionRelatedByCaptEstadoPozoIdCriteria = $criteria;

		return $this->collCaptacionsRelatedByCaptEstadoPozoId;
	}

	/**
	 * Clears out the collCaptacionsRelatedByCaptEstadoBombaId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCaptacionsRelatedByCaptEstadoBombaId()
	 */
	public function clearCaptacionsRelatedByCaptEstadoBombaId()
	{
		$this->collCaptacionsRelatedByCaptEstadoBombaId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCaptacionsRelatedByCaptEstadoBombaId collection (array).
	 *
	 * By default this just sets the collCaptacionsRelatedByCaptEstadoBombaId collection to an empty array (like clearcollCaptacionsRelatedByCaptEstadoBombaId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCaptacionsRelatedByCaptEstadoBombaId()
	{
		$this->collCaptacionsRelatedByCaptEstadoBombaId = array();
	}

	/**
	 * Gets an array of Captacion objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Estadogeneral has previously been saved, it will retrieve
	 * related CaptacionsRelatedByCaptEstadoBombaId from storage. If this Estadogeneral is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Captacion[]
	 * @throws     PropelException
	 */
	public function getCaptacionsRelatedByCaptEstadoBombaId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCaptacionsRelatedByCaptEstadoBombaId === null) {
			if ($this->isNew()) {
			   $this->collCaptacionsRelatedByCaptEstadoBombaId = array();
			} else {

				$criteria->add(CaptacionPeer::CAPT_ESTADO_BOMBA_ID, $this->esg_id);

				CaptacionPeer::addSelectColumns($criteria);
				$this->collCaptacionsRelatedByCaptEstadoBombaId = CaptacionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CaptacionPeer::CAPT_ESTADO_BOMBA_ID, $this->esg_id);

				CaptacionPeer::addSelectColumns($criteria);
				if (!isset($this->lastCaptacionRelatedByCaptEstadoBombaIdCriteria) || !$this->lastCaptacionRelatedByCaptEstadoBombaIdCriteria->equals($criteria)) {
					$this->collCaptacionsRelatedByCaptEstadoBombaId = CaptacionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCaptacionRelatedByCaptEstadoBombaIdCriteria = $criteria;
		return $this->collCaptacionsRelatedByCaptEstadoBombaId;
	}

	/**
	 * Returns the number of related Captacion objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Captacion objects.
	 * @throws     PropelException
	 */
	public function countCaptacionsRelatedByCaptEstadoBombaId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCaptacionsRelatedByCaptEstadoBombaId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CaptacionPeer::CAPT_ESTADO_BOMBA_ID, $this->esg_id);

				$count = CaptacionPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CaptacionPeer::CAPT_ESTADO_BOMBA_ID, $this->esg_id);

				if (!isset($this->lastCaptacionRelatedByCaptEstadoBombaIdCriteria) || !$this->lastCaptacionRelatedByCaptEstadoBombaIdCriteria->equals($criteria)) {
					$count = CaptacionPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCaptacionsRelatedByCaptEstadoBombaId);
				}
			} else {
				$count = count($this->collCaptacionsRelatedByCaptEstadoBombaId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Captacion object to this object
	 * through the Captacion foreign key attribute.
	 *
	 * @param      Captacion $l Captacion
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCaptacionRelatedByCaptEstadoBombaId(Captacion $l)
	{
		if ($this->collCaptacionsRelatedByCaptEstadoBombaId === null) {
			$this->initCaptacionsRelatedByCaptEstadoBombaId();
		}
		if (!in_array($l, $this->collCaptacionsRelatedByCaptEstadoBombaId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCaptacionsRelatedByCaptEstadoBombaId, $l);
			$l->setEstadogeneralRelatedByCaptEstadoBombaId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Estadogeneral is new, it will return
	 * an empty collection; or if this Estadogeneral has previously
	 * been saved, it will retrieve related CaptacionsRelatedByCaptEstadoBombaId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Estadogeneral.
	 */
	public function getCaptacionsRelatedByCaptEstadoBombaIdJoinFuenteenergia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCaptacionsRelatedByCaptEstadoBombaId === null) {
			if ($this->isNew()) {
				$this->collCaptacionsRelatedByCaptEstadoBombaId = array();
			} else {

				$criteria->add(CaptacionPeer::CAPT_ESTADO_BOMBA_ID, $this->esg_id);

				$this->collCaptacionsRelatedByCaptEstadoBombaId = CaptacionPeer::doSelectJoinFuenteenergia($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CaptacionPeer::CAPT_ESTADO_BOMBA_ID, $this->esg_id);

			if (!isset($this->lastCaptacionRelatedByCaptEstadoBombaIdCriteria) || !$this->lastCaptacionRelatedByCaptEstadoBombaIdCriteria->equals($criteria)) {
				$this->collCaptacionsRelatedByCaptEstadoBombaId = CaptacionPeer::doSelectJoinFuenteenergia($criteria, $con, $join_behavior);
			}
		}
		$this->lastCaptacionRelatedByCaptEstadoBombaIdCriteria = $criteria;

		return $this->collCaptacionsRelatedByCaptEstadoBombaId;
	}

	/**
	 * Clears out the collDisposicionfinalresiduosaseos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDisposicionfinalresiduosaseos()
	 */
	public function clearDisposicionfinalresiduosaseos()
	{
		$this->collDisposicionfinalresiduosaseos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDisposicionfinalresiduosaseos collection (array).
	 *
	 * By default this just sets the collDisposicionfinalresiduosaseos collection to an empty array (like clearcollDisposicionfinalresiduosaseos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDisposicionfinalresiduosaseos()
	{
		$this->collDisposicionfinalresiduosaseos = array();
	}

	/**
	 * Gets an array of Disposicionfinalresiduosaseo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Estadogeneral has previously been saved, it will retrieve
	 * related Disposicionfinalresiduosaseos from storage. If this Estadogeneral is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Disposicionfinalresiduosaseo[]
	 * @throws     PropelException
	 */
	public function getDisposicionfinalresiduosaseos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDisposicionfinalresiduosaseos === null) {
			if ($this->isNew()) {
			   $this->collDisposicionfinalresiduosaseos = array();
			} else {

				$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID, $this->esg_id);

				DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
				$this->collDisposicionfinalresiduosaseos = DisposicionfinalresiduosaseoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID, $this->esg_id);

				DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
				if (!isset($this->lastDisposicionfinalresiduosaseoCriteria) || !$this->lastDisposicionfinalresiduosaseoCriteria->equals($criteria)) {
					$this->collDisposicionfinalresiduosaseos = DisposicionfinalresiduosaseoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDisposicionfinalresiduosaseoCriteria = $criteria;
		return $this->collDisposicionfinalresiduosaseos;
	}

	/**
	 * Returns the number of related Disposicionfinalresiduosaseo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Disposicionfinalresiduosaseo objects.
	 * @throws     PropelException
	 */
	public function countDisposicionfinalresiduosaseos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDisposicionfinalresiduosaseos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID, $this->esg_id);

				$count = DisposicionfinalresiduosaseoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID, $this->esg_id);

				if (!isset($this->lastDisposicionfinalresiduosaseoCriteria) || !$this->lastDisposicionfinalresiduosaseoCriteria->equals($criteria)) {
					$count = DisposicionfinalresiduosaseoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDisposicionfinalresiduosaseos);
				}
			} else {
				$count = count($this->collDisposicionfinalresiduosaseos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Disposicionfinalresiduosaseo object to this object
	 * through the Disposicionfinalresiduosaseo foreign key attribute.
	 *
	 * @param      Disposicionfinalresiduosaseo $l Disposicionfinalresiduosaseo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDisposicionfinalresiduosaseo(Disposicionfinalresiduosaseo $l)
	{
		if ($this->collDisposicionfinalresiduosaseos === null) {
			$this->initDisposicionfinalresiduosaseos();
		}
		if (!in_array($l, $this->collDisposicionfinalresiduosaseos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDisposicionfinalresiduosaseos, $l);
			$l->setEstadogeneral($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Estadogeneral is new, it will return
	 * an empty collection; or if this Estadogeneral has previously
	 * been saved, it will retrieve related Disposicionfinalresiduosaseos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Estadogeneral.
	 */
	public function getDisposicionfinalresiduosaseosJoinAutoridadambiental($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDisposicionfinalresiduosaseos === null) {
			if ($this->isNew()) {
				$this->collDisposicionfinalresiduosaseos = array();
			} else {

				$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID, $this->esg_id);

				$this->collDisposicionfinalresiduosaseos = DisposicionfinalresiduosaseoPeer::doSelectJoinAutoridadambiental($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID, $this->esg_id);

			if (!isset($this->lastDisposicionfinalresiduosaseoCriteria) || !$this->lastDisposicionfinalresiduosaseoCriteria->equals($criteria)) {
				$this->collDisposicionfinalresiduosaseos = DisposicionfinalresiduosaseoPeer::doSelectJoinAutoridadambiental($criteria, $con, $join_behavior);
			}
		}
		$this->lastDisposicionfinalresiduosaseoCriteria = $criteria;

		return $this->collDisposicionfinalresiduosaseos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Estadogeneral is new, it will return
	 * an empty collection; or if this Estadogeneral has previously
	 * been saved, it will retrieve related Disposicionfinalresiduosaseos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Estadogeneral.
	 */
	public function getDisposicionfinalresiduosaseosJoinDepartamento($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDisposicionfinalresiduosaseos === null) {
			if ($this->isNew()) {
				$this->collDisposicionfinalresiduosaseos = array();
			} else {

				$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID, $this->esg_id);

				$this->collDisposicionfinalresiduosaseos = DisposicionfinalresiduosaseoPeer::doSelectJoinDepartamento($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID, $this->esg_id);

			if (!isset($this->lastDisposicionfinalresiduosaseoCriteria) || !$this->lastDisposicionfinalresiduosaseoCriteria->equals($criteria)) {
				$this->collDisposicionfinalresiduosaseos = DisposicionfinalresiduosaseoPeer::doSelectJoinDepartamento($criteria, $con, $join_behavior);
			}
		}
		$this->lastDisposicionfinalresiduosaseoCriteria = $criteria;

		return $this->collDisposicionfinalresiduosaseos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Estadogeneral is new, it will return
	 * an empty collection; or if this Estadogeneral has previously
	 * been saved, it will retrieve related Disposicionfinalresiduosaseos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Estadogeneral.
	 */
	public function getDisposicionfinalresiduosaseosJoinMunicipio($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDisposicionfinalresiduosaseos === null) {
			if ($this->isNew()) {
				$this->collDisposicionfinalresiduosaseos = array();
			} else {

				$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID, $this->esg_id);

				$this->collDisposicionfinalresiduosaseos = DisposicionfinalresiduosaseoPeer::doSelectJoinMunicipio($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID, $this->esg_id);

			if (!isset($this->lastDisposicionfinalresiduosaseoCriteria) || !$this->lastDisposicionfinalresiduosaseoCriteria->equals($criteria)) {
				$this->collDisposicionfinalresiduosaseos = DisposicionfinalresiduosaseoPeer::doSelectJoinMunicipio($criteria, $con, $join_behavior);
			}
		}
		$this->lastDisposicionfinalresiduosaseoCriteria = $criteria;

		return $this->collDisposicionfinalresiduosaseos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Estadogeneral is new, it will return
	 * an empty collection; or if this Estadogeneral has previously
	 * been saved, it will retrieve related Disposicionfinalresiduosaseos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Estadogeneral.
	 */
	public function getDisposicionfinalresiduosaseosJoinTecnicooperativo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDisposicionfinalresiduosaseos === null) {
			if ($this->isNew()) {
				$this->collDisposicionfinalresiduosaseos = array();
			} else {

				$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID, $this->esg_id);

				$this->collDisposicionfinalresiduosaseos = DisposicionfinalresiduosaseoPeer::doSelectJoinTecnicooperativo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID, $this->esg_id);

			if (!isset($this->lastDisposicionfinalresiduosaseoCriteria) || !$this->lastDisposicionfinalresiduosaseoCriteria->equals($criteria)) {
				$this->collDisposicionfinalresiduosaseos = DisposicionfinalresiduosaseoPeer::doSelectJoinTecnicooperativo($criteria, $con, $join_behavior);
			}
		}
		$this->lastDisposicionfinalresiduosaseoCriteria = $criteria;

		return $this->collDisposicionfinalresiduosaseos;
	}

	/**
	 * Clears out the collTanques collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTanques()
	 */
	public function clearTanques()
	{
		$this->collTanques = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTanques collection (array).
	 *
	 * By default this just sets the collTanques collection to an empty array (like clearcollTanques());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTanques()
	{
		$this->collTanques = array();
	}

	/**
	 * Gets an array of Tanque objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Estadogeneral has previously been saved, it will retrieve
	 * related Tanques from storage. If this Estadogeneral is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tanque[]
	 * @throws     PropelException
	 */
	public function getTanques($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTanques === null) {
			if ($this->isNew()) {
			   $this->collTanques = array();
			} else {

				$criteria->add(TanquePeer::TAN_ESTADO_ID, $this->esg_id);

				TanquePeer::addSelectColumns($criteria);
				$this->collTanques = TanquePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TanquePeer::TAN_ESTADO_ID, $this->esg_id);

				TanquePeer::addSelectColumns($criteria);
				if (!isset($this->lastTanqueCriteria) || !$this->lastTanqueCriteria->equals($criteria)) {
					$this->collTanques = TanquePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTanqueCriteria = $criteria;
		return $this->collTanques;
	}

	/**
	 * Returns the number of related Tanque objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tanque objects.
	 * @throws     PropelException
	 */
	public function countTanques(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTanques === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TanquePeer::TAN_ESTADO_ID, $this->esg_id);

				$count = TanquePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TanquePeer::TAN_ESTADO_ID, $this->esg_id);

				if (!isset($this->lastTanqueCriteria) || !$this->lastTanqueCriteria->equals($criteria)) {
					$count = TanquePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTanques);
				}
			} else {
				$count = count($this->collTanques);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tanque object to this object
	 * through the Tanque foreign key attribute.
	 *
	 * @param      Tanque $l Tanque
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTanque(Tanque $l)
	{
		if ($this->collTanques === null) {
			$this->initTanques();
		}
		if (!in_array($l, $this->collTanques, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTanques, $l);
			$l->setEstadogeneral($this);
		}
	}

	/**
	 * Clears out the collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado()
	 */
	public function clearTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado()
	{
		$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado collection (array).
	 *
	 * By default this just sets the collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado collection to an empty array (like clearcollTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado()
	{
		$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado = array();
	}

	/**
	 * Gets an array of Tecnicooperativasolucioncolectivaalcantarillado objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Estadogeneral has previously been saved, it will retrieve
	 * related TecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado from storage. If this Estadogeneral is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tecnicooperativasolucioncolectivaalcantarillado[]
	 * @throws     PropelException
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado === null) {
			if ($this->isNew()) {
			   $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SANITARIO_ESTADO, $this->esg_id);

				TecnicooperativasolucioncolectivaalcantarilladoPeer::addSelectColumns($criteria);
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SANITARIO_ESTADO, $this->esg_id);

				TecnicooperativasolucioncolectivaalcantarilladoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSanitarioEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSanitarioEstadoCriteria->equals($criteria)) {
					$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSanitarioEstadoCriteria = $criteria;
		return $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado;
	}

	/**
	 * Returns the number of related Tecnicooperativasolucioncolectivaalcantarillado objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tecnicooperativasolucioncolectivaalcantarillado objects.
	 * @throws     PropelException
	 */
	public function countTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SANITARIO_ESTADO, $this->esg_id);

				$count = TecnicooperativasolucioncolectivaalcantarilladoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SANITARIO_ESTADO, $this->esg_id);

				if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSanitarioEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSanitarioEstadoCriteria->equals($criteria)) {
					$count = TecnicooperativasolucioncolectivaalcantarilladoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado);
				}
			} else {
				$count = count($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tecnicooperativasolucioncolectivaalcantarillado object to this object
	 * through the Tecnicooperativasolucioncolectivaalcantarillado foreign key attribute.
	 *
	 * @param      Tecnicooperativasolucioncolectivaalcantarillado $l Tecnicooperativasolucioncolectivaalcantarillado
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSanitarioEstado(Tecnicooperativasolucioncolectivaalcantarillado $l)
	{
		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado === null) {
			$this->initTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado();
		}
		if (!in_array($l, $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado, $l);
			$l->setEstadogeneralRelatedByToscaSanitarioEstado($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Estadogeneral is new, it will return
	 * an empty collection; or if this Estadogeneral has previously
	 * been saved, it will retrieve related TecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Estadogeneral.
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstadoJoinActividadesaejecutarporprestadoralcantarillado($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SANITARIO_ESTADO, $this->esg_id);

				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinActividadesaejecutarporprestadoralcantarillado($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SANITARIO_ESTADO, $this->esg_id);

			if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSanitarioEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSanitarioEstadoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinActividadesaejecutarporprestadoralcantarillado($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSanitarioEstadoCriteria = $criteria;

		return $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Estadogeneral is new, it will return
	 * an empty collection; or if this Estadogeneral has previously
	 * been saved, it will retrieve related TecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Estadogeneral.
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstadoJoinTecnicooperativo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SANITARIO_ESTADO, $this->esg_id);

				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinTecnicooperativo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SANITARIO_ESTADO, $this->esg_id);

			if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSanitarioEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSanitarioEstadoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinTecnicooperativo($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSanitarioEstadoCriteria = $criteria;

		return $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado;
	}

	/**
	 * Clears out the collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado()
	 */
	public function clearTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado()
	{
		$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado collection (array).
	 *
	 * By default this just sets the collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado collection to an empty array (like clearcollTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado()
	{
		$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado = array();
	}

	/**
	 * Gets an array of Tecnicooperativasolucioncolectivaalcantarillado objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Estadogeneral has previously been saved, it will retrieve
	 * related TecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado from storage. If this Estadogeneral is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tecnicooperativasolucioncolectivaalcantarillado[]
	 * @throws     PropelException
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado === null) {
			if ($this->isNew()) {
			   $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_PLUVIAL_ESTADO, $this->esg_id);

				TecnicooperativasolucioncolectivaalcantarilladoPeer::addSelectColumns($criteria);
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_PLUVIAL_ESTADO, $this->esg_id);

				TecnicooperativasolucioncolectivaalcantarilladoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaPluvialEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaPluvialEstadoCriteria->equals($criteria)) {
					$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaPluvialEstadoCriteria = $criteria;
		return $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado;
	}

	/**
	 * Returns the number of related Tecnicooperativasolucioncolectivaalcantarillado objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tecnicooperativasolucioncolectivaalcantarillado objects.
	 * @throws     PropelException
	 */
	public function countTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_PLUVIAL_ESTADO, $this->esg_id);

				$count = TecnicooperativasolucioncolectivaalcantarilladoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_PLUVIAL_ESTADO, $this->esg_id);

				if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaPluvialEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaPluvialEstadoCriteria->equals($criteria)) {
					$count = TecnicooperativasolucioncolectivaalcantarilladoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado);
				}
			} else {
				$count = count($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tecnicooperativasolucioncolectivaalcantarillado object to this object
	 * through the Tecnicooperativasolucioncolectivaalcantarillado foreign key attribute.
	 *
	 * @param      Tecnicooperativasolucioncolectivaalcantarillado $l Tecnicooperativasolucioncolectivaalcantarillado
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaPluvialEstado(Tecnicooperativasolucioncolectivaalcantarillado $l)
	{
		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado === null) {
			$this->initTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado();
		}
		if (!in_array($l, $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado, $l);
			$l->setEstadogeneralRelatedByToscaPluvialEstado($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Estadogeneral is new, it will return
	 * an empty collection; or if this Estadogeneral has previously
	 * been saved, it will retrieve related TecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Estadogeneral.
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstadoJoinActividadesaejecutarporprestadoralcantarillado($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_PLUVIAL_ESTADO, $this->esg_id);

				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinActividadesaejecutarporprestadoralcantarillado($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_PLUVIAL_ESTADO, $this->esg_id);

			if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaPluvialEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaPluvialEstadoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinActividadesaejecutarporprestadoralcantarillado($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaPluvialEstadoCriteria = $criteria;

		return $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Estadogeneral is new, it will return
	 * an empty collection; or if this Estadogeneral has previously
	 * been saved, it will retrieve related TecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Estadogeneral.
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstadoJoinTecnicooperativo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_PLUVIAL_ESTADO, $this->esg_id);

				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinTecnicooperativo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_PLUVIAL_ESTADO, $this->esg_id);

			if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaPluvialEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaPluvialEstadoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinTecnicooperativo($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaPluvialEstadoCriteria = $criteria;

		return $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado;
	}

	/**
	 * Clears out the collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado()
	 */
	public function clearTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado()
	{
		$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado collection (array).
	 *
	 * By default this just sets the collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado collection to an empty array (like clearcollTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado()
	{
		$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado = array();
	}

	/**
	 * Gets an array of Tecnicooperativasolucioncolectivaalcantarillado objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Estadogeneral has previously been saved, it will retrieve
	 * related TecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado from storage. If this Estadogeneral is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tecnicooperativasolucioncolectivaalcantarillado[]
	 * @throws     PropelException
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado === null) {
			if ($this->isNew()) {
			   $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_CONVENCIONAL_ESTADO, $this->esg_id);

				TecnicooperativasolucioncolectivaalcantarilladoPeer::addSelectColumns($criteria);
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_CONVENCIONAL_ESTADO, $this->esg_id);

				TecnicooperativasolucioncolectivaalcantarilladoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiConvencionalEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiConvencionalEstadoCriteria->equals($criteria)) {
					$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiConvencionalEstadoCriteria = $criteria;
		return $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado;
	}

	/**
	 * Returns the number of related Tecnicooperativasolucioncolectivaalcantarillado objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tecnicooperativasolucioncolectivaalcantarillado objects.
	 * @throws     PropelException
	 */
	public function countTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_CONVENCIONAL_ESTADO, $this->esg_id);

				$count = TecnicooperativasolucioncolectivaalcantarilladoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_CONVENCIONAL_ESTADO, $this->esg_id);

				if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiConvencionalEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiConvencionalEstadoCriteria->equals($criteria)) {
					$count = TecnicooperativasolucioncolectivaalcantarilladoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado);
				}
			} else {
				$count = count($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tecnicooperativasolucioncolectivaalcantarillado object to this object
	 * through the Tecnicooperativasolucioncolectivaalcantarillado foreign key attribute.
	 *
	 * @param      Tecnicooperativasolucioncolectivaalcantarillado $l Tecnicooperativasolucioncolectivaalcantarillado
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiConvencionalEstado(Tecnicooperativasolucioncolectivaalcantarillado $l)
	{
		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado === null) {
			$this->initTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado();
		}
		if (!in_array($l, $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado, $l);
			$l->setEstadogeneralRelatedByToscaCombiConvencionalEstado($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Estadogeneral is new, it will return
	 * an empty collection; or if this Estadogeneral has previously
	 * been saved, it will retrieve related TecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Estadogeneral.
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstadoJoinActividadesaejecutarporprestadoralcantarillado($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_CONVENCIONAL_ESTADO, $this->esg_id);

				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinActividadesaejecutarporprestadoralcantarillado($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_CONVENCIONAL_ESTADO, $this->esg_id);

			if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiConvencionalEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiConvencionalEstadoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinActividadesaejecutarporprestadoralcantarillado($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiConvencionalEstadoCriteria = $criteria;

		return $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Estadogeneral is new, it will return
	 * an empty collection; or if this Estadogeneral has previously
	 * been saved, it will retrieve related TecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Estadogeneral.
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstadoJoinTecnicooperativo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_CONVENCIONAL_ESTADO, $this->esg_id);

				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinTecnicooperativo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_CONVENCIONAL_ESTADO, $this->esg_id);

			if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiConvencionalEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiConvencionalEstadoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinTecnicooperativo($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiConvencionalEstadoCriteria = $criteria;

		return $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado;
	}

	/**
	 * Clears out the collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado()
	 */
	public function clearTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado()
	{
		$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado collection (array).
	 *
	 * By default this just sets the collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado collection to an empty array (like clearcollTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado()
	{
		$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado = array();
	}

	/**
	 * Gets an array of Tecnicooperativasolucioncolectivaalcantarillado objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Estadogeneral has previously been saved, it will retrieve
	 * related TecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado from storage. If this Estadogeneral is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tecnicooperativasolucioncolectivaalcantarillado[]
	 * @throws     PropelException
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado === null) {
			if ($this->isNew()) {
			   $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_NO_CONVENCIONAL_ESTADO, $this->esg_id);

				TecnicooperativasolucioncolectivaalcantarilladoPeer::addSelectColumns($criteria);
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_NO_CONVENCIONAL_ESTADO, $this->esg_id);

				TecnicooperativasolucioncolectivaalcantarilladoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiNoConvencionalEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiNoConvencionalEstadoCriteria->equals($criteria)) {
					$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiNoConvencionalEstadoCriteria = $criteria;
		return $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado;
	}

	/**
	 * Returns the number of related Tecnicooperativasolucioncolectivaalcantarillado objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tecnicooperativasolucioncolectivaalcantarillado objects.
	 * @throws     PropelException
	 */
	public function countTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_NO_CONVENCIONAL_ESTADO, $this->esg_id);

				$count = TecnicooperativasolucioncolectivaalcantarilladoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_NO_CONVENCIONAL_ESTADO, $this->esg_id);

				if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiNoConvencionalEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiNoConvencionalEstadoCriteria->equals($criteria)) {
					$count = TecnicooperativasolucioncolectivaalcantarilladoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado);
				}
			} else {
				$count = count($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tecnicooperativasolucioncolectivaalcantarillado object to this object
	 * through the Tecnicooperativasolucioncolectivaalcantarillado foreign key attribute.
	 *
	 * @param      Tecnicooperativasolucioncolectivaalcantarillado $l Tecnicooperativasolucioncolectivaalcantarillado
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiNoConvencionalEstado(Tecnicooperativasolucioncolectivaalcantarillado $l)
	{
		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado === null) {
			$this->initTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado();
		}
		if (!in_array($l, $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado, $l);
			$l->setEstadogeneralRelatedByToscaCombiNoConvencionalEstado($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Estadogeneral is new, it will return
	 * an empty collection; or if this Estadogeneral has previously
	 * been saved, it will retrieve related TecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Estadogeneral.
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstadoJoinActividadesaejecutarporprestadoralcantarillado($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_NO_CONVENCIONAL_ESTADO, $this->esg_id);

				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinActividadesaejecutarporprestadoralcantarillado($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_NO_CONVENCIONAL_ESTADO, $this->esg_id);

			if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiNoConvencionalEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiNoConvencionalEstadoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinActividadesaejecutarporprestadoralcantarillado($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiNoConvencionalEstadoCriteria = $criteria;

		return $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Estadogeneral is new, it will return
	 * an empty collection; or if this Estadogeneral has previously
	 * been saved, it will retrieve related TecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Estadogeneral.
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstadoJoinTecnicooperativo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_NO_CONVENCIONAL_ESTADO, $this->esg_id);

				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinTecnicooperativo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_NO_CONVENCIONAL_ESTADO, $this->esg_id);

			if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiNoConvencionalEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiNoConvencionalEstadoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinTecnicooperativo($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiNoConvencionalEstadoCriteria = $criteria;

		return $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado;
	}

	/**
	 * Clears out the collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado()
	 */
	public function clearTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado()
	{
		$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado collection (array).
	 *
	 * By default this just sets the collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado collection to an empty array (like clearcollTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado()
	{
		$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado = array();
	}

	/**
	 * Gets an array of Tecnicooperativasolucioncolectivaalcantarillado objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Estadogeneral has previously been saved, it will retrieve
	 * related TecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado from storage. If this Estadogeneral is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tecnicooperativasolucioncolectivaalcantarillado[]
	 * @throws     PropelException
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado === null) {
			if ($this->isNew()) {
			   $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIMPLIFICADO_ESTADO, $this->esg_id);

				TecnicooperativasolucioncolectivaalcantarilladoPeer::addSelectColumns($criteria);
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIMPLIFICADO_ESTADO, $this->esg_id);

				TecnicooperativasolucioncolectivaalcantarilladoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSimplificadoEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSimplificadoEstadoCriteria->equals($criteria)) {
					$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSimplificadoEstadoCriteria = $criteria;
		return $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado;
	}

	/**
	 * Returns the number of related Tecnicooperativasolucioncolectivaalcantarillado objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tecnicooperativasolucioncolectivaalcantarillado objects.
	 * @throws     PropelException
	 */
	public function countTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIMPLIFICADO_ESTADO, $this->esg_id);

				$count = TecnicooperativasolucioncolectivaalcantarilladoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIMPLIFICADO_ESTADO, $this->esg_id);

				if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSimplificadoEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSimplificadoEstadoCriteria->equals($criteria)) {
					$count = TecnicooperativasolucioncolectivaalcantarilladoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado);
				}
			} else {
				$count = count($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tecnicooperativasolucioncolectivaalcantarillado object to this object
	 * through the Tecnicooperativasolucioncolectivaalcantarillado foreign key attribute.
	 *
	 * @param      Tecnicooperativasolucioncolectivaalcantarillado $l Tecnicooperativasolucioncolectivaalcantarillado
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSimplificadoEstado(Tecnicooperativasolucioncolectivaalcantarillado $l)
	{
		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado === null) {
			$this->initTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado();
		}
		if (!in_array($l, $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado, $l);
			$l->setEstadogeneralRelatedByToscaSimplificadoEstado($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Estadogeneral is new, it will return
	 * an empty collection; or if this Estadogeneral has previously
	 * been saved, it will retrieve related TecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Estadogeneral.
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstadoJoinActividadesaejecutarporprestadoralcantarillado($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIMPLIFICADO_ESTADO, $this->esg_id);

				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinActividadesaejecutarporprestadoralcantarillado($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIMPLIFICADO_ESTADO, $this->esg_id);

			if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSimplificadoEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSimplificadoEstadoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinActividadesaejecutarporprestadoralcantarillado($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSimplificadoEstadoCriteria = $criteria;

		return $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Estadogeneral is new, it will return
	 * an empty collection; or if this Estadogeneral has previously
	 * been saved, it will retrieve related TecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Estadogeneral.
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstadoJoinTecnicooperativo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIMPLIFICADO_ESTADO, $this->esg_id);

				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinTecnicooperativo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIMPLIFICADO_ESTADO, $this->esg_id);

			if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSimplificadoEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSimplificadoEstadoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinTecnicooperativo($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSimplificadoEstadoCriteria = $criteria;

		return $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado;
	}

	/**
	 * Clears out the collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado()
	 */
	public function clearTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado()
	{
		$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado collection (array).
	 *
	 * By default this just sets the collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado collection to an empty array (like clearcollTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado()
	{
		$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado = array();
	}

	/**
	 * Gets an array of Tecnicooperativasolucioncolectivaalcantarillado objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Estadogeneral has previously been saved, it will retrieve
	 * related TecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado from storage. If this Estadogeneral is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tecnicooperativasolucioncolectivaalcantarillado[]
	 * @throws     PropelException
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado === null) {
			if ($this->isNew()) {
			   $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIN_ARRASTRE_SOLIDOS_ESTADO, $this->esg_id);

				TecnicooperativasolucioncolectivaalcantarilladoPeer::addSelectColumns($criteria);
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIN_ARRASTRE_SOLIDOS_ESTADO, $this->esg_id);

				TecnicooperativasolucioncolectivaalcantarilladoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSinArrastreSolidosEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSinArrastreSolidosEstadoCriteria->equals($criteria)) {
					$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSinArrastreSolidosEstadoCriteria = $criteria;
		return $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado;
	}

	/**
	 * Returns the number of related Tecnicooperativasolucioncolectivaalcantarillado objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tecnicooperativasolucioncolectivaalcantarillado objects.
	 * @throws     PropelException
	 */
	public function countTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIN_ARRASTRE_SOLIDOS_ESTADO, $this->esg_id);

				$count = TecnicooperativasolucioncolectivaalcantarilladoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIN_ARRASTRE_SOLIDOS_ESTADO, $this->esg_id);

				if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSinArrastreSolidosEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSinArrastreSolidosEstadoCriteria->equals($criteria)) {
					$count = TecnicooperativasolucioncolectivaalcantarilladoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado);
				}
			} else {
				$count = count($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tecnicooperativasolucioncolectivaalcantarillado object to this object
	 * through the Tecnicooperativasolucioncolectivaalcantarillado foreign key attribute.
	 *
	 * @param      Tecnicooperativasolucioncolectivaalcantarillado $l Tecnicooperativasolucioncolectivaalcantarillado
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSinArrastreSolidosEstado(Tecnicooperativasolucioncolectivaalcantarillado $l)
	{
		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado === null) {
			$this->initTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado();
		}
		if (!in_array($l, $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado, $l);
			$l->setEstadogeneralRelatedByToscaSinArrastreSolidosEstado($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Estadogeneral is new, it will return
	 * an empty collection; or if this Estadogeneral has previously
	 * been saved, it will retrieve related TecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Estadogeneral.
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstadoJoinActividadesaejecutarporprestadoralcantarillado($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIN_ARRASTRE_SOLIDOS_ESTADO, $this->esg_id);

				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinActividadesaejecutarporprestadoralcantarillado($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIN_ARRASTRE_SOLIDOS_ESTADO, $this->esg_id);

			if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSinArrastreSolidosEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSinArrastreSolidosEstadoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinActividadesaejecutarporprestadoralcantarillado($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSinArrastreSolidosEstadoCriteria = $criteria;

		return $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Estadogeneral is new, it will return
	 * an empty collection; or if this Estadogeneral has previously
	 * been saved, it will retrieve related TecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Estadogeneral.
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstadoJoinTecnicooperativo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIN_ARRASTRE_SOLIDOS_ESTADO, $this->esg_id);

				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinTecnicooperativo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIN_ARRASTRE_SOLIDOS_ESTADO, $this->esg_id);

			if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSinArrastreSolidosEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSinArrastreSolidosEstadoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinTecnicooperativo($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSinArrastreSolidosEstadoCriteria = $criteria;

		return $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado;
	}

	/**
	 * Clears out the collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado()
	 */
	public function clearTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado()
	{
		$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado collection (array).
	 *
	 * By default this just sets the collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado collection to an empty array (like clearcollTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado()
	{
		$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado = array();
	}

	/**
	 * Gets an array of Tecnicooperativasolucioncolectivaalcantarillado objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Estadogeneral has previously been saved, it will retrieve
	 * related TecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado from storage. If this Estadogeneral is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tecnicooperativasolucioncolectivaalcantarillado[]
	 * @throws     PropelException
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado === null) {
			if ($this->isNew()) {
			   $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_OTRO_ESTADO, $this->esg_id);

				TecnicooperativasolucioncolectivaalcantarilladoPeer::addSelectColumns($criteria);
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_OTRO_ESTADO, $this->esg_id);

				TecnicooperativasolucioncolectivaalcantarilladoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaOtroEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaOtroEstadoCriteria->equals($criteria)) {
					$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaOtroEstadoCriteria = $criteria;
		return $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado;
	}

	/**
	 * Returns the number of related Tecnicooperativasolucioncolectivaalcantarillado objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tecnicooperativasolucioncolectivaalcantarillado objects.
	 * @throws     PropelException
	 */
	public function countTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_OTRO_ESTADO, $this->esg_id);

				$count = TecnicooperativasolucioncolectivaalcantarilladoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_OTRO_ESTADO, $this->esg_id);

				if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaOtroEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaOtroEstadoCriteria->equals($criteria)) {
					$count = TecnicooperativasolucioncolectivaalcantarilladoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado);
				}
			} else {
				$count = count($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tecnicooperativasolucioncolectivaalcantarillado object to this object
	 * through the Tecnicooperativasolucioncolectivaalcantarillado foreign key attribute.
	 *
	 * @param      Tecnicooperativasolucioncolectivaalcantarillado $l Tecnicooperativasolucioncolectivaalcantarillado
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaOtroEstado(Tecnicooperativasolucioncolectivaalcantarillado $l)
	{
		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado === null) {
			$this->initTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado();
		}
		if (!in_array($l, $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado, $l);
			$l->setEstadogeneralRelatedByToscaOtroEstado($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Estadogeneral is new, it will return
	 * an empty collection; or if this Estadogeneral has previously
	 * been saved, it will retrieve related TecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Estadogeneral.
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstadoJoinActividadesaejecutarporprestadoralcantarillado($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_OTRO_ESTADO, $this->esg_id);

				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinActividadesaejecutarporprestadoralcantarillado($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_OTRO_ESTADO, $this->esg_id);

			if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaOtroEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaOtroEstadoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinActividadesaejecutarporprestadoralcantarillado($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaOtroEstadoCriteria = $criteria;

		return $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Estadogeneral is new, it will return
	 * an empty collection; or if this Estadogeneral has previously
	 * been saved, it will retrieve related TecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Estadogeneral.
	 */
	public function getTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstadoJoinTecnicooperativo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EstadogeneralPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado === null) {
			if ($this->isNew()) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado = array();
			} else {

				$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_OTRO_ESTADO, $this->esg_id);

				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinTecnicooperativo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_OTRO_ESTADO, $this->esg_id);

			if (!isset($this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaOtroEstadoCriteria) || !$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaOtroEstadoCriteria->equals($criteria)) {
				$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectJoinTecnicooperativo($criteria, $con, $join_behavior);
			}
		}
		$this->lastTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaOtroEstadoCriteria = $criteria;

		return $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collCaptacionsRelatedByCaptEstadoEstructuraId) {
				foreach ((array) $this->collCaptacionsRelatedByCaptEstadoEstructuraId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCaptacionsRelatedByCaptEstadoPozoId) {
				foreach ((array) $this->collCaptacionsRelatedByCaptEstadoPozoId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCaptacionsRelatedByCaptEstadoBombaId) {
				foreach ((array) $this->collCaptacionsRelatedByCaptEstadoBombaId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDisposicionfinalresiduosaseos) {
				foreach ((array) $this->collDisposicionfinalresiduosaseos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTanques) {
				foreach ((array) $this->collTanques as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado) {
				foreach ((array) $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado) {
				foreach ((array) $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado) {
				foreach ((array) $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado) {
				foreach ((array) $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado) {
				foreach ((array) $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado) {
				foreach ((array) $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado) {
				foreach ((array) $this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collCaptacionsRelatedByCaptEstadoEstructuraId = null;
		$this->collCaptacionsRelatedByCaptEstadoPozoId = null;
		$this->collCaptacionsRelatedByCaptEstadoBombaId = null;
		$this->collDisposicionfinalresiduosaseos = null;
		$this->collTanques = null;
		$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado = null;
		$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado = null;
		$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado = null;
		$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado = null;
		$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado = null;
		$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado = null;
		$this->collTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseEstadogeneral:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseEstadogeneral::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseEstadogeneral
