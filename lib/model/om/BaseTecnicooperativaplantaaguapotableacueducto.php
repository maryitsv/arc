<?php

/**
 * Base class that represents a row from the 'tecnicooperativaplantaaguapotableacueducto' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 07/17/10 19:39:25
 *
 * @package    lib.model.om
 */
abstract class BaseTecnicooperativaplantaaguapotableacueducto extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        TecnicooperativaplantaaguapotableacueductoPeer
	 */
	protected static $peer;

	/**
	 * The value for the topla_id field.
	 * @var        int
	 */
	protected $topla_id;

	/**
	 * The value for the topla_top_id field.
	 * @var        int
	 */
	protected $topla_top_id;

	/**
	 * The value for the topla_tecnologia_utilizada field.
	 * @var        string
	 */
	protected $topla_tecnologia_utilizada;

	/**
	 * The value for the topla_tecnologia_utilizada_cc field.
	 * @var        boolean
	 */
	protected $topla_tecnologia_utilizada_cc;

	/**
	 * The value for the topla_tecnologia_utilizada_fd field.
	 * @var        boolean
	 */
	protected $topla_tecnologia_utilizada_fd;

	/**
	 * The value for the topla_tecnologia_utilizada_pc field.
	 * @var        boolean
	 */
	protected $topla_tecnologia_utilizada_pc;

	/**
	 * The value for the topla_tecnologia_utilizada_fime field.
	 * @var        boolean
	 */
	protected $topla_tecnologia_utilizada_fime;

	/**
	 * The value for the topla_tecnologia_utilizada_ct field.
	 * @var        boolean
	 */
	protected $topla_tecnologia_utilizada_ct;

	/**
	 * The value for the topla_tecnologia_utilizada_rhm field.
	 * @var        boolean
	 */
	protected $topla_tecnologia_utilizada_rhm;

	/**
	 * The value for the topla_ciclo_completo field.
	 * @var        string
	 */
	protected $topla_ciclo_completo;

	/**
	 * The value for the topla_ciclo_completo_mr field.
	 * @var        boolean
	 */
	protected $topla_ciclo_completo_mr;

	/**
	 * The value for the topla_ciclo_completo_flh field.
	 * @var        boolean
	 */
	protected $topla_ciclo_completo_flh;

	/**
	 * The value for the topla_ciclo_completo_flm field.
	 * @var        boolean
	 */
	protected $topla_ciclo_completo_flm;

	/**
	 * The value for the topla_ciclo_completo_sd field.
	 * @var        boolean
	 */
	protected $topla_ciclo_completo_sd;

	/**
	 * The value for the topla_ciclo_completo_fr field.
	 * @var        boolean
	 */
	protected $topla_ciclo_completo_fr;

	/**
	 * The value for the topla_filtracion_directa field.
	 * @var        string
	 */
	protected $topla_filtracion_directa;

	/**
	 * The value for the topla_filtracion_directa_mr field.
	 * @var        boolean
	 */
	protected $topla_filtracion_directa_mr;

	/**
	 * The value for the topla_filtracion_directa_flh field.
	 * @var        boolean
	 */
	protected $topla_filtracion_directa_flh;

	/**
	 * The value for the topla_filtracion_directa_flm field.
	 * @var        boolean
	 */
	protected $topla_filtracion_directa_flm;

	/**
	 * The value for the topla_filtracion_directa_fr field.
	 * @var        boolean
	 */
	protected $topla_filtracion_directa_fr;

	/**
	 * The value for the topla_filtracion_multiples_etapas field.
	 * @var        string
	 */
	protected $topla_filtracion_multiples_etapas;

	/**
	 * The value for the topla_fime_fgd field.
	 * @var        boolean
	 */
	protected $topla_fime_fgd;

	/**
	 * The value for the topla_fime_fgac field.
	 * @var        boolean
	 */
	protected $topla_fime_fgac;

	/**
	 * The value for the topla_fime_fgas2 field.
	 * @var        boolean
	 */
	protected $topla_fime_fgas2;

	/**
	 * The value for the topla_fime_fgas3 field.
	 * @var        boolean
	 */
	protected $topla_fime_fgas3;

	/**
	 * The value for the topla_fime_fla field.
	 * @var        boolean
	 */
	protected $topla_fime_fla;

	/**
	 * The value for the topla_remocion_hierro_manganeso field.
	 * @var        string
	 */
	protected $topla_remocion_hierro_manganeso;

	/**
	 * The value for the topla_rhm_bandejas_cascadas field.
	 * @var        boolean
	 */
	protected $topla_rhm_bandejas_cascadas;

	/**
	 * The value for the topla_rhm_aspersores field.
	 * @var        boolean
	 */
	protected $topla_rhm_aspersores;

	/**
	 * The value for the topla_rhm_sd field.
	 * @var        boolean
	 */
	protected $topla_rhm_sd;

	/**
	 * The value for the topla_rhm_fr field.
	 * @var        boolean
	 */
	protected $topla_rhm_fr;

	/**
	 * The value for the topla_rhm_fime field.
	 * @var        boolean
	 */
	protected $topla_rhm_fime;

	/**
	 * The value for the topla_planta_ttmto_funciona field.
	 * @var        boolean
	 */
	protected $topla_planta_ttmto_funciona;

	/**
	 * The value for the topla_estructuras_medicion_cau field.
	 * @var        boolean
	 */
	protected $topla_estructuras_medicion_cau;

	/**
	 * @var        Tecnicooperativo
	 */
	protected $aTecnicooperativo;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'TecnicooperativaplantaaguapotableacueductoPeer';

	/**
	 * Get the [topla_id] column value.
	 * 
	 * @return     int
	 */
	public function getToplaId()
	{
		return $this->topla_id;
	}

	/**
	 * Get the [topla_top_id] column value.
	 * 
	 * @return     int
	 */
	public function getToplaTopId()
	{
		return $this->topla_top_id;
	}

	/**
	 * Get the [topla_tecnologia_utilizada] column value.
	 * 
	 * @return     string
	 */
	public function getToplaTecnologiaUtilizada()
	{
		return $this->topla_tecnologia_utilizada;
	}

	/**
	 * Get the [topla_tecnologia_utilizada_cc] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaTecnologiaUtilizadaCc()
	{
		return $this->topla_tecnologia_utilizada_cc;
	}

	/**
	 * Get the [topla_tecnologia_utilizada_fd] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaTecnologiaUtilizadaFd()
	{
		return $this->topla_tecnologia_utilizada_fd;
	}

	/**
	 * Get the [topla_tecnologia_utilizada_pc] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaTecnologiaUtilizadaPc()
	{
		return $this->topla_tecnologia_utilizada_pc;
	}

	/**
	 * Get the [topla_tecnologia_utilizada_fime] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaTecnologiaUtilizadaFime()
	{
		return $this->topla_tecnologia_utilizada_fime;
	}

	/**
	 * Get the [topla_tecnologia_utilizada_ct] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaTecnologiaUtilizadaCt()
	{
		return $this->topla_tecnologia_utilizada_ct;
	}

	/**
	 * Get the [topla_tecnologia_utilizada_rhm] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaTecnologiaUtilizadaRhm()
	{
		return $this->topla_tecnologia_utilizada_rhm;
	}

	/**
	 * Get the [topla_ciclo_completo] column value.
	 * 
	 * @return     string
	 */
	public function getToplaCicloCompleto()
	{
		return $this->topla_ciclo_completo;
	}

	/**
	 * Get the [topla_ciclo_completo_mr] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaCicloCompletoMr()
	{
		return $this->topla_ciclo_completo_mr;
	}

	/**
	 * Get the [topla_ciclo_completo_flh] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaCicloCompletoFlh()
	{
		return $this->topla_ciclo_completo_flh;
	}

	/**
	 * Get the [topla_ciclo_completo_flm] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaCicloCompletoFlm()
	{
		return $this->topla_ciclo_completo_flm;
	}

	/**
	 * Get the [topla_ciclo_completo_sd] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaCicloCompletoSd()
	{
		return $this->topla_ciclo_completo_sd;
	}

	/**
	 * Get the [topla_ciclo_completo_fr] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaCicloCompletoFr()
	{
		return $this->topla_ciclo_completo_fr;
	}

	/**
	 * Get the [topla_filtracion_directa] column value.
	 * 
	 * @return     string
	 */
	public function getToplaFiltracionDirecta()
	{
		return $this->topla_filtracion_directa;
	}

	/**
	 * Get the [topla_filtracion_directa_mr] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaFiltracionDirectaMr()
	{
		return $this->topla_filtracion_directa_mr;
	}

	/**
	 * Get the [topla_filtracion_directa_flh] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaFiltracionDirectaFlh()
	{
		return $this->topla_filtracion_directa_flh;
	}

	/**
	 * Get the [topla_filtracion_directa_flm] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaFiltracionDirectaFlm()
	{
		return $this->topla_filtracion_directa_flm;
	}

	/**
	 * Get the [topla_filtracion_directa_fr] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaFiltracionDirectaFr()
	{
		return $this->topla_filtracion_directa_fr;
	}

	/**
	 * Get the [topla_filtracion_multiples_etapas] column value.
	 * 
	 * @return     string
	 */
	public function getToplaFiltracionMultiplesEtapas()
	{
		return $this->topla_filtracion_multiples_etapas;
	}

	/**
	 * Get the [topla_fime_fgd] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaFimeFgd()
	{
		return $this->topla_fime_fgd;
	}

	/**
	 * Get the [topla_fime_fgac] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaFimeFgac()
	{
		return $this->topla_fime_fgac;
	}

	/**
	 * Get the [topla_fime_fgas2] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaFimeFgas2()
	{
		return $this->topla_fime_fgas2;
	}

	/**
	 * Get the [topla_fime_fgas3] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaFimeFgas3()
	{
		return $this->topla_fime_fgas3;
	}

	/**
	 * Get the [topla_fime_fla] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaFimeFla()
	{
		return $this->topla_fime_fla;
	}

	/**
	 * Get the [topla_remocion_hierro_manganeso] column value.
	 * 
	 * @return     string
	 */
	public function getToplaRemocionHierroManganeso()
	{
		return $this->topla_remocion_hierro_manganeso;
	}

	/**
	 * Get the [topla_rhm_bandejas_cascadas] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaRhmBandejasCascadas()
	{
		return $this->topla_rhm_bandejas_cascadas;
	}

	/**
	 * Get the [topla_rhm_aspersores] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaRhmAspersores()
	{
		return $this->topla_rhm_aspersores;
	}

	/**
	 * Get the [topla_rhm_sd] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaRhmSd()
	{
		return $this->topla_rhm_sd;
	}

	/**
	 * Get the [topla_rhm_fr] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaRhmFr()
	{
		return $this->topla_rhm_fr;
	}

	/**
	 * Get the [topla_rhm_fime] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaRhmFime()
	{
		return $this->topla_rhm_fime;
	}

	/**
	 * Get the [topla_planta_ttmto_funciona] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaPlantaTtmtoFunciona()
	{
		return $this->topla_planta_ttmto_funciona;
	}

	/**
	 * Get the [topla_estructuras_medicion_cau] column value.
	 * 
	 * @return     boolean
	 */
	public function getToplaEstructurasMedicionCau()
	{
		return $this->topla_estructuras_medicion_cau;
	}

	/**
	 * Set the value of [topla_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->topla_id !== $v) {
			$this->topla_id = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_ID;
		}

		return $this;
	} // setToplaId()

	/**
	 * Set the value of [topla_top_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaTopId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->topla_top_id !== $v) {
			$this->topla_top_id = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TOP_ID;
		}

		if ($this->aTecnicooperativo !== null && $this->aTecnicooperativo->getTopId() !== $v) {
			$this->aTecnicooperativo = null;
		}

		return $this;
	} // setToplaTopId()

	/**
	 * Set the value of [topla_tecnologia_utilizada] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaTecnologiaUtilizada($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->topla_tecnologia_utilizada !== $v) {
			$this->topla_tecnologia_utilizada = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TECNOLOGIA_UTILIZADA;
		}

		return $this;
	} // setToplaTecnologiaUtilizada()

	/**
	 * Set the value of [topla_tecnologia_utilizada_cc] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaTecnologiaUtilizadaCc($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_tecnologia_utilizada_cc !== $v) {
			$this->topla_tecnologia_utilizada_cc = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TECNOLOGIA_UTILIZADA_CC;
		}

		return $this;
	} // setToplaTecnologiaUtilizadaCc()

	/**
	 * Set the value of [topla_tecnologia_utilizada_fd] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaTecnologiaUtilizadaFd($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_tecnologia_utilizada_fd !== $v) {
			$this->topla_tecnologia_utilizada_fd = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TECNOLOGIA_UTILIZADA_FD;
		}

		return $this;
	} // setToplaTecnologiaUtilizadaFd()

	/**
	 * Set the value of [topla_tecnologia_utilizada_pc] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaTecnologiaUtilizadaPc($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_tecnologia_utilizada_pc !== $v) {
			$this->topla_tecnologia_utilizada_pc = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TECNOLOGIA_UTILIZADA_PC;
		}

		return $this;
	} // setToplaTecnologiaUtilizadaPc()

	/**
	 * Set the value of [topla_tecnologia_utilizada_fime] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaTecnologiaUtilizadaFime($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_tecnologia_utilizada_fime !== $v) {
			$this->topla_tecnologia_utilizada_fime = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TECNOLOGIA_UTILIZADA_FIME;
		}

		return $this;
	} // setToplaTecnologiaUtilizadaFime()

	/**
	 * Set the value of [topla_tecnologia_utilizada_ct] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaTecnologiaUtilizadaCt($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_tecnologia_utilizada_ct !== $v) {
			$this->topla_tecnologia_utilizada_ct = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TECNOLOGIA_UTILIZADA_CT;
		}

		return $this;
	} // setToplaTecnologiaUtilizadaCt()

	/**
	 * Set the value of [topla_tecnologia_utilizada_rhm] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaTecnologiaUtilizadaRhm($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_tecnologia_utilizada_rhm !== $v) {
			$this->topla_tecnologia_utilizada_rhm = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TECNOLOGIA_UTILIZADA_RHM;
		}

		return $this;
	} // setToplaTecnologiaUtilizadaRhm()

	/**
	 * Set the value of [topla_ciclo_completo] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaCicloCompleto($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->topla_ciclo_completo !== $v) {
			$this->topla_ciclo_completo = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_CICLO_COMPLETO;
		}

		return $this;
	} // setToplaCicloCompleto()

	/**
	 * Set the value of [topla_ciclo_completo_mr] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaCicloCompletoMr($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_ciclo_completo_mr !== $v) {
			$this->topla_ciclo_completo_mr = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_CICLO_COMPLETO_MR;
		}

		return $this;
	} // setToplaCicloCompletoMr()

	/**
	 * Set the value of [topla_ciclo_completo_flh] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaCicloCompletoFlh($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_ciclo_completo_flh !== $v) {
			$this->topla_ciclo_completo_flh = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_CICLO_COMPLETO_FLH;
		}

		return $this;
	} // setToplaCicloCompletoFlh()

	/**
	 * Set the value of [topla_ciclo_completo_flm] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaCicloCompletoFlm($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_ciclo_completo_flm !== $v) {
			$this->topla_ciclo_completo_flm = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_CICLO_COMPLETO_FLM;
		}

		return $this;
	} // setToplaCicloCompletoFlm()

	/**
	 * Set the value of [topla_ciclo_completo_sd] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaCicloCompletoSd($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_ciclo_completo_sd !== $v) {
			$this->topla_ciclo_completo_sd = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_CICLO_COMPLETO_SD;
		}

		return $this;
	} // setToplaCicloCompletoSd()

	/**
	 * Set the value of [topla_ciclo_completo_fr] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaCicloCompletoFr($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_ciclo_completo_fr !== $v) {
			$this->topla_ciclo_completo_fr = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_CICLO_COMPLETO_FR;
		}

		return $this;
	} // setToplaCicloCompletoFr()

	/**
	 * Set the value of [topla_filtracion_directa] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaFiltracionDirecta($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->topla_filtracion_directa !== $v) {
			$this->topla_filtracion_directa = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FILTRACION_DIRECTA;
		}

		return $this;
	} // setToplaFiltracionDirecta()

	/**
	 * Set the value of [topla_filtracion_directa_mr] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaFiltracionDirectaMr($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_filtracion_directa_mr !== $v) {
			$this->topla_filtracion_directa_mr = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FILTRACION_DIRECTA_MR;
		}

		return $this;
	} // setToplaFiltracionDirectaMr()

	/**
	 * Set the value of [topla_filtracion_directa_flh] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaFiltracionDirectaFlh($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_filtracion_directa_flh !== $v) {
			$this->topla_filtracion_directa_flh = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FILTRACION_DIRECTA_FLH;
		}

		return $this;
	} // setToplaFiltracionDirectaFlh()

	/**
	 * Set the value of [topla_filtracion_directa_flm] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaFiltracionDirectaFlm($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_filtracion_directa_flm !== $v) {
			$this->topla_filtracion_directa_flm = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FILTRACION_DIRECTA_FLM;
		}

		return $this;
	} // setToplaFiltracionDirectaFlm()

	/**
	 * Set the value of [topla_filtracion_directa_fr] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaFiltracionDirectaFr($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_filtracion_directa_fr !== $v) {
			$this->topla_filtracion_directa_fr = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FILTRACION_DIRECTA_FR;
		}

		return $this;
	} // setToplaFiltracionDirectaFr()

	/**
	 * Set the value of [topla_filtracion_multiples_etapas] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaFiltracionMultiplesEtapas($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->topla_filtracion_multiples_etapas !== $v) {
			$this->topla_filtracion_multiples_etapas = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FILTRACION_MULTIPLES_ETAPAS;
		}

		return $this;
	} // setToplaFiltracionMultiplesEtapas()

	/**
	 * Set the value of [topla_fime_fgd] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaFimeFgd($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_fime_fgd !== $v) {
			$this->topla_fime_fgd = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FIME_FGD;
		}

		return $this;
	} // setToplaFimeFgd()

	/**
	 * Set the value of [topla_fime_fgac] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaFimeFgac($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_fime_fgac !== $v) {
			$this->topla_fime_fgac = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FIME_FGAC;
		}

		return $this;
	} // setToplaFimeFgac()

	/**
	 * Set the value of [topla_fime_fgas2] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaFimeFgas2($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_fime_fgas2 !== $v) {
			$this->topla_fime_fgas2 = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FIME_FGAS2;
		}

		return $this;
	} // setToplaFimeFgas2()

	/**
	 * Set the value of [topla_fime_fgas3] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaFimeFgas3($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_fime_fgas3 !== $v) {
			$this->topla_fime_fgas3 = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FIME_FGAS3;
		}

		return $this;
	} // setToplaFimeFgas3()

	/**
	 * Set the value of [topla_fime_fla] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaFimeFla($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_fime_fla !== $v) {
			$this->topla_fime_fla = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FIME_FLA;
		}

		return $this;
	} // setToplaFimeFla()

	/**
	 * Set the value of [topla_remocion_hierro_manganeso] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaRemocionHierroManganeso($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->topla_remocion_hierro_manganeso !== $v) {
			$this->topla_remocion_hierro_manganeso = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_REMOCION_HIERRO_MANGANESO;
		}

		return $this;
	} // setToplaRemocionHierroManganeso()

	/**
	 * Set the value of [topla_rhm_bandejas_cascadas] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaRhmBandejasCascadas($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_rhm_bandejas_cascadas !== $v) {
			$this->topla_rhm_bandejas_cascadas = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_RHM_BANDEJAS_CASCADAS;
		}

		return $this;
	} // setToplaRhmBandejasCascadas()

	/**
	 * Set the value of [topla_rhm_aspersores] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaRhmAspersores($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_rhm_aspersores !== $v) {
			$this->topla_rhm_aspersores = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_RHM_ASPERSORES;
		}

		return $this;
	} // setToplaRhmAspersores()

	/**
	 * Set the value of [topla_rhm_sd] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaRhmSd($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_rhm_sd !== $v) {
			$this->topla_rhm_sd = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_RHM_SD;
		}

		return $this;
	} // setToplaRhmSd()

	/**
	 * Set the value of [topla_rhm_fr] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaRhmFr($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_rhm_fr !== $v) {
			$this->topla_rhm_fr = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_RHM_FR;
		}

		return $this;
	} // setToplaRhmFr()

	/**
	 * Set the value of [topla_rhm_fime] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaRhmFime($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_rhm_fime !== $v) {
			$this->topla_rhm_fime = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_RHM_FIME;
		}

		return $this;
	} // setToplaRhmFime()

	/**
	 * Set the value of [topla_planta_ttmto_funciona] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaPlantaTtmtoFunciona($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_planta_ttmto_funciona !== $v) {
			$this->topla_planta_ttmto_funciona = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_PLANTA_TTMTO_FUNCIONA;
		}

		return $this;
	} // setToplaPlantaTtmtoFunciona()

	/**
	 * Set the value of [topla_estructuras_medicion_cau] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 */
	public function setToplaEstructurasMedicionCau($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->topla_estructuras_medicion_cau !== $v) {
			$this->topla_estructuras_medicion_cau = $v;
			$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_ESTRUCTURAS_MEDICION_CAU;
		}

		return $this;
	} // setToplaEstructurasMedicionCau()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->topla_id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->topla_top_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->topla_tecnologia_utilizada = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->topla_tecnologia_utilizada_cc = ($row[$startcol + 3] !== null) ? (boolean) $row[$startcol + 3] : null;
			$this->topla_tecnologia_utilizada_fd = ($row[$startcol + 4] !== null) ? (boolean) $row[$startcol + 4] : null;
			$this->topla_tecnologia_utilizada_pc = ($row[$startcol + 5] !== null) ? (boolean) $row[$startcol + 5] : null;
			$this->topla_tecnologia_utilizada_fime = ($row[$startcol + 6] !== null) ? (boolean) $row[$startcol + 6] : null;
			$this->topla_tecnologia_utilizada_ct = ($row[$startcol + 7] !== null) ? (boolean) $row[$startcol + 7] : null;
			$this->topla_tecnologia_utilizada_rhm = ($row[$startcol + 8] !== null) ? (boolean) $row[$startcol + 8] : null;
			$this->topla_ciclo_completo = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->topla_ciclo_completo_mr = ($row[$startcol + 10] !== null) ? (boolean) $row[$startcol + 10] : null;
			$this->topla_ciclo_completo_flh = ($row[$startcol + 11] !== null) ? (boolean) $row[$startcol + 11] : null;
			$this->topla_ciclo_completo_flm = ($row[$startcol + 12] !== null) ? (boolean) $row[$startcol + 12] : null;
			$this->topla_ciclo_completo_sd = ($row[$startcol + 13] !== null) ? (boolean) $row[$startcol + 13] : null;
			$this->topla_ciclo_completo_fr = ($row[$startcol + 14] !== null) ? (boolean) $row[$startcol + 14] : null;
			$this->topla_filtracion_directa = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->topla_filtracion_directa_mr = ($row[$startcol + 16] !== null) ? (boolean) $row[$startcol + 16] : null;
			$this->topla_filtracion_directa_flh = ($row[$startcol + 17] !== null) ? (boolean) $row[$startcol + 17] : null;
			$this->topla_filtracion_directa_flm = ($row[$startcol + 18] !== null) ? (boolean) $row[$startcol + 18] : null;
			$this->topla_filtracion_directa_fr = ($row[$startcol + 19] !== null) ? (boolean) $row[$startcol + 19] : null;
			$this->topla_filtracion_multiples_etapas = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->topla_fime_fgd = ($row[$startcol + 21] !== null) ? (boolean) $row[$startcol + 21] : null;
			$this->topla_fime_fgac = ($row[$startcol + 22] !== null) ? (boolean) $row[$startcol + 22] : null;
			$this->topla_fime_fgas2 = ($row[$startcol + 23] !== null) ? (boolean) $row[$startcol + 23] : null;
			$this->topla_fime_fgas3 = ($row[$startcol + 24] !== null) ? (boolean) $row[$startcol + 24] : null;
			$this->topla_fime_fla = ($row[$startcol + 25] !== null) ? (boolean) $row[$startcol + 25] : null;
			$this->topla_remocion_hierro_manganeso = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->topla_rhm_bandejas_cascadas = ($row[$startcol + 27] !== null) ? (boolean) $row[$startcol + 27] : null;
			$this->topla_rhm_aspersores = ($row[$startcol + 28] !== null) ? (boolean) $row[$startcol + 28] : null;
			$this->topla_rhm_sd = ($row[$startcol + 29] !== null) ? (boolean) $row[$startcol + 29] : null;
			$this->topla_rhm_fr = ($row[$startcol + 30] !== null) ? (boolean) $row[$startcol + 30] : null;
			$this->topla_rhm_fime = ($row[$startcol + 31] !== null) ? (boolean) $row[$startcol + 31] : null;
			$this->topla_planta_ttmto_funciona = ($row[$startcol + 32] !== null) ? (boolean) $row[$startcol + 32] : null;
			$this->topla_estructuras_medicion_cau = ($row[$startcol + 33] !== null) ? (boolean) $row[$startcol + 33] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 34; // 34 = TecnicooperativaplantaaguapotableacueductoPeer::NUM_COLUMNS - TecnicooperativaplantaaguapotableacueductoPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Tecnicooperativaplantaaguapotableacueducto object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aTecnicooperativo !== null && $this->topla_top_id !== $this->aTecnicooperativo->getTopId()) {
			$this->aTecnicooperativo = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TecnicooperativaplantaaguapotableacueductoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = TecnicooperativaplantaaguapotableacueductoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aTecnicooperativo = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TecnicooperativaplantaaguapotableacueductoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTecnicooperativaplantaaguapotableacueducto:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				TecnicooperativaplantaaguapotableacueductoPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTecnicooperativaplantaaguapotableacueducto:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TecnicooperativaplantaaguapotableacueductoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTecnicooperativaplantaaguapotableacueducto:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTecnicooperativaplantaaguapotableacueducto:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				TecnicooperativaplantaaguapotableacueductoPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aTecnicooperativo !== null) {
				if ($this->aTecnicooperativo->isModified() || $this->aTecnicooperativo->isNew()) {
					$affectedRows += $this->aTecnicooperativo->save($con);
				}
				$this->setTecnicooperativo($this->aTecnicooperativo);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = TecnicooperativaplantaaguapotableacueductoPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setToplaId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += TecnicooperativaplantaaguapotableacueductoPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aTecnicooperativo !== null) {
				if (!$this->aTecnicooperativo->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTecnicooperativo->getValidationFailures());
				}
			}


			if (($retval = TecnicooperativaplantaaguapotableacueductoPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TecnicooperativaplantaaguapotableacueductoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getToplaId();
				break;
			case 1:
				return $this->getToplaTopId();
				break;
			case 2:
				return $this->getToplaTecnologiaUtilizada();
				break;
			case 3:
				return $this->getToplaTecnologiaUtilizadaCc();
				break;
			case 4:
				return $this->getToplaTecnologiaUtilizadaFd();
				break;
			case 5:
				return $this->getToplaTecnologiaUtilizadaPc();
				break;
			case 6:
				return $this->getToplaTecnologiaUtilizadaFime();
				break;
			case 7:
				return $this->getToplaTecnologiaUtilizadaCt();
				break;
			case 8:
				return $this->getToplaTecnologiaUtilizadaRhm();
				break;
			case 9:
				return $this->getToplaCicloCompleto();
				break;
			case 10:
				return $this->getToplaCicloCompletoMr();
				break;
			case 11:
				return $this->getToplaCicloCompletoFlh();
				break;
			case 12:
				return $this->getToplaCicloCompletoFlm();
				break;
			case 13:
				return $this->getToplaCicloCompletoSd();
				break;
			case 14:
				return $this->getToplaCicloCompletoFr();
				break;
			case 15:
				return $this->getToplaFiltracionDirecta();
				break;
			case 16:
				return $this->getToplaFiltracionDirectaMr();
				break;
			case 17:
				return $this->getToplaFiltracionDirectaFlh();
				break;
			case 18:
				return $this->getToplaFiltracionDirectaFlm();
				break;
			case 19:
				return $this->getToplaFiltracionDirectaFr();
				break;
			case 20:
				return $this->getToplaFiltracionMultiplesEtapas();
				break;
			case 21:
				return $this->getToplaFimeFgd();
				break;
			case 22:
				return $this->getToplaFimeFgac();
				break;
			case 23:
				return $this->getToplaFimeFgas2();
				break;
			case 24:
				return $this->getToplaFimeFgas3();
				break;
			case 25:
				return $this->getToplaFimeFla();
				break;
			case 26:
				return $this->getToplaRemocionHierroManganeso();
				break;
			case 27:
				return $this->getToplaRhmBandejasCascadas();
				break;
			case 28:
				return $this->getToplaRhmAspersores();
				break;
			case 29:
				return $this->getToplaRhmSd();
				break;
			case 30:
				return $this->getToplaRhmFr();
				break;
			case 31:
				return $this->getToplaRhmFime();
				break;
			case 32:
				return $this->getToplaPlantaTtmtoFunciona();
				break;
			case 33:
				return $this->getToplaEstructurasMedicionCau();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = TecnicooperativaplantaaguapotableacueductoPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getToplaId(),
			$keys[1] => $this->getToplaTopId(),
			$keys[2] => $this->getToplaTecnologiaUtilizada(),
			$keys[3] => $this->getToplaTecnologiaUtilizadaCc(),
			$keys[4] => $this->getToplaTecnologiaUtilizadaFd(),
			$keys[5] => $this->getToplaTecnologiaUtilizadaPc(),
			$keys[6] => $this->getToplaTecnologiaUtilizadaFime(),
			$keys[7] => $this->getToplaTecnologiaUtilizadaCt(),
			$keys[8] => $this->getToplaTecnologiaUtilizadaRhm(),
			$keys[9] => $this->getToplaCicloCompleto(),
			$keys[10] => $this->getToplaCicloCompletoMr(),
			$keys[11] => $this->getToplaCicloCompletoFlh(),
			$keys[12] => $this->getToplaCicloCompletoFlm(),
			$keys[13] => $this->getToplaCicloCompletoSd(),
			$keys[14] => $this->getToplaCicloCompletoFr(),
			$keys[15] => $this->getToplaFiltracionDirecta(),
			$keys[16] => $this->getToplaFiltracionDirectaMr(),
			$keys[17] => $this->getToplaFiltracionDirectaFlh(),
			$keys[18] => $this->getToplaFiltracionDirectaFlm(),
			$keys[19] => $this->getToplaFiltracionDirectaFr(),
			$keys[20] => $this->getToplaFiltracionMultiplesEtapas(),
			$keys[21] => $this->getToplaFimeFgd(),
			$keys[22] => $this->getToplaFimeFgac(),
			$keys[23] => $this->getToplaFimeFgas2(),
			$keys[24] => $this->getToplaFimeFgas3(),
			$keys[25] => $this->getToplaFimeFla(),
			$keys[26] => $this->getToplaRemocionHierroManganeso(),
			$keys[27] => $this->getToplaRhmBandejasCascadas(),
			$keys[28] => $this->getToplaRhmAspersores(),
			$keys[29] => $this->getToplaRhmSd(),
			$keys[30] => $this->getToplaRhmFr(),
			$keys[31] => $this->getToplaRhmFime(),
			$keys[32] => $this->getToplaPlantaTtmtoFunciona(),
			$keys[33] => $this->getToplaEstructurasMedicionCau(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TecnicooperativaplantaaguapotableacueductoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setToplaId($value);
				break;
			case 1:
				$this->setToplaTopId($value);
				break;
			case 2:
				$this->setToplaTecnologiaUtilizada($value);
				break;
			case 3:
				$this->setToplaTecnologiaUtilizadaCc($value);
				break;
			case 4:
				$this->setToplaTecnologiaUtilizadaFd($value);
				break;
			case 5:
				$this->setToplaTecnologiaUtilizadaPc($value);
				break;
			case 6:
				$this->setToplaTecnologiaUtilizadaFime($value);
				break;
			case 7:
				$this->setToplaTecnologiaUtilizadaCt($value);
				break;
			case 8:
				$this->setToplaTecnologiaUtilizadaRhm($value);
				break;
			case 9:
				$this->setToplaCicloCompleto($value);
				break;
			case 10:
				$this->setToplaCicloCompletoMr($value);
				break;
			case 11:
				$this->setToplaCicloCompletoFlh($value);
				break;
			case 12:
				$this->setToplaCicloCompletoFlm($value);
				break;
			case 13:
				$this->setToplaCicloCompletoSd($value);
				break;
			case 14:
				$this->setToplaCicloCompletoFr($value);
				break;
			case 15:
				$this->setToplaFiltracionDirecta($value);
				break;
			case 16:
				$this->setToplaFiltracionDirectaMr($value);
				break;
			case 17:
				$this->setToplaFiltracionDirectaFlh($value);
				break;
			case 18:
				$this->setToplaFiltracionDirectaFlm($value);
				break;
			case 19:
				$this->setToplaFiltracionDirectaFr($value);
				break;
			case 20:
				$this->setToplaFiltracionMultiplesEtapas($value);
				break;
			case 21:
				$this->setToplaFimeFgd($value);
				break;
			case 22:
				$this->setToplaFimeFgac($value);
				break;
			case 23:
				$this->setToplaFimeFgas2($value);
				break;
			case 24:
				$this->setToplaFimeFgas3($value);
				break;
			case 25:
				$this->setToplaFimeFla($value);
				break;
			case 26:
				$this->setToplaRemocionHierroManganeso($value);
				break;
			case 27:
				$this->setToplaRhmBandejasCascadas($value);
				break;
			case 28:
				$this->setToplaRhmAspersores($value);
				break;
			case 29:
				$this->setToplaRhmSd($value);
				break;
			case 30:
				$this->setToplaRhmFr($value);
				break;
			case 31:
				$this->setToplaRhmFime($value);
				break;
			case 32:
				$this->setToplaPlantaTtmtoFunciona($value);
				break;
			case 33:
				$this->setToplaEstructurasMedicionCau($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = TecnicooperativaplantaaguapotableacueductoPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setToplaId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setToplaTopId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setToplaTecnologiaUtilizada($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setToplaTecnologiaUtilizadaCc($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setToplaTecnologiaUtilizadaFd($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setToplaTecnologiaUtilizadaPc($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setToplaTecnologiaUtilizadaFime($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setToplaTecnologiaUtilizadaCt($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setToplaTecnologiaUtilizadaRhm($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setToplaCicloCompleto($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setToplaCicloCompletoMr($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setToplaCicloCompletoFlh($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setToplaCicloCompletoFlm($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setToplaCicloCompletoSd($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setToplaCicloCompletoFr($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setToplaFiltracionDirecta($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setToplaFiltracionDirectaMr($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setToplaFiltracionDirectaFlh($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setToplaFiltracionDirectaFlm($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setToplaFiltracionDirectaFr($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setToplaFiltracionMultiplesEtapas($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setToplaFimeFgd($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setToplaFimeFgac($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setToplaFimeFgas2($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setToplaFimeFgas3($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setToplaFimeFla($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setToplaRemocionHierroManganeso($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setToplaRhmBandejasCascadas($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setToplaRhmAspersores($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setToplaRhmSd($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setToplaRhmFr($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setToplaRhmFime($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setToplaPlantaTtmtoFunciona($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setToplaEstructurasMedicionCau($arr[$keys[33]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(TecnicooperativaplantaaguapotableacueductoPeer::DATABASE_NAME);

		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_ID)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_ID, $this->topla_id);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TOP_ID)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TOP_ID, $this->topla_top_id);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TECNOLOGIA_UTILIZADA)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TECNOLOGIA_UTILIZADA, $this->topla_tecnologia_utilizada);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TECNOLOGIA_UTILIZADA_CC)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TECNOLOGIA_UTILIZADA_CC, $this->topla_tecnologia_utilizada_cc);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TECNOLOGIA_UTILIZADA_FD)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TECNOLOGIA_UTILIZADA_FD, $this->topla_tecnologia_utilizada_fd);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TECNOLOGIA_UTILIZADA_PC)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TECNOLOGIA_UTILIZADA_PC, $this->topla_tecnologia_utilizada_pc);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TECNOLOGIA_UTILIZADA_FIME)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TECNOLOGIA_UTILIZADA_FIME, $this->topla_tecnologia_utilizada_fime);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TECNOLOGIA_UTILIZADA_CT)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TECNOLOGIA_UTILIZADA_CT, $this->topla_tecnologia_utilizada_ct);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TECNOLOGIA_UTILIZADA_RHM)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_TECNOLOGIA_UTILIZADA_RHM, $this->topla_tecnologia_utilizada_rhm);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_CICLO_COMPLETO)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_CICLO_COMPLETO, $this->topla_ciclo_completo);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_CICLO_COMPLETO_MR)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_CICLO_COMPLETO_MR, $this->topla_ciclo_completo_mr);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_CICLO_COMPLETO_FLH)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_CICLO_COMPLETO_FLH, $this->topla_ciclo_completo_flh);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_CICLO_COMPLETO_FLM)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_CICLO_COMPLETO_FLM, $this->topla_ciclo_completo_flm);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_CICLO_COMPLETO_SD)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_CICLO_COMPLETO_SD, $this->topla_ciclo_completo_sd);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_CICLO_COMPLETO_FR)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_CICLO_COMPLETO_FR, $this->topla_ciclo_completo_fr);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FILTRACION_DIRECTA)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FILTRACION_DIRECTA, $this->topla_filtracion_directa);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FILTRACION_DIRECTA_MR)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FILTRACION_DIRECTA_MR, $this->topla_filtracion_directa_mr);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FILTRACION_DIRECTA_FLH)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FILTRACION_DIRECTA_FLH, $this->topla_filtracion_directa_flh);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FILTRACION_DIRECTA_FLM)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FILTRACION_DIRECTA_FLM, $this->topla_filtracion_directa_flm);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FILTRACION_DIRECTA_FR)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FILTRACION_DIRECTA_FR, $this->topla_filtracion_directa_fr);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FILTRACION_MULTIPLES_ETAPAS)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FILTRACION_MULTIPLES_ETAPAS, $this->topla_filtracion_multiples_etapas);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FIME_FGD)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FIME_FGD, $this->topla_fime_fgd);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FIME_FGAC)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FIME_FGAC, $this->topla_fime_fgac);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FIME_FGAS2)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FIME_FGAS2, $this->topla_fime_fgas2);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FIME_FGAS3)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FIME_FGAS3, $this->topla_fime_fgas3);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FIME_FLA)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_FIME_FLA, $this->topla_fime_fla);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_REMOCION_HIERRO_MANGANESO)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_REMOCION_HIERRO_MANGANESO, $this->topla_remocion_hierro_manganeso);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_RHM_BANDEJAS_CASCADAS)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_RHM_BANDEJAS_CASCADAS, $this->topla_rhm_bandejas_cascadas);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_RHM_ASPERSORES)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_RHM_ASPERSORES, $this->topla_rhm_aspersores);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_RHM_SD)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_RHM_SD, $this->topla_rhm_sd);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_RHM_FR)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_RHM_FR, $this->topla_rhm_fr);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_RHM_FIME)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_RHM_FIME, $this->topla_rhm_fime);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_PLANTA_TTMTO_FUNCIONA)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_PLANTA_TTMTO_FUNCIONA, $this->topla_planta_ttmto_funciona);
		if ($this->isColumnModified(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_ESTRUCTURAS_MEDICION_CAU)) $criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_ESTRUCTURAS_MEDICION_CAU, $this->topla_estructuras_medicion_cau);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(TecnicooperativaplantaaguapotableacueductoPeer::DATABASE_NAME);

		$criteria->add(TecnicooperativaplantaaguapotableacueductoPeer::TOPLA_ID, $this->topla_id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getToplaId();
	}

	/**
	 * Generic method to set the primary key (topla_id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setToplaId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Tecnicooperativaplantaaguapotableacueducto (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setToplaTopId($this->topla_top_id);

		$copyObj->setToplaTecnologiaUtilizada($this->topla_tecnologia_utilizada);

		$copyObj->setToplaTecnologiaUtilizadaCc($this->topla_tecnologia_utilizada_cc);

		$copyObj->setToplaTecnologiaUtilizadaFd($this->topla_tecnologia_utilizada_fd);

		$copyObj->setToplaTecnologiaUtilizadaPc($this->topla_tecnologia_utilizada_pc);

		$copyObj->setToplaTecnologiaUtilizadaFime($this->topla_tecnologia_utilizada_fime);

		$copyObj->setToplaTecnologiaUtilizadaCt($this->topla_tecnologia_utilizada_ct);

		$copyObj->setToplaTecnologiaUtilizadaRhm($this->topla_tecnologia_utilizada_rhm);

		$copyObj->setToplaCicloCompleto($this->topla_ciclo_completo);

		$copyObj->setToplaCicloCompletoMr($this->topla_ciclo_completo_mr);

		$copyObj->setToplaCicloCompletoFlh($this->topla_ciclo_completo_flh);

		$copyObj->setToplaCicloCompletoFlm($this->topla_ciclo_completo_flm);

		$copyObj->setToplaCicloCompletoSd($this->topla_ciclo_completo_sd);

		$copyObj->setToplaCicloCompletoFr($this->topla_ciclo_completo_fr);

		$copyObj->setToplaFiltracionDirecta($this->topla_filtracion_directa);

		$copyObj->setToplaFiltracionDirectaMr($this->topla_filtracion_directa_mr);

		$copyObj->setToplaFiltracionDirectaFlh($this->topla_filtracion_directa_flh);

		$copyObj->setToplaFiltracionDirectaFlm($this->topla_filtracion_directa_flm);

		$copyObj->setToplaFiltracionDirectaFr($this->topla_filtracion_directa_fr);

		$copyObj->setToplaFiltracionMultiplesEtapas($this->topla_filtracion_multiples_etapas);

		$copyObj->setToplaFimeFgd($this->topla_fime_fgd);

		$copyObj->setToplaFimeFgac($this->topla_fime_fgac);

		$copyObj->setToplaFimeFgas2($this->topla_fime_fgas2);

		$copyObj->setToplaFimeFgas3($this->topla_fime_fgas3);

		$copyObj->setToplaFimeFla($this->topla_fime_fla);

		$copyObj->setToplaRemocionHierroManganeso($this->topla_remocion_hierro_manganeso);

		$copyObj->setToplaRhmBandejasCascadas($this->topla_rhm_bandejas_cascadas);

		$copyObj->setToplaRhmAspersores($this->topla_rhm_aspersores);

		$copyObj->setToplaRhmSd($this->topla_rhm_sd);

		$copyObj->setToplaRhmFr($this->topla_rhm_fr);

		$copyObj->setToplaRhmFime($this->topla_rhm_fime);

		$copyObj->setToplaPlantaTtmtoFunciona($this->topla_planta_ttmto_funciona);

		$copyObj->setToplaEstructurasMedicionCau($this->topla_estructuras_medicion_cau);


		$copyObj->setNew(true);

		$copyObj->setToplaId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Tecnicooperativaplantaaguapotableacueducto Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     TecnicooperativaplantaaguapotableacueductoPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new TecnicooperativaplantaaguapotableacueductoPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Tecnicooperativo object.
	 *
	 * @param      Tecnicooperativo $v
	 * @return     Tecnicooperativaplantaaguapotableacueducto The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTecnicooperativo(Tecnicooperativo $v = null)
	{
		if ($v === null) {
			$this->setToplaTopId(NULL);
		} else {
			$this->setToplaTopId($v->getTopId());
		}

		$this->aTecnicooperativo = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tecnicooperativo object, it will not be re-added.
		if ($v !== null) {
			$v->addTecnicooperativaplantaaguapotableacueducto($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tecnicooperativo object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tecnicooperativo The associated Tecnicooperativo object.
	 * @throws     PropelException
	 */
	public function getTecnicooperativo(PropelPDO $con = null)
	{
		if ($this->aTecnicooperativo === null && ($this->topla_top_id !== null)) {
			$this->aTecnicooperativo = TecnicooperativoPeer::retrieveByPk($this->topla_top_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTecnicooperativo->addTecnicooperativaplantaaguapotableacueductos($this);
			 */
		}
		return $this->aTecnicooperativo;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

			$this->aTecnicooperativo = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseTecnicooperativaplantaaguapotableacueducto:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseTecnicooperativaplantaaguapotableacueducto::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseTecnicooperativaplantaaguapotableacueducto
