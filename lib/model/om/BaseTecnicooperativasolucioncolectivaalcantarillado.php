<?php

/**
 * Base class that represents a row from the 'tecnicooperativasolucioncolectivaalcantarillado' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 07/28/10 12:35:52
 *
 * @package    lib.model.om
 */
abstract class BaseTecnicooperativasolucioncolectivaalcantarillado extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        TecnicooperativasolucioncolectivaalcantarilladoPeer
	 */
	protected static $peer;

	/**
	 * The value for the tosca_id field.
	 * @var        int
	 */
	protected $tosca_id;

	/**
	 * The value for the tosca_posee_alcantarillado_colectivo field.
	 * @var        string
	 */
	protected $tosca_posee_alcantarillado_colectivo;

	/**
	 * The value for the tosca_sanitario_funciona field.
	 * @var        string
	 */
	protected $tosca_sanitario_funciona;

	/**
	 * The value for the tosca_sanitario_numero_suscriptores field.
	 * @var        int
	 */
	protected $tosca_sanitario_numero_suscriptores;

	/**
	 * The value for the tosca_sanitario_se_usa field.
	 * @var        string
	 */
	protected $tosca_sanitario_se_usa;

	/**
	 * The value for the tosca_sanitario_estado field.
	 * @var        int
	 */
	protected $tosca_sanitario_estado;

	/**
	 * The value for the tosca_pluvial_funciona field.
	 * @var        string
	 */
	protected $tosca_pluvial_funciona;

	/**
	 * The value for the tosca_pluvial_numero_suscriptores field.
	 * @var        int
	 */
	protected $tosca_pluvial_numero_suscriptores;

	/**
	 * The value for the tosca_pluvial_se_usa field.
	 * @var        string
	 */
	protected $tosca_pluvial_se_usa;

	/**
	 * The value for the tosca_pluvial_estado field.
	 * @var        int
	 */
	protected $tosca_pluvial_estado;

	/**
	 * The value for the tosca_combi_convencional_funciona field.
	 * @var        string
	 */
	protected $tosca_combi_convencional_funciona;

	/**
	 * The value for the tosca_combi_convencional_numero_suscriptores field.
	 * @var        int
	 */
	protected $tosca_combi_convencional_numero_suscriptores;

	/**
	 * The value for the tosca_combi_convencional_se_usa field.
	 * @var        string
	 */
	protected $tosca_combi_convencional_se_usa;

	/**
	 * The value for the tosca_combi_convencional_estado field.
	 * @var        int
	 */
	protected $tosca_combi_convencional_estado;

	/**
	 * The value for the tosca_combi_no_convencional_funciona field.
	 * @var        string
	 */
	protected $tosca_combi_no_convencional_funciona;

	/**
	 * The value for the tosca_combi_no_convencional_numero_suscriptores field.
	 * @var        int
	 */
	protected $tosca_combi_no_convencional_numero_suscriptores;

	/**
	 * The value for the tosca_combi_no_convencional_se_usa field.
	 * @var        string
	 */
	protected $tosca_combi_no_convencional_se_usa;

	/**
	 * The value for the tosca_combi_no_convencional_estado field.
	 * @var        int
	 */
	protected $tosca_combi_no_convencional_estado;

	/**
	 * The value for the tosca_simplificado_funciona field.
	 * @var        string
	 */
	protected $tosca_simplificado_funciona;

	/**
	 * The value for the tosca_simplificado_numero_suscriptores field.
	 * @var        int
	 */
	protected $tosca_simplificado_numero_suscriptores;

	/**
	 * The value for the tosca_simplificado_se_usa field.
	 * @var        string
	 */
	protected $tosca_simplificado_se_usa;

	/**
	 * The value for the tosca_simplificado_estado field.
	 * @var        int
	 */
	protected $tosca_simplificado_estado;

	/**
	 * The value for the tosca_sin_arrastre_solidos_funciona field.
	 * @var        string
	 */
	protected $tosca_sin_arrastre_solidos_funciona;

	/**
	 * The value for the tosca_sin_arrastre_solidos_numero_suscriptores field.
	 * @var        int
	 */
	protected $tosca_sin_arrastre_solidos_numero_suscriptores;

	/**
	 * The value for the tosca_sin_arrastre_solidos_se_usa field.
	 * @var        string
	 */
	protected $tosca_sin_arrastre_solidos_se_usa;

	/**
	 * The value for the tosca_sin_arrastre_solidos_estado field.
	 * @var        int
	 */
	protected $tosca_sin_arrastre_solidos_estado;

	/**
	 * The value for the tosca_otro_cual field.
	 * @var        string
	 */
	protected $tosca_otro_cual;

	/**
	 * The value for the tosca_otro_funciona field.
	 * @var        string
	 */
	protected $tosca_otro_funciona;

	/**
	 * The value for the tosca_otro_numero_suscriptores field.
	 * @var        int
	 */
	protected $tosca_otro_numero_suscriptores;

	/**
	 * The value for the tosca_otro_se_usa field.
	 * @var        string
	 */
	protected $tosca_otro_se_usa;

	/**
	 * The value for the tosca_otro_estado field.
	 * @var        int
	 */
	protected $tosca_otro_estado;

	/**
	 * The value for the tosca_actividades_a_ejecutar field.
	 * @var        int
	 */
	protected $tosca_actividades_a_ejecutar;

	/**
	 * The value for the tosca_top_id field.
	 * @var        int
	 */
	protected $tosca_top_id;

	/**
	 * @var        Estadogeneral
	 */
	protected $aEstadogeneralRelatedByToscaSanitarioEstado;

	/**
	 * @var        Estadogeneral
	 */
	protected $aEstadogeneralRelatedByToscaPluvialEstado;

	/**
	 * @var        Estadogeneral
	 */
	protected $aEstadogeneralRelatedByToscaCombiConvencionalEstado;

	/**
	 * @var        Estadogeneral
	 */
	protected $aEstadogeneralRelatedByToscaCombiNoConvencionalEstado;

	/**
	 * @var        Estadogeneral
	 */
	protected $aEstadogeneralRelatedByToscaSimplificadoEstado;

	/**
	 * @var        Estadogeneral
	 */
	protected $aEstadogeneralRelatedByToscaSinArrastreSolidosEstado;

	/**
	 * @var        Estadogeneral
	 */
	protected $aEstadogeneralRelatedByToscaOtroEstado;

	/**
	 * @var        Actividadesaejecutarporprestadoralcantarillado
	 */
	protected $aActividadesaejecutarporprestadoralcantarillado;

	/**
	 * @var        Tecnicooperativo
	 */
	protected $aTecnicooperativo;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'TecnicooperativasolucioncolectivaalcantarilladoPeer';

	/**
	 * Get the [tosca_id] column value.
	 * 
	 * @return     int
	 */
	public function getToscaId()
	{
		return $this->tosca_id;
	}

	/**
	 * Get the [tosca_posee_alcantarillado_colectivo] column value.
	 * 
	 * @return     string
	 */
	public function getToscaPoseeAlcantarilladoColectivo()
	{
		return $this->tosca_posee_alcantarillado_colectivo;
	}

	/**
	 * Get the [tosca_sanitario_funciona] column value.
	 * 
	 * @return     string
	 */
	public function getToscaSanitarioFunciona()
	{
		return $this->tosca_sanitario_funciona;
	}

	/**
	 * Get the [tosca_sanitario_numero_suscriptores] column value.
	 * 
	 * @return     int
	 */
	public function getToscaSanitarioNumeroSuscriptores()
	{
		return $this->tosca_sanitario_numero_suscriptores;
	}

	/**
	 * Get the [tosca_sanitario_se_usa] column value.
	 * 
	 * @return     string
	 */
	public function getToscaSanitarioSeUsa()
	{
		return $this->tosca_sanitario_se_usa;
	}

	/**
	 * Get the [tosca_sanitario_estado] column value.
	 * 
	 * @return     int
	 */
	public function getToscaSanitarioEstado()
	{
		return $this->tosca_sanitario_estado;
	}

	/**
	 * Get the [tosca_pluvial_funciona] column value.
	 * 
	 * @return     string
	 */
	public function getToscaPluvialFunciona()
	{
		return $this->tosca_pluvial_funciona;
	}

	/**
	 * Get the [tosca_pluvial_numero_suscriptores] column value.
	 * 
	 * @return     int
	 */
	public function getToscaPluvialNumeroSuscriptores()
	{
		return $this->tosca_pluvial_numero_suscriptores;
	}

	/**
	 * Get the [tosca_pluvial_se_usa] column value.
	 * 
	 * @return     string
	 */
	public function getToscaPluvialSeUsa()
	{
		return $this->tosca_pluvial_se_usa;
	}

	/**
	 * Get the [tosca_pluvial_estado] column value.
	 * 
	 * @return     int
	 */
	public function getToscaPluvialEstado()
	{
		return $this->tosca_pluvial_estado;
	}

	/**
	 * Get the [tosca_combi_convencional_funciona] column value.
	 * 
	 * @return     string
	 */
	public function getToscaCombiConvencionalFunciona()
	{
		return $this->tosca_combi_convencional_funciona;
	}

	/**
	 * Get the [tosca_combi_convencional_numero_suscriptores] column value.
	 * 
	 * @return     int
	 */
	public function getToscaCombiConvencionalNumeroSuscriptores()
	{
		return $this->tosca_combi_convencional_numero_suscriptores;
	}

	/**
	 * Get the [tosca_combi_convencional_se_usa] column value.
	 * 
	 * @return     string
	 */
	public function getToscaCombiConvencionalSeUsa()
	{
		return $this->tosca_combi_convencional_se_usa;
	}

	/**
	 * Get the [tosca_combi_convencional_estado] column value.
	 * 
	 * @return     int
	 */
	public function getToscaCombiConvencionalEstado()
	{
		return $this->tosca_combi_convencional_estado;
	}

	/**
	 * Get the [tosca_combi_no_convencional_funciona] column value.
	 * 
	 * @return     string
	 */
	public function getToscaCombiNoConvencionalFunciona()
	{
		return $this->tosca_combi_no_convencional_funciona;
	}

	/**
	 * Get the [tosca_combi_no_convencional_numero_suscriptores] column value.
	 * 
	 * @return     int
	 */
	public function getToscaCombiNoConvencionalNumeroSuscriptores()
	{
		return $this->tosca_combi_no_convencional_numero_suscriptores;
	}

	/**
	 * Get the [tosca_combi_no_convencional_se_usa] column value.
	 * 
	 * @return     string
	 */
	public function getToscaCombiNoConvencionalSeUsa()
	{
		return $this->tosca_combi_no_convencional_se_usa;
	}

	/**
	 * Get the [tosca_combi_no_convencional_estado] column value.
	 * 
	 * @return     int
	 */
	public function getToscaCombiNoConvencionalEstado()
	{
		return $this->tosca_combi_no_convencional_estado;
	}

	/**
	 * Get the [tosca_simplificado_funciona] column value.
	 * 
	 * @return     string
	 */
	public function getToscaSimplificadoFunciona()
	{
		return $this->tosca_simplificado_funciona;
	}

	/**
	 * Get the [tosca_simplificado_numero_suscriptores] column value.
	 * 
	 * @return     int
	 */
	public function getToscaSimplificadoNumeroSuscriptores()
	{
		return $this->tosca_simplificado_numero_suscriptores;
	}

	/**
	 * Get the [tosca_simplificado_se_usa] column value.
	 * 
	 * @return     string
	 */
	public function getToscaSimplificadoSeUsa()
	{
		return $this->tosca_simplificado_se_usa;
	}

	/**
	 * Get the [tosca_simplificado_estado] column value.
	 * 
	 * @return     int
	 */
	public function getToscaSimplificadoEstado()
	{
		return $this->tosca_simplificado_estado;
	}

	/**
	 * Get the [tosca_sin_arrastre_solidos_funciona] column value.
	 * 
	 * @return     string
	 */
	public function getToscaSinArrastreSolidosFunciona()
	{
		return $this->tosca_sin_arrastre_solidos_funciona;
	}

	/**
	 * Get the [tosca_sin_arrastre_solidos_numero_suscriptores] column value.
	 * 
	 * @return     int
	 */
	public function getToscaSinArrastreSolidosNumeroSuscriptores()
	{
		return $this->tosca_sin_arrastre_solidos_numero_suscriptores;
	}

	/**
	 * Get the [tosca_sin_arrastre_solidos_se_usa] column value.
	 * 
	 * @return     string
	 */
	public function getToscaSinArrastreSolidosSeUsa()
	{
		return $this->tosca_sin_arrastre_solidos_se_usa;
	}

	/**
	 * Get the [tosca_sin_arrastre_solidos_estado] column value.
	 * 
	 * @return     int
	 */
	public function getToscaSinArrastreSolidosEstado()
	{
		return $this->tosca_sin_arrastre_solidos_estado;
	}

	/**
	 * Get the [tosca_otro_cual] column value.
	 * 
	 * @return     string
	 */
	public function getToscaOtroCual()
	{
		return $this->tosca_otro_cual;
	}

	/**
	 * Get the [tosca_otro_funciona] column value.
	 * 
	 * @return     string
	 */
	public function getToscaOtroFunciona()
	{
		return $this->tosca_otro_funciona;
	}

	/**
	 * Get the [tosca_otro_numero_suscriptores] column value.
	 * 
	 * @return     int
	 */
	public function getToscaOtroNumeroSuscriptores()
	{
		return $this->tosca_otro_numero_suscriptores;
	}

	/**
	 * Get the [tosca_otro_se_usa] column value.
	 * 
	 * @return     string
	 */
	public function getToscaOtroSeUsa()
	{
		return $this->tosca_otro_se_usa;
	}

	/**
	 * Get the [tosca_otro_estado] column value.
	 * 
	 * @return     int
	 */
	public function getToscaOtroEstado()
	{
		return $this->tosca_otro_estado;
	}

	/**
	 * Get the [tosca_actividades_a_ejecutar] column value.
	 * 
	 * @return     int
	 */
	public function getToscaActividadesAEjecutar()
	{
		return $this->tosca_actividades_a_ejecutar;
	}

	/**
	 * Get the [tosca_top_id] column value.
	 * 
	 * @return     int
	 */
	public function getToscaTopId()
	{
		return $this->tosca_top_id;
	}

	/**
	 * Set the value of [tosca_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tosca_id !== $v) {
			$this->tosca_id = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_ID;
		}

		return $this;
	} // setToscaId()

	/**
	 * Set the value of [tosca_posee_alcantarillado_colectivo] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaPoseeAlcantarilladoColectivo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tosca_posee_alcantarillado_colectivo !== $v) {
			$this->tosca_posee_alcantarillado_colectivo = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_POSEE_ALCANTARILLADO_COLECTIVO;
		}

		return $this;
	} // setToscaPoseeAlcantarilladoColectivo()

	/**
	 * Set the value of [tosca_sanitario_funciona] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaSanitarioFunciona($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tosca_sanitario_funciona !== $v) {
			$this->tosca_sanitario_funciona = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SANITARIO_FUNCIONA;
		}

		return $this;
	} // setToscaSanitarioFunciona()

	/**
	 * Set the value of [tosca_sanitario_numero_suscriptores] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaSanitarioNumeroSuscriptores($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tosca_sanitario_numero_suscriptores !== $v) {
			$this->tosca_sanitario_numero_suscriptores = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SANITARIO_NUMERO_SUSCRIPTORES;
		}

		return $this;
	} // setToscaSanitarioNumeroSuscriptores()

	/**
	 * Set the value of [tosca_sanitario_se_usa] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaSanitarioSeUsa($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tosca_sanitario_se_usa !== $v) {
			$this->tosca_sanitario_se_usa = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SANITARIO_SE_USA;
		}

		return $this;
	} // setToscaSanitarioSeUsa()

	/**
	 * Set the value of [tosca_sanitario_estado] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaSanitarioEstado($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tosca_sanitario_estado !== $v) {
			$this->tosca_sanitario_estado = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SANITARIO_ESTADO;
		}

		if ($this->aEstadogeneralRelatedByToscaSanitarioEstado !== null && $this->aEstadogeneralRelatedByToscaSanitarioEstado->getEsgId() !== $v) {
			$this->aEstadogeneralRelatedByToscaSanitarioEstado = null;
		}

		return $this;
	} // setToscaSanitarioEstado()

	/**
	 * Set the value of [tosca_pluvial_funciona] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaPluvialFunciona($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tosca_pluvial_funciona !== $v) {
			$this->tosca_pluvial_funciona = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_PLUVIAL_FUNCIONA;
		}

		return $this;
	} // setToscaPluvialFunciona()

	/**
	 * Set the value of [tosca_pluvial_numero_suscriptores] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaPluvialNumeroSuscriptores($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tosca_pluvial_numero_suscriptores !== $v) {
			$this->tosca_pluvial_numero_suscriptores = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_PLUVIAL_NUMERO_SUSCRIPTORES;
		}

		return $this;
	} // setToscaPluvialNumeroSuscriptores()

	/**
	 * Set the value of [tosca_pluvial_se_usa] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaPluvialSeUsa($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tosca_pluvial_se_usa !== $v) {
			$this->tosca_pluvial_se_usa = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_PLUVIAL_SE_USA;
		}

		return $this;
	} // setToscaPluvialSeUsa()

	/**
	 * Set the value of [tosca_pluvial_estado] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaPluvialEstado($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tosca_pluvial_estado !== $v) {
			$this->tosca_pluvial_estado = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_PLUVIAL_ESTADO;
		}

		if ($this->aEstadogeneralRelatedByToscaPluvialEstado !== null && $this->aEstadogeneralRelatedByToscaPluvialEstado->getEsgId() !== $v) {
			$this->aEstadogeneralRelatedByToscaPluvialEstado = null;
		}

		return $this;
	} // setToscaPluvialEstado()

	/**
	 * Set the value of [tosca_combi_convencional_funciona] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaCombiConvencionalFunciona($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tosca_combi_convencional_funciona !== $v) {
			$this->tosca_combi_convencional_funciona = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_CONVENCIONAL_FUNCIONA;
		}

		return $this;
	} // setToscaCombiConvencionalFunciona()

	/**
	 * Set the value of [tosca_combi_convencional_numero_suscriptores] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaCombiConvencionalNumeroSuscriptores($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tosca_combi_convencional_numero_suscriptores !== $v) {
			$this->tosca_combi_convencional_numero_suscriptores = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_CONVENCIONAL_NUMERO_SUSCRIPTORES;
		}

		return $this;
	} // setToscaCombiConvencionalNumeroSuscriptores()

	/**
	 * Set the value of [tosca_combi_convencional_se_usa] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaCombiConvencionalSeUsa($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tosca_combi_convencional_se_usa !== $v) {
			$this->tosca_combi_convencional_se_usa = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_CONVENCIONAL_SE_USA;
		}

		return $this;
	} // setToscaCombiConvencionalSeUsa()

	/**
	 * Set the value of [tosca_combi_convencional_estado] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaCombiConvencionalEstado($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tosca_combi_convencional_estado !== $v) {
			$this->tosca_combi_convencional_estado = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_CONVENCIONAL_ESTADO;
		}

		if ($this->aEstadogeneralRelatedByToscaCombiConvencionalEstado !== null && $this->aEstadogeneralRelatedByToscaCombiConvencionalEstado->getEsgId() !== $v) {
			$this->aEstadogeneralRelatedByToscaCombiConvencionalEstado = null;
		}

		return $this;
	} // setToscaCombiConvencionalEstado()

	/**
	 * Set the value of [tosca_combi_no_convencional_funciona] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaCombiNoConvencionalFunciona($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tosca_combi_no_convencional_funciona !== $v) {
			$this->tosca_combi_no_convencional_funciona = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_NO_CONVENCIONAL_FUNCIONA;
		}

		return $this;
	} // setToscaCombiNoConvencionalFunciona()

	/**
	 * Set the value of [tosca_combi_no_convencional_numero_suscriptores] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaCombiNoConvencionalNumeroSuscriptores($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tosca_combi_no_convencional_numero_suscriptores !== $v) {
			$this->tosca_combi_no_convencional_numero_suscriptores = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_NO_CONVENCIONAL_NUMERO_SUSCRIPTORES;
		}

		return $this;
	} // setToscaCombiNoConvencionalNumeroSuscriptores()

	/**
	 * Set the value of [tosca_combi_no_convencional_se_usa] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaCombiNoConvencionalSeUsa($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tosca_combi_no_convencional_se_usa !== $v) {
			$this->tosca_combi_no_convencional_se_usa = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_NO_CONVENCIONAL_SE_USA;
		}

		return $this;
	} // setToscaCombiNoConvencionalSeUsa()

	/**
	 * Set the value of [tosca_combi_no_convencional_estado] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaCombiNoConvencionalEstado($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tosca_combi_no_convencional_estado !== $v) {
			$this->tosca_combi_no_convencional_estado = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_NO_CONVENCIONAL_ESTADO;
		}

		if ($this->aEstadogeneralRelatedByToscaCombiNoConvencionalEstado !== null && $this->aEstadogeneralRelatedByToscaCombiNoConvencionalEstado->getEsgId() !== $v) {
			$this->aEstadogeneralRelatedByToscaCombiNoConvencionalEstado = null;
		}

		return $this;
	} // setToscaCombiNoConvencionalEstado()

	/**
	 * Set the value of [tosca_simplificado_funciona] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaSimplificadoFunciona($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tosca_simplificado_funciona !== $v) {
			$this->tosca_simplificado_funciona = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIMPLIFICADO_FUNCIONA;
		}

		return $this;
	} // setToscaSimplificadoFunciona()

	/**
	 * Set the value of [tosca_simplificado_numero_suscriptores] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaSimplificadoNumeroSuscriptores($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tosca_simplificado_numero_suscriptores !== $v) {
			$this->tosca_simplificado_numero_suscriptores = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIMPLIFICADO_NUMERO_SUSCRIPTORES;
		}

		return $this;
	} // setToscaSimplificadoNumeroSuscriptores()

	/**
	 * Set the value of [tosca_simplificado_se_usa] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaSimplificadoSeUsa($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tosca_simplificado_se_usa !== $v) {
			$this->tosca_simplificado_se_usa = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIMPLIFICADO_SE_USA;
		}

		return $this;
	} // setToscaSimplificadoSeUsa()

	/**
	 * Set the value of [tosca_simplificado_estado] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaSimplificadoEstado($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tosca_simplificado_estado !== $v) {
			$this->tosca_simplificado_estado = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIMPLIFICADO_ESTADO;
		}

		if ($this->aEstadogeneralRelatedByToscaSimplificadoEstado !== null && $this->aEstadogeneralRelatedByToscaSimplificadoEstado->getEsgId() !== $v) {
			$this->aEstadogeneralRelatedByToscaSimplificadoEstado = null;
		}

		return $this;
	} // setToscaSimplificadoEstado()

	/**
	 * Set the value of [tosca_sin_arrastre_solidos_funciona] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaSinArrastreSolidosFunciona($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tosca_sin_arrastre_solidos_funciona !== $v) {
			$this->tosca_sin_arrastre_solidos_funciona = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIN_ARRASTRE_SOLIDOS_FUNCIONA;
		}

		return $this;
	} // setToscaSinArrastreSolidosFunciona()

	/**
	 * Set the value of [tosca_sin_arrastre_solidos_numero_suscriptores] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaSinArrastreSolidosNumeroSuscriptores($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tosca_sin_arrastre_solidos_numero_suscriptores !== $v) {
			$this->tosca_sin_arrastre_solidos_numero_suscriptores = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIN_ARRASTRE_SOLIDOS_NUMERO_SUSCRIPTORES;
		}

		return $this;
	} // setToscaSinArrastreSolidosNumeroSuscriptores()

	/**
	 * Set the value of [tosca_sin_arrastre_solidos_se_usa] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaSinArrastreSolidosSeUsa($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tosca_sin_arrastre_solidos_se_usa !== $v) {
			$this->tosca_sin_arrastre_solidos_se_usa = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIN_ARRASTRE_SOLIDOS_SE_USA;
		}

		return $this;
	} // setToscaSinArrastreSolidosSeUsa()

	/**
	 * Set the value of [tosca_sin_arrastre_solidos_estado] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaSinArrastreSolidosEstado($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tosca_sin_arrastre_solidos_estado !== $v) {
			$this->tosca_sin_arrastre_solidos_estado = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIN_ARRASTRE_SOLIDOS_ESTADO;
		}

		if ($this->aEstadogeneralRelatedByToscaSinArrastreSolidosEstado !== null && $this->aEstadogeneralRelatedByToscaSinArrastreSolidosEstado->getEsgId() !== $v) {
			$this->aEstadogeneralRelatedByToscaSinArrastreSolidosEstado = null;
		}

		return $this;
	} // setToscaSinArrastreSolidosEstado()

	/**
	 * Set the value of [tosca_otro_cual] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaOtroCual($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tosca_otro_cual !== $v) {
			$this->tosca_otro_cual = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_OTRO_CUAL;
		}

		return $this;
	} // setToscaOtroCual()

	/**
	 * Set the value of [tosca_otro_funciona] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaOtroFunciona($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tosca_otro_funciona !== $v) {
			$this->tosca_otro_funciona = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_OTRO_FUNCIONA;
		}

		return $this;
	} // setToscaOtroFunciona()

	/**
	 * Set the value of [tosca_otro_numero_suscriptores] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaOtroNumeroSuscriptores($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tosca_otro_numero_suscriptores !== $v) {
			$this->tosca_otro_numero_suscriptores = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_OTRO_NUMERO_SUSCRIPTORES;
		}

		return $this;
	} // setToscaOtroNumeroSuscriptores()

	/**
	 * Set the value of [tosca_otro_se_usa] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaOtroSeUsa($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tosca_otro_se_usa !== $v) {
			$this->tosca_otro_se_usa = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_OTRO_SE_USA;
		}

		return $this;
	} // setToscaOtroSeUsa()

	/**
	 * Set the value of [tosca_otro_estado] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaOtroEstado($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tosca_otro_estado !== $v) {
			$this->tosca_otro_estado = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_OTRO_ESTADO;
		}

		if ($this->aEstadogeneralRelatedByToscaOtroEstado !== null && $this->aEstadogeneralRelatedByToscaOtroEstado->getEsgId() !== $v) {
			$this->aEstadogeneralRelatedByToscaOtroEstado = null;
		}

		return $this;
	} // setToscaOtroEstado()

	/**
	 * Set the value of [tosca_actividades_a_ejecutar] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaActividadesAEjecutar($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tosca_actividades_a_ejecutar !== $v) {
			$this->tosca_actividades_a_ejecutar = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_ACTIVIDADES_A_EJECUTAR;
		}

		if ($this->aActividadesaejecutarporprestadoralcantarillado !== null && $this->aActividadesaejecutarporprestadoralcantarillado->getAaepId() !== $v) {
			$this->aActividadesaejecutarporprestadoralcantarillado = null;
		}

		return $this;
	} // setToscaActividadesAEjecutar()

	/**
	 * Set the value of [tosca_top_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 */
	public function setToscaTopId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tosca_top_id !== $v) {
			$this->tosca_top_id = $v;
			$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_TOP_ID;
		}

		if ($this->aTecnicooperativo !== null && $this->aTecnicooperativo->getTopId() !== $v) {
			$this->aTecnicooperativo = null;
		}

		return $this;
	} // setToscaTopId()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->tosca_id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->tosca_posee_alcantarillado_colectivo = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->tosca_sanitario_funciona = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->tosca_sanitario_numero_suscriptores = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->tosca_sanitario_se_usa = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->tosca_sanitario_estado = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->tosca_pluvial_funciona = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->tosca_pluvial_numero_suscriptores = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->tosca_pluvial_se_usa = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->tosca_pluvial_estado = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->tosca_combi_convencional_funciona = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->tosca_combi_convencional_numero_suscriptores = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->tosca_combi_convencional_se_usa = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->tosca_combi_convencional_estado = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->tosca_combi_no_convencional_funciona = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->tosca_combi_no_convencional_numero_suscriptores = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->tosca_combi_no_convencional_se_usa = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->tosca_combi_no_convencional_estado = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->tosca_simplificado_funciona = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->tosca_simplificado_numero_suscriptores = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->tosca_simplificado_se_usa = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->tosca_simplificado_estado = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->tosca_sin_arrastre_solidos_funciona = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->tosca_sin_arrastre_solidos_numero_suscriptores = ($row[$startcol + 23] !== null) ? (int) $row[$startcol + 23] : null;
			$this->tosca_sin_arrastre_solidos_se_usa = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->tosca_sin_arrastre_solidos_estado = ($row[$startcol + 25] !== null) ? (int) $row[$startcol + 25] : null;
			$this->tosca_otro_cual = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->tosca_otro_funciona = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->tosca_otro_numero_suscriptores = ($row[$startcol + 28] !== null) ? (int) $row[$startcol + 28] : null;
			$this->tosca_otro_se_usa = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->tosca_otro_estado = ($row[$startcol + 30] !== null) ? (int) $row[$startcol + 30] : null;
			$this->tosca_actividades_a_ejecutar = ($row[$startcol + 31] !== null) ? (int) $row[$startcol + 31] : null;
			$this->tosca_top_id = ($row[$startcol + 32] !== null) ? (int) $row[$startcol + 32] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 33; // 33 = TecnicooperativasolucioncolectivaalcantarilladoPeer::NUM_COLUMNS - TecnicooperativasolucioncolectivaalcantarilladoPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Tecnicooperativasolucioncolectivaalcantarillado object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aEstadogeneralRelatedByToscaSanitarioEstado !== null && $this->tosca_sanitario_estado !== $this->aEstadogeneralRelatedByToscaSanitarioEstado->getEsgId()) {
			$this->aEstadogeneralRelatedByToscaSanitarioEstado = null;
		}
		if ($this->aEstadogeneralRelatedByToscaPluvialEstado !== null && $this->tosca_pluvial_estado !== $this->aEstadogeneralRelatedByToscaPluvialEstado->getEsgId()) {
			$this->aEstadogeneralRelatedByToscaPluvialEstado = null;
		}
		if ($this->aEstadogeneralRelatedByToscaCombiConvencionalEstado !== null && $this->tosca_combi_convencional_estado !== $this->aEstadogeneralRelatedByToscaCombiConvencionalEstado->getEsgId()) {
			$this->aEstadogeneralRelatedByToscaCombiConvencionalEstado = null;
		}
		if ($this->aEstadogeneralRelatedByToscaCombiNoConvencionalEstado !== null && $this->tosca_combi_no_convencional_estado !== $this->aEstadogeneralRelatedByToscaCombiNoConvencionalEstado->getEsgId()) {
			$this->aEstadogeneralRelatedByToscaCombiNoConvencionalEstado = null;
		}
		if ($this->aEstadogeneralRelatedByToscaSimplificadoEstado !== null && $this->tosca_simplificado_estado !== $this->aEstadogeneralRelatedByToscaSimplificadoEstado->getEsgId()) {
			$this->aEstadogeneralRelatedByToscaSimplificadoEstado = null;
		}
		if ($this->aEstadogeneralRelatedByToscaSinArrastreSolidosEstado !== null && $this->tosca_sin_arrastre_solidos_estado !== $this->aEstadogeneralRelatedByToscaSinArrastreSolidosEstado->getEsgId()) {
			$this->aEstadogeneralRelatedByToscaSinArrastreSolidosEstado = null;
		}
		if ($this->aEstadogeneralRelatedByToscaOtroEstado !== null && $this->tosca_otro_estado !== $this->aEstadogeneralRelatedByToscaOtroEstado->getEsgId()) {
			$this->aEstadogeneralRelatedByToscaOtroEstado = null;
		}
		if ($this->aActividadesaejecutarporprestadoralcantarillado !== null && $this->tosca_actividades_a_ejecutar !== $this->aActividadesaejecutarporprestadoralcantarillado->getAaepId()) {
			$this->aActividadesaejecutarporprestadoralcantarillado = null;
		}
		if ($this->aTecnicooperativo !== null && $this->tosca_top_id !== $this->aTecnicooperativo->getTopId()) {
			$this->aTecnicooperativo = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TecnicooperativasolucioncolectivaalcantarilladoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = TecnicooperativasolucioncolectivaalcantarilladoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aEstadogeneralRelatedByToscaSanitarioEstado = null;
			$this->aEstadogeneralRelatedByToscaPluvialEstado = null;
			$this->aEstadogeneralRelatedByToscaCombiConvencionalEstado = null;
			$this->aEstadogeneralRelatedByToscaCombiNoConvencionalEstado = null;
			$this->aEstadogeneralRelatedByToscaSimplificadoEstado = null;
			$this->aEstadogeneralRelatedByToscaSinArrastreSolidosEstado = null;
			$this->aEstadogeneralRelatedByToscaOtroEstado = null;
			$this->aActividadesaejecutarporprestadoralcantarillado = null;
			$this->aTecnicooperativo = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TecnicooperativasolucioncolectivaalcantarilladoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTecnicooperativasolucioncolectivaalcantarillado:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				TecnicooperativasolucioncolectivaalcantarilladoPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTecnicooperativasolucioncolectivaalcantarillado:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TecnicooperativasolucioncolectivaalcantarilladoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTecnicooperativasolucioncolectivaalcantarillado:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTecnicooperativasolucioncolectivaalcantarillado:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				TecnicooperativasolucioncolectivaalcantarilladoPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aEstadogeneralRelatedByToscaSanitarioEstado !== null) {
				if ($this->aEstadogeneralRelatedByToscaSanitarioEstado->isModified() || $this->aEstadogeneralRelatedByToscaSanitarioEstado->isNew()) {
					$affectedRows += $this->aEstadogeneralRelatedByToscaSanitarioEstado->save($con);
				}
				$this->setEstadogeneralRelatedByToscaSanitarioEstado($this->aEstadogeneralRelatedByToscaSanitarioEstado);
			}

			if ($this->aEstadogeneralRelatedByToscaPluvialEstado !== null) {
				if ($this->aEstadogeneralRelatedByToscaPluvialEstado->isModified() || $this->aEstadogeneralRelatedByToscaPluvialEstado->isNew()) {
					$affectedRows += $this->aEstadogeneralRelatedByToscaPluvialEstado->save($con);
				}
				$this->setEstadogeneralRelatedByToscaPluvialEstado($this->aEstadogeneralRelatedByToscaPluvialEstado);
			}

			if ($this->aEstadogeneralRelatedByToscaCombiConvencionalEstado !== null) {
				if ($this->aEstadogeneralRelatedByToscaCombiConvencionalEstado->isModified() || $this->aEstadogeneralRelatedByToscaCombiConvencionalEstado->isNew()) {
					$affectedRows += $this->aEstadogeneralRelatedByToscaCombiConvencionalEstado->save($con);
				}
				$this->setEstadogeneralRelatedByToscaCombiConvencionalEstado($this->aEstadogeneralRelatedByToscaCombiConvencionalEstado);
			}

			if ($this->aEstadogeneralRelatedByToscaCombiNoConvencionalEstado !== null) {
				if ($this->aEstadogeneralRelatedByToscaCombiNoConvencionalEstado->isModified() || $this->aEstadogeneralRelatedByToscaCombiNoConvencionalEstado->isNew()) {
					$affectedRows += $this->aEstadogeneralRelatedByToscaCombiNoConvencionalEstado->save($con);
				}
				$this->setEstadogeneralRelatedByToscaCombiNoConvencionalEstado($this->aEstadogeneralRelatedByToscaCombiNoConvencionalEstado);
			}

			if ($this->aEstadogeneralRelatedByToscaSimplificadoEstado !== null) {
				if ($this->aEstadogeneralRelatedByToscaSimplificadoEstado->isModified() || $this->aEstadogeneralRelatedByToscaSimplificadoEstado->isNew()) {
					$affectedRows += $this->aEstadogeneralRelatedByToscaSimplificadoEstado->save($con);
				}
				$this->setEstadogeneralRelatedByToscaSimplificadoEstado($this->aEstadogeneralRelatedByToscaSimplificadoEstado);
			}

			if ($this->aEstadogeneralRelatedByToscaSinArrastreSolidosEstado !== null) {
				if ($this->aEstadogeneralRelatedByToscaSinArrastreSolidosEstado->isModified() || $this->aEstadogeneralRelatedByToscaSinArrastreSolidosEstado->isNew()) {
					$affectedRows += $this->aEstadogeneralRelatedByToscaSinArrastreSolidosEstado->save($con);
				}
				$this->setEstadogeneralRelatedByToscaSinArrastreSolidosEstado($this->aEstadogeneralRelatedByToscaSinArrastreSolidosEstado);
			}

			if ($this->aEstadogeneralRelatedByToscaOtroEstado !== null) {
				if ($this->aEstadogeneralRelatedByToscaOtroEstado->isModified() || $this->aEstadogeneralRelatedByToscaOtroEstado->isNew()) {
					$affectedRows += $this->aEstadogeneralRelatedByToscaOtroEstado->save($con);
				}
				$this->setEstadogeneralRelatedByToscaOtroEstado($this->aEstadogeneralRelatedByToscaOtroEstado);
			}

			if ($this->aActividadesaejecutarporprestadoralcantarillado !== null) {
				if ($this->aActividadesaejecutarporprestadoralcantarillado->isModified() || $this->aActividadesaejecutarporprestadoralcantarillado->isNew()) {
					$affectedRows += $this->aActividadesaejecutarporprestadoralcantarillado->save($con);
				}
				$this->setActividadesaejecutarporprestadoralcantarillado($this->aActividadesaejecutarporprestadoralcantarillado);
			}

			if ($this->aTecnicooperativo !== null) {
				if ($this->aTecnicooperativo->isModified() || $this->aTecnicooperativo->isNew()) {
					$affectedRows += $this->aTecnicooperativo->save($con);
				}
				$this->setTecnicooperativo($this->aTecnicooperativo);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = TecnicooperativasolucioncolectivaalcantarilladoPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setToscaId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += TecnicooperativasolucioncolectivaalcantarilladoPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aEstadogeneralRelatedByToscaSanitarioEstado !== null) {
				if (!$this->aEstadogeneralRelatedByToscaSanitarioEstado->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aEstadogeneralRelatedByToscaSanitarioEstado->getValidationFailures());
				}
			}

			if ($this->aEstadogeneralRelatedByToscaPluvialEstado !== null) {
				if (!$this->aEstadogeneralRelatedByToscaPluvialEstado->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aEstadogeneralRelatedByToscaPluvialEstado->getValidationFailures());
				}
			}

			if ($this->aEstadogeneralRelatedByToscaCombiConvencionalEstado !== null) {
				if (!$this->aEstadogeneralRelatedByToscaCombiConvencionalEstado->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aEstadogeneralRelatedByToscaCombiConvencionalEstado->getValidationFailures());
				}
			}

			if ($this->aEstadogeneralRelatedByToscaCombiNoConvencionalEstado !== null) {
				if (!$this->aEstadogeneralRelatedByToscaCombiNoConvencionalEstado->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aEstadogeneralRelatedByToscaCombiNoConvencionalEstado->getValidationFailures());
				}
			}

			if ($this->aEstadogeneralRelatedByToscaSimplificadoEstado !== null) {
				if (!$this->aEstadogeneralRelatedByToscaSimplificadoEstado->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aEstadogeneralRelatedByToscaSimplificadoEstado->getValidationFailures());
				}
			}

			if ($this->aEstadogeneralRelatedByToscaSinArrastreSolidosEstado !== null) {
				if (!$this->aEstadogeneralRelatedByToscaSinArrastreSolidosEstado->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aEstadogeneralRelatedByToscaSinArrastreSolidosEstado->getValidationFailures());
				}
			}

			if ($this->aEstadogeneralRelatedByToscaOtroEstado !== null) {
				if (!$this->aEstadogeneralRelatedByToscaOtroEstado->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aEstadogeneralRelatedByToscaOtroEstado->getValidationFailures());
				}
			}

			if ($this->aActividadesaejecutarporprestadoralcantarillado !== null) {
				if (!$this->aActividadesaejecutarporprestadoralcantarillado->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aActividadesaejecutarporprestadoralcantarillado->getValidationFailures());
				}
			}

			if ($this->aTecnicooperativo !== null) {
				if (!$this->aTecnicooperativo->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTecnicooperativo->getValidationFailures());
				}
			}


			if (($retval = TecnicooperativasolucioncolectivaalcantarilladoPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TecnicooperativasolucioncolectivaalcantarilladoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getToscaId();
				break;
			case 1:
				return $this->getToscaPoseeAlcantarilladoColectivo();
				break;
			case 2:
				return $this->getToscaSanitarioFunciona();
				break;
			case 3:
				return $this->getToscaSanitarioNumeroSuscriptores();
				break;
			case 4:
				return $this->getToscaSanitarioSeUsa();
				break;
			case 5:
				return $this->getToscaSanitarioEstado();
				break;
			case 6:
				return $this->getToscaPluvialFunciona();
				break;
			case 7:
				return $this->getToscaPluvialNumeroSuscriptores();
				break;
			case 8:
				return $this->getToscaPluvialSeUsa();
				break;
			case 9:
				return $this->getToscaPluvialEstado();
				break;
			case 10:
				return $this->getToscaCombiConvencionalFunciona();
				break;
			case 11:
				return $this->getToscaCombiConvencionalNumeroSuscriptores();
				break;
			case 12:
				return $this->getToscaCombiConvencionalSeUsa();
				break;
			case 13:
				return $this->getToscaCombiConvencionalEstado();
				break;
			case 14:
				return $this->getToscaCombiNoConvencionalFunciona();
				break;
			case 15:
				return $this->getToscaCombiNoConvencionalNumeroSuscriptores();
				break;
			case 16:
				return $this->getToscaCombiNoConvencionalSeUsa();
				break;
			case 17:
				return $this->getToscaCombiNoConvencionalEstado();
				break;
			case 18:
				return $this->getToscaSimplificadoFunciona();
				break;
			case 19:
				return $this->getToscaSimplificadoNumeroSuscriptores();
				break;
			case 20:
				return $this->getToscaSimplificadoSeUsa();
				break;
			case 21:
				return $this->getToscaSimplificadoEstado();
				break;
			case 22:
				return $this->getToscaSinArrastreSolidosFunciona();
				break;
			case 23:
				return $this->getToscaSinArrastreSolidosNumeroSuscriptores();
				break;
			case 24:
				return $this->getToscaSinArrastreSolidosSeUsa();
				break;
			case 25:
				return $this->getToscaSinArrastreSolidosEstado();
				break;
			case 26:
				return $this->getToscaOtroCual();
				break;
			case 27:
				return $this->getToscaOtroFunciona();
				break;
			case 28:
				return $this->getToscaOtroNumeroSuscriptores();
				break;
			case 29:
				return $this->getToscaOtroSeUsa();
				break;
			case 30:
				return $this->getToscaOtroEstado();
				break;
			case 31:
				return $this->getToscaActividadesAEjecutar();
				break;
			case 32:
				return $this->getToscaTopId();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = TecnicooperativasolucioncolectivaalcantarilladoPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getToscaId(),
			$keys[1] => $this->getToscaPoseeAlcantarilladoColectivo(),
			$keys[2] => $this->getToscaSanitarioFunciona(),
			$keys[3] => $this->getToscaSanitarioNumeroSuscriptores(),
			$keys[4] => $this->getToscaSanitarioSeUsa(),
			$keys[5] => $this->getToscaSanitarioEstado(),
			$keys[6] => $this->getToscaPluvialFunciona(),
			$keys[7] => $this->getToscaPluvialNumeroSuscriptores(),
			$keys[8] => $this->getToscaPluvialSeUsa(),
			$keys[9] => $this->getToscaPluvialEstado(),
			$keys[10] => $this->getToscaCombiConvencionalFunciona(),
			$keys[11] => $this->getToscaCombiConvencionalNumeroSuscriptores(),
			$keys[12] => $this->getToscaCombiConvencionalSeUsa(),
			$keys[13] => $this->getToscaCombiConvencionalEstado(),
			$keys[14] => $this->getToscaCombiNoConvencionalFunciona(),
			$keys[15] => $this->getToscaCombiNoConvencionalNumeroSuscriptores(),
			$keys[16] => $this->getToscaCombiNoConvencionalSeUsa(),
			$keys[17] => $this->getToscaCombiNoConvencionalEstado(),
			$keys[18] => $this->getToscaSimplificadoFunciona(),
			$keys[19] => $this->getToscaSimplificadoNumeroSuscriptores(),
			$keys[20] => $this->getToscaSimplificadoSeUsa(),
			$keys[21] => $this->getToscaSimplificadoEstado(),
			$keys[22] => $this->getToscaSinArrastreSolidosFunciona(),
			$keys[23] => $this->getToscaSinArrastreSolidosNumeroSuscriptores(),
			$keys[24] => $this->getToscaSinArrastreSolidosSeUsa(),
			$keys[25] => $this->getToscaSinArrastreSolidosEstado(),
			$keys[26] => $this->getToscaOtroCual(),
			$keys[27] => $this->getToscaOtroFunciona(),
			$keys[28] => $this->getToscaOtroNumeroSuscriptores(),
			$keys[29] => $this->getToscaOtroSeUsa(),
			$keys[30] => $this->getToscaOtroEstado(),
			$keys[31] => $this->getToscaActividadesAEjecutar(),
			$keys[32] => $this->getToscaTopId(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TecnicooperativasolucioncolectivaalcantarilladoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setToscaId($value);
				break;
			case 1:
				$this->setToscaPoseeAlcantarilladoColectivo($value);
				break;
			case 2:
				$this->setToscaSanitarioFunciona($value);
				break;
			case 3:
				$this->setToscaSanitarioNumeroSuscriptores($value);
				break;
			case 4:
				$this->setToscaSanitarioSeUsa($value);
				break;
			case 5:
				$this->setToscaSanitarioEstado($value);
				break;
			case 6:
				$this->setToscaPluvialFunciona($value);
				break;
			case 7:
				$this->setToscaPluvialNumeroSuscriptores($value);
				break;
			case 8:
				$this->setToscaPluvialSeUsa($value);
				break;
			case 9:
				$this->setToscaPluvialEstado($value);
				break;
			case 10:
				$this->setToscaCombiConvencionalFunciona($value);
				break;
			case 11:
				$this->setToscaCombiConvencionalNumeroSuscriptores($value);
				break;
			case 12:
				$this->setToscaCombiConvencionalSeUsa($value);
				break;
			case 13:
				$this->setToscaCombiConvencionalEstado($value);
				break;
			case 14:
				$this->setToscaCombiNoConvencionalFunciona($value);
				break;
			case 15:
				$this->setToscaCombiNoConvencionalNumeroSuscriptores($value);
				break;
			case 16:
				$this->setToscaCombiNoConvencionalSeUsa($value);
				break;
			case 17:
				$this->setToscaCombiNoConvencionalEstado($value);
				break;
			case 18:
				$this->setToscaSimplificadoFunciona($value);
				break;
			case 19:
				$this->setToscaSimplificadoNumeroSuscriptores($value);
				break;
			case 20:
				$this->setToscaSimplificadoSeUsa($value);
				break;
			case 21:
				$this->setToscaSimplificadoEstado($value);
				break;
			case 22:
				$this->setToscaSinArrastreSolidosFunciona($value);
				break;
			case 23:
				$this->setToscaSinArrastreSolidosNumeroSuscriptores($value);
				break;
			case 24:
				$this->setToscaSinArrastreSolidosSeUsa($value);
				break;
			case 25:
				$this->setToscaSinArrastreSolidosEstado($value);
				break;
			case 26:
				$this->setToscaOtroCual($value);
				break;
			case 27:
				$this->setToscaOtroFunciona($value);
				break;
			case 28:
				$this->setToscaOtroNumeroSuscriptores($value);
				break;
			case 29:
				$this->setToscaOtroSeUsa($value);
				break;
			case 30:
				$this->setToscaOtroEstado($value);
				break;
			case 31:
				$this->setToscaActividadesAEjecutar($value);
				break;
			case 32:
				$this->setToscaTopId($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = TecnicooperativasolucioncolectivaalcantarilladoPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setToscaId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setToscaPoseeAlcantarilladoColectivo($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setToscaSanitarioFunciona($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setToscaSanitarioNumeroSuscriptores($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setToscaSanitarioSeUsa($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setToscaSanitarioEstado($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setToscaPluvialFunciona($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setToscaPluvialNumeroSuscriptores($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setToscaPluvialSeUsa($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setToscaPluvialEstado($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setToscaCombiConvencionalFunciona($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setToscaCombiConvencionalNumeroSuscriptores($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setToscaCombiConvencionalSeUsa($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setToscaCombiConvencionalEstado($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setToscaCombiNoConvencionalFunciona($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setToscaCombiNoConvencionalNumeroSuscriptores($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setToscaCombiNoConvencionalSeUsa($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setToscaCombiNoConvencionalEstado($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setToscaSimplificadoFunciona($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setToscaSimplificadoNumeroSuscriptores($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setToscaSimplificadoSeUsa($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setToscaSimplificadoEstado($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setToscaSinArrastreSolidosFunciona($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setToscaSinArrastreSolidosNumeroSuscriptores($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setToscaSinArrastreSolidosSeUsa($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setToscaSinArrastreSolidosEstado($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setToscaOtroCual($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setToscaOtroFunciona($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setToscaOtroNumeroSuscriptores($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setToscaOtroSeUsa($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setToscaOtroEstado($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setToscaActividadesAEjecutar($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setToscaTopId($arr[$keys[32]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(TecnicooperativasolucioncolectivaalcantarilladoPeer::DATABASE_NAME);

		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_ID)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_ID, $this->tosca_id);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_POSEE_ALCANTARILLADO_COLECTIVO)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_POSEE_ALCANTARILLADO_COLECTIVO, $this->tosca_posee_alcantarillado_colectivo);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SANITARIO_FUNCIONA)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SANITARIO_FUNCIONA, $this->tosca_sanitario_funciona);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SANITARIO_NUMERO_SUSCRIPTORES)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SANITARIO_NUMERO_SUSCRIPTORES, $this->tosca_sanitario_numero_suscriptores);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SANITARIO_SE_USA)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SANITARIO_SE_USA, $this->tosca_sanitario_se_usa);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SANITARIO_ESTADO)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SANITARIO_ESTADO, $this->tosca_sanitario_estado);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_PLUVIAL_FUNCIONA)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_PLUVIAL_FUNCIONA, $this->tosca_pluvial_funciona);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_PLUVIAL_NUMERO_SUSCRIPTORES)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_PLUVIAL_NUMERO_SUSCRIPTORES, $this->tosca_pluvial_numero_suscriptores);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_PLUVIAL_SE_USA)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_PLUVIAL_SE_USA, $this->tosca_pluvial_se_usa);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_PLUVIAL_ESTADO)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_PLUVIAL_ESTADO, $this->tosca_pluvial_estado);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_CONVENCIONAL_FUNCIONA)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_CONVENCIONAL_FUNCIONA, $this->tosca_combi_convencional_funciona);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_CONVENCIONAL_NUMERO_SUSCRIPTORES)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_CONVENCIONAL_NUMERO_SUSCRIPTORES, $this->tosca_combi_convencional_numero_suscriptores);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_CONVENCIONAL_SE_USA)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_CONVENCIONAL_SE_USA, $this->tosca_combi_convencional_se_usa);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_CONVENCIONAL_ESTADO)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_CONVENCIONAL_ESTADO, $this->tosca_combi_convencional_estado);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_NO_CONVENCIONAL_FUNCIONA)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_NO_CONVENCIONAL_FUNCIONA, $this->tosca_combi_no_convencional_funciona);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_NO_CONVENCIONAL_NUMERO_SUSCRIPTORES)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_NO_CONVENCIONAL_NUMERO_SUSCRIPTORES, $this->tosca_combi_no_convencional_numero_suscriptores);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_NO_CONVENCIONAL_SE_USA)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_NO_CONVENCIONAL_SE_USA, $this->tosca_combi_no_convencional_se_usa);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_NO_CONVENCIONAL_ESTADO)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_COMBI_NO_CONVENCIONAL_ESTADO, $this->tosca_combi_no_convencional_estado);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIMPLIFICADO_FUNCIONA)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIMPLIFICADO_FUNCIONA, $this->tosca_simplificado_funciona);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIMPLIFICADO_NUMERO_SUSCRIPTORES)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIMPLIFICADO_NUMERO_SUSCRIPTORES, $this->tosca_simplificado_numero_suscriptores);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIMPLIFICADO_SE_USA)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIMPLIFICADO_SE_USA, $this->tosca_simplificado_se_usa);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIMPLIFICADO_ESTADO)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIMPLIFICADO_ESTADO, $this->tosca_simplificado_estado);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIN_ARRASTRE_SOLIDOS_FUNCIONA)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIN_ARRASTRE_SOLIDOS_FUNCIONA, $this->tosca_sin_arrastre_solidos_funciona);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIN_ARRASTRE_SOLIDOS_NUMERO_SUSCRIPTORES)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIN_ARRASTRE_SOLIDOS_NUMERO_SUSCRIPTORES, $this->tosca_sin_arrastre_solidos_numero_suscriptores);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIN_ARRASTRE_SOLIDOS_SE_USA)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIN_ARRASTRE_SOLIDOS_SE_USA, $this->tosca_sin_arrastre_solidos_se_usa);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIN_ARRASTRE_SOLIDOS_ESTADO)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_SIN_ARRASTRE_SOLIDOS_ESTADO, $this->tosca_sin_arrastre_solidos_estado);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_OTRO_CUAL)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_OTRO_CUAL, $this->tosca_otro_cual);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_OTRO_FUNCIONA)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_OTRO_FUNCIONA, $this->tosca_otro_funciona);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_OTRO_NUMERO_SUSCRIPTORES)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_OTRO_NUMERO_SUSCRIPTORES, $this->tosca_otro_numero_suscriptores);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_OTRO_SE_USA)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_OTRO_SE_USA, $this->tosca_otro_se_usa);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_OTRO_ESTADO)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_OTRO_ESTADO, $this->tosca_otro_estado);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_ACTIVIDADES_A_EJECUTAR)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_ACTIVIDADES_A_EJECUTAR, $this->tosca_actividades_a_ejecutar);
		if ($this->isColumnModified(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_TOP_ID)) $criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_TOP_ID, $this->tosca_top_id);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(TecnicooperativasolucioncolectivaalcantarilladoPeer::DATABASE_NAME);

		$criteria->add(TecnicooperativasolucioncolectivaalcantarilladoPeer::TOSCA_ID, $this->tosca_id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getToscaId();
	}

	/**
	 * Generic method to set the primary key (tosca_id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setToscaId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Tecnicooperativasolucioncolectivaalcantarillado (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setToscaPoseeAlcantarilladoColectivo($this->tosca_posee_alcantarillado_colectivo);

		$copyObj->setToscaSanitarioFunciona($this->tosca_sanitario_funciona);

		$copyObj->setToscaSanitarioNumeroSuscriptores($this->tosca_sanitario_numero_suscriptores);

		$copyObj->setToscaSanitarioSeUsa($this->tosca_sanitario_se_usa);

		$copyObj->setToscaSanitarioEstado($this->tosca_sanitario_estado);

		$copyObj->setToscaPluvialFunciona($this->tosca_pluvial_funciona);

		$copyObj->setToscaPluvialNumeroSuscriptores($this->tosca_pluvial_numero_suscriptores);

		$copyObj->setToscaPluvialSeUsa($this->tosca_pluvial_se_usa);

		$copyObj->setToscaPluvialEstado($this->tosca_pluvial_estado);

		$copyObj->setToscaCombiConvencionalFunciona($this->tosca_combi_convencional_funciona);

		$copyObj->setToscaCombiConvencionalNumeroSuscriptores($this->tosca_combi_convencional_numero_suscriptores);

		$copyObj->setToscaCombiConvencionalSeUsa($this->tosca_combi_convencional_se_usa);

		$copyObj->setToscaCombiConvencionalEstado($this->tosca_combi_convencional_estado);

		$copyObj->setToscaCombiNoConvencionalFunciona($this->tosca_combi_no_convencional_funciona);

		$copyObj->setToscaCombiNoConvencionalNumeroSuscriptores($this->tosca_combi_no_convencional_numero_suscriptores);

		$copyObj->setToscaCombiNoConvencionalSeUsa($this->tosca_combi_no_convencional_se_usa);

		$copyObj->setToscaCombiNoConvencionalEstado($this->tosca_combi_no_convencional_estado);

		$copyObj->setToscaSimplificadoFunciona($this->tosca_simplificado_funciona);

		$copyObj->setToscaSimplificadoNumeroSuscriptores($this->tosca_simplificado_numero_suscriptores);

		$copyObj->setToscaSimplificadoSeUsa($this->tosca_simplificado_se_usa);

		$copyObj->setToscaSimplificadoEstado($this->tosca_simplificado_estado);

		$copyObj->setToscaSinArrastreSolidosFunciona($this->tosca_sin_arrastre_solidos_funciona);

		$copyObj->setToscaSinArrastreSolidosNumeroSuscriptores($this->tosca_sin_arrastre_solidos_numero_suscriptores);

		$copyObj->setToscaSinArrastreSolidosSeUsa($this->tosca_sin_arrastre_solidos_se_usa);

		$copyObj->setToscaSinArrastreSolidosEstado($this->tosca_sin_arrastre_solidos_estado);

		$copyObj->setToscaOtroCual($this->tosca_otro_cual);

		$copyObj->setToscaOtroFunciona($this->tosca_otro_funciona);

		$copyObj->setToscaOtroNumeroSuscriptores($this->tosca_otro_numero_suscriptores);

		$copyObj->setToscaOtroSeUsa($this->tosca_otro_se_usa);

		$copyObj->setToscaOtroEstado($this->tosca_otro_estado);

		$copyObj->setToscaActividadesAEjecutar($this->tosca_actividades_a_ejecutar);

		$copyObj->setToscaTopId($this->tosca_top_id);


		$copyObj->setNew(true);

		$copyObj->setToscaId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     TecnicooperativasolucioncolectivaalcantarilladoPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new TecnicooperativasolucioncolectivaalcantarilladoPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Estadogeneral object.
	 *
	 * @param      Estadogeneral $v
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setEstadogeneralRelatedByToscaSanitarioEstado(Estadogeneral $v = null)
	{
		if ($v === null) {
			$this->setToscaSanitarioEstado(NULL);
		} else {
			$this->setToscaSanitarioEstado($v->getEsgId());
		}

		$this->aEstadogeneralRelatedByToscaSanitarioEstado = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Estadogeneral object, it will not be re-added.
		if ($v !== null) {
			$v->addTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSanitarioEstado($this);
		}

		return $this;
	}


	/**
	 * Get the associated Estadogeneral object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Estadogeneral The associated Estadogeneral object.
	 * @throws     PropelException
	 */
	public function getEstadogeneralRelatedByToscaSanitarioEstado(PropelPDO $con = null)
	{
		if ($this->aEstadogeneralRelatedByToscaSanitarioEstado === null && ($this->tosca_sanitario_estado !== null)) {
			$this->aEstadogeneralRelatedByToscaSanitarioEstado = EstadogeneralPeer::retrieveByPk($this->tosca_sanitario_estado);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aEstadogeneralRelatedByToscaSanitarioEstado->addTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSanitarioEstado($this);
			 */
		}
		return $this->aEstadogeneralRelatedByToscaSanitarioEstado;
	}

	/**
	 * Declares an association between this object and a Estadogeneral object.
	 *
	 * @param      Estadogeneral $v
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setEstadogeneralRelatedByToscaPluvialEstado(Estadogeneral $v = null)
	{
		if ($v === null) {
			$this->setToscaPluvialEstado(NULL);
		} else {
			$this->setToscaPluvialEstado($v->getEsgId());
		}

		$this->aEstadogeneralRelatedByToscaPluvialEstado = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Estadogeneral object, it will not be re-added.
		if ($v !== null) {
			$v->addTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaPluvialEstado($this);
		}

		return $this;
	}


	/**
	 * Get the associated Estadogeneral object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Estadogeneral The associated Estadogeneral object.
	 * @throws     PropelException
	 */
	public function getEstadogeneralRelatedByToscaPluvialEstado(PropelPDO $con = null)
	{
		if ($this->aEstadogeneralRelatedByToscaPluvialEstado === null && ($this->tosca_pluvial_estado !== null)) {
			$this->aEstadogeneralRelatedByToscaPluvialEstado = EstadogeneralPeer::retrieveByPk($this->tosca_pluvial_estado);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aEstadogeneralRelatedByToscaPluvialEstado->addTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaPluvialEstado($this);
			 */
		}
		return $this->aEstadogeneralRelatedByToscaPluvialEstado;
	}

	/**
	 * Declares an association between this object and a Estadogeneral object.
	 *
	 * @param      Estadogeneral $v
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setEstadogeneralRelatedByToscaCombiConvencionalEstado(Estadogeneral $v = null)
	{
		if ($v === null) {
			$this->setToscaCombiConvencionalEstado(NULL);
		} else {
			$this->setToscaCombiConvencionalEstado($v->getEsgId());
		}

		$this->aEstadogeneralRelatedByToscaCombiConvencionalEstado = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Estadogeneral object, it will not be re-added.
		if ($v !== null) {
			$v->addTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiConvencionalEstado($this);
		}

		return $this;
	}


	/**
	 * Get the associated Estadogeneral object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Estadogeneral The associated Estadogeneral object.
	 * @throws     PropelException
	 */
	public function getEstadogeneralRelatedByToscaCombiConvencionalEstado(PropelPDO $con = null)
	{
		if ($this->aEstadogeneralRelatedByToscaCombiConvencionalEstado === null && ($this->tosca_combi_convencional_estado !== null)) {
			$this->aEstadogeneralRelatedByToscaCombiConvencionalEstado = EstadogeneralPeer::retrieveByPk($this->tosca_combi_convencional_estado);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aEstadogeneralRelatedByToscaCombiConvencionalEstado->addTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiConvencionalEstado($this);
			 */
		}
		return $this->aEstadogeneralRelatedByToscaCombiConvencionalEstado;
	}

	/**
	 * Declares an association between this object and a Estadogeneral object.
	 *
	 * @param      Estadogeneral $v
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setEstadogeneralRelatedByToscaCombiNoConvencionalEstado(Estadogeneral $v = null)
	{
		if ($v === null) {
			$this->setToscaCombiNoConvencionalEstado(NULL);
		} else {
			$this->setToscaCombiNoConvencionalEstado($v->getEsgId());
		}

		$this->aEstadogeneralRelatedByToscaCombiNoConvencionalEstado = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Estadogeneral object, it will not be re-added.
		if ($v !== null) {
			$v->addTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaCombiNoConvencionalEstado($this);
		}

		return $this;
	}


	/**
	 * Get the associated Estadogeneral object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Estadogeneral The associated Estadogeneral object.
	 * @throws     PropelException
	 */
	public function getEstadogeneralRelatedByToscaCombiNoConvencionalEstado(PropelPDO $con = null)
	{
		if ($this->aEstadogeneralRelatedByToscaCombiNoConvencionalEstado === null && ($this->tosca_combi_no_convencional_estado !== null)) {
			$this->aEstadogeneralRelatedByToscaCombiNoConvencionalEstado = EstadogeneralPeer::retrieveByPk($this->tosca_combi_no_convencional_estado);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aEstadogeneralRelatedByToscaCombiNoConvencionalEstado->addTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaCombiNoConvencionalEstado($this);
			 */
		}
		return $this->aEstadogeneralRelatedByToscaCombiNoConvencionalEstado;
	}

	/**
	 * Declares an association between this object and a Estadogeneral object.
	 *
	 * @param      Estadogeneral $v
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setEstadogeneralRelatedByToscaSimplificadoEstado(Estadogeneral $v = null)
	{
		if ($v === null) {
			$this->setToscaSimplificadoEstado(NULL);
		} else {
			$this->setToscaSimplificadoEstado($v->getEsgId());
		}

		$this->aEstadogeneralRelatedByToscaSimplificadoEstado = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Estadogeneral object, it will not be re-added.
		if ($v !== null) {
			$v->addTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSimplificadoEstado($this);
		}

		return $this;
	}


	/**
	 * Get the associated Estadogeneral object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Estadogeneral The associated Estadogeneral object.
	 * @throws     PropelException
	 */
	public function getEstadogeneralRelatedByToscaSimplificadoEstado(PropelPDO $con = null)
	{
		if ($this->aEstadogeneralRelatedByToscaSimplificadoEstado === null && ($this->tosca_simplificado_estado !== null)) {
			$this->aEstadogeneralRelatedByToscaSimplificadoEstado = EstadogeneralPeer::retrieveByPk($this->tosca_simplificado_estado);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aEstadogeneralRelatedByToscaSimplificadoEstado->addTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSimplificadoEstado($this);
			 */
		}
		return $this->aEstadogeneralRelatedByToscaSimplificadoEstado;
	}

	/**
	 * Declares an association between this object and a Estadogeneral object.
	 *
	 * @param      Estadogeneral $v
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setEstadogeneralRelatedByToscaSinArrastreSolidosEstado(Estadogeneral $v = null)
	{
		if ($v === null) {
			$this->setToscaSinArrastreSolidosEstado(NULL);
		} else {
			$this->setToscaSinArrastreSolidosEstado($v->getEsgId());
		}

		$this->aEstadogeneralRelatedByToscaSinArrastreSolidosEstado = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Estadogeneral object, it will not be re-added.
		if ($v !== null) {
			$v->addTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaSinArrastreSolidosEstado($this);
		}

		return $this;
	}


	/**
	 * Get the associated Estadogeneral object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Estadogeneral The associated Estadogeneral object.
	 * @throws     PropelException
	 */
	public function getEstadogeneralRelatedByToscaSinArrastreSolidosEstado(PropelPDO $con = null)
	{
		if ($this->aEstadogeneralRelatedByToscaSinArrastreSolidosEstado === null && ($this->tosca_sin_arrastre_solidos_estado !== null)) {
			$this->aEstadogeneralRelatedByToscaSinArrastreSolidosEstado = EstadogeneralPeer::retrieveByPk($this->tosca_sin_arrastre_solidos_estado);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aEstadogeneralRelatedByToscaSinArrastreSolidosEstado->addTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaSinArrastreSolidosEstado($this);
			 */
		}
		return $this->aEstadogeneralRelatedByToscaSinArrastreSolidosEstado;
	}

	/**
	 * Declares an association between this object and a Estadogeneral object.
	 *
	 * @param      Estadogeneral $v
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setEstadogeneralRelatedByToscaOtroEstado(Estadogeneral $v = null)
	{
		if ($v === null) {
			$this->setToscaOtroEstado(NULL);
		} else {
			$this->setToscaOtroEstado($v->getEsgId());
		}

		$this->aEstadogeneralRelatedByToscaOtroEstado = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Estadogeneral object, it will not be re-added.
		if ($v !== null) {
			$v->addTecnicooperativasolucioncolectivaalcantarilladoRelatedByToscaOtroEstado($this);
		}

		return $this;
	}


	/**
	 * Get the associated Estadogeneral object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Estadogeneral The associated Estadogeneral object.
	 * @throws     PropelException
	 */
	public function getEstadogeneralRelatedByToscaOtroEstado(PropelPDO $con = null)
	{
		if ($this->aEstadogeneralRelatedByToscaOtroEstado === null && ($this->tosca_otro_estado !== null)) {
			$this->aEstadogeneralRelatedByToscaOtroEstado = EstadogeneralPeer::retrieveByPk($this->tosca_otro_estado);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aEstadogeneralRelatedByToscaOtroEstado->addTecnicooperativasolucioncolectivaalcantarilladosRelatedByToscaOtroEstado($this);
			 */
		}
		return $this->aEstadogeneralRelatedByToscaOtroEstado;
	}

	/**
	 * Declares an association between this object and a Actividadesaejecutarporprestadoralcantarillado object.
	 *
	 * @param      Actividadesaejecutarporprestadoralcantarillado $v
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setActividadesaejecutarporprestadoralcantarillado(Actividadesaejecutarporprestadoralcantarillado $v = null)
	{
		if ($v === null) {
			$this->setToscaActividadesAEjecutar(NULL);
		} else {
			$this->setToscaActividadesAEjecutar($v->getAaepId());
		}

		$this->aActividadesaejecutarporprestadoralcantarillado = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Actividadesaejecutarporprestadoralcantarillado object, it will not be re-added.
		if ($v !== null) {
			$v->addTecnicooperativasolucioncolectivaalcantarillado($this);
		}

		return $this;
	}


	/**
	 * Get the associated Actividadesaejecutarporprestadoralcantarillado object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Actividadesaejecutarporprestadoralcantarillado The associated Actividadesaejecutarporprestadoralcantarillado object.
	 * @throws     PropelException
	 */
	public function getActividadesaejecutarporprestadoralcantarillado(PropelPDO $con = null)
	{
		if ($this->aActividadesaejecutarporprestadoralcantarillado === null && ($this->tosca_actividades_a_ejecutar !== null)) {
			$this->aActividadesaejecutarporprestadoralcantarillado = ActividadesaejecutarporprestadoralcantarilladoPeer::retrieveByPk($this->tosca_actividades_a_ejecutar);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aActividadesaejecutarporprestadoralcantarillado->addTecnicooperativasolucioncolectivaalcantarillados($this);
			 */
		}
		return $this->aActividadesaejecutarporprestadoralcantarillado;
	}

	/**
	 * Declares an association between this object and a Tecnicooperativo object.
	 *
	 * @param      Tecnicooperativo $v
	 * @return     Tecnicooperativasolucioncolectivaalcantarillado The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTecnicooperativo(Tecnicooperativo $v = null)
	{
		if ($v === null) {
			$this->setToscaTopId(NULL);
		} else {
			$this->setToscaTopId($v->getTopId());
		}

		$this->aTecnicooperativo = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tecnicooperativo object, it will not be re-added.
		if ($v !== null) {
			$v->addTecnicooperativasolucioncolectivaalcantarillado($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tecnicooperativo object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tecnicooperativo The associated Tecnicooperativo object.
	 * @throws     PropelException
	 */
	public function getTecnicooperativo(PropelPDO $con = null)
	{
		if ($this->aTecnicooperativo === null && ($this->tosca_top_id !== null)) {
			$this->aTecnicooperativo = TecnicooperativoPeer::retrieveByPk($this->tosca_top_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTecnicooperativo->addTecnicooperativasolucioncolectivaalcantarillados($this);
			 */
		}
		return $this->aTecnicooperativo;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

			$this->aEstadogeneralRelatedByToscaSanitarioEstado = null;
			$this->aEstadogeneralRelatedByToscaPluvialEstado = null;
			$this->aEstadogeneralRelatedByToscaCombiConvencionalEstado = null;
			$this->aEstadogeneralRelatedByToscaCombiNoConvencionalEstado = null;
			$this->aEstadogeneralRelatedByToscaSimplificadoEstado = null;
			$this->aEstadogeneralRelatedByToscaSinArrastreSolidosEstado = null;
			$this->aEstadogeneralRelatedByToscaOtroEstado = null;
			$this->aActividadesaejecutarporprestadoralcantarillado = null;
			$this->aTecnicooperativo = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseTecnicooperativasolucioncolectivaalcantarillado:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseTecnicooperativasolucioncolectivaalcantarillado::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseTecnicooperativasolucioncolectivaalcantarillado
