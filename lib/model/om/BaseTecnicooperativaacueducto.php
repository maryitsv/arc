<?php

/**
 * Base class that represents a row from the 'tecnicooperativaacueducto' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 07/30/10 22:19:54
 *
 * @package    lib.model.om
 */
abstract class BaseTecnicooperativaacueducto extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        TecnicooperativaacueductoPeer
	 */
	protected static $peer;

	/**
	 * The value for the toa_id field.
	 * @var        int
	 */
	protected $toa_id;

	/**
	 * The value for the toa_top_id field.
	 * @var        int
	 */
	protected $toa_top_id;

	/**
	 * The value for the toa_gravedad_sin_tratamiento field.
	 * @var        string
	 */
	protected $toa_gravedad_sin_tratamiento;

	/**
	 * The value for the toa_bombeo_sin_tratamiento field.
	 * @var        string
	 */
	protected $toa_bombeo_sin_tratamiento;

	/**
	 * The value for the toa_gravedad_con_tratamiento field.
	 * @var        string
	 */
	protected $toa_gravedad_con_tratamiento;

	/**
	 * The value for the toa_bombeo_con_tratamiento field.
	 * @var        string
	 */
	protected $toa_bombeo_con_tratamiento;

	/**
	 * The value for the toa_gravedad_bombeo_sin_tratamiento field.
	 * @var        string
	 */
	protected $toa_gravedad_bombeo_sin_tratamiento;

	/**
	 * The value for the toa_gravedad_bombeo_con_tratamiento field.
	 * @var        string
	 */
	protected $toa_gravedad_bombeo_con_tratamiento;

	/**
	 * The value for the toa_gravedad_sin_tratamiento_bombeo_con_tratamiento field.
	 * @var        string
	 */
	protected $toa_gravedad_sin_tratamiento_bombeo_con_tratamiento;

	/**
	 * The value for the toa_gravedad_con_tratamiento_bombeo_sin_tratamiento field.
	 * @var        string
	 */
	protected $toa_gravedad_con_tratamiento_bombeo_sin_tratamiento;

	/**
	 * The value for the toa_cantidad_agua_distribuida_por_ano field.
	 * @var        string
	 */
	protected $toa_cantidad_agua_distribuida_por_ano;

	/**
	 * The value for the toa_solucion_acarreo field.
	 * @var        string
	 */
	protected $toa_solucion_acarreo;

	/**
	 * The value for the toa_solucion_acarreo_viviendas field.
	 * @var        int
	 */
	protected $toa_solucion_acarreo_viviendas;

	/**
	 * The value for the toa_solucion_nacimiento field.
	 * @var        string
	 */
	protected $toa_solucion_nacimiento;

	/**
	 * The value for the toa_solucion_nacimiento_viviendas field.
	 * @var        int
	 */
	protected $toa_solucion_nacimiento_viviendas;

	/**
	 * The value for the toa_solucion_aljibe field.
	 * @var        string
	 */
	protected $toa_solucion_aljibe;

	/**
	 * The value for the toa_solucion_aljibe_viviendas field.
	 * @var        int
	 */
	protected $toa_solucion_aljibe_viviendas;

	/**
	 * The value for the toa_solucion_agua_lluvia field.
	 * @var        string
	 */
	protected $toa_solucion_agua_lluvia;

	/**
	 * The value for the toa_solucion_agua_lluvia_viviendas field.
	 * @var        int
	 */
	protected $toa_solucion_agua_lluvia_viviendas;

	/**
	 * The value for the toa_solucion_otro field.
	 * @var        string
	 */
	protected $toa_solucion_otro;

	/**
	 * The value for the toa_solucion_otro_cual field.
	 * @var        string
	 */
	protected $toa_solucion_otro_cual;

	/**
	 * The value for the toa_solucion_otro_viviendas field.
	 * @var        int
	 */
	protected $toa_solucion_otro_viviendas;

	/**
	 * @var        Tecnicooperativo
	 */
	protected $aTecnicooperativo;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'TecnicooperativaacueductoPeer';

	/**
	 * Get the [toa_id] column value.
	 * 
	 * @return     int
	 */
	public function getToaId()
	{
		return $this->toa_id;
	}

	/**
	 * Get the [toa_top_id] column value.
	 * 
	 * @return     int
	 */
	public function getToaTopId()
	{
		return $this->toa_top_id;
	}

	/**
	 * Get the [toa_gravedad_sin_tratamiento] column value.
	 * 
	 * @return     string
	 */
	public function getToaGravedadSinTratamiento()
	{
		return $this->toa_gravedad_sin_tratamiento;
	}

	/**
	 * Get the [toa_bombeo_sin_tratamiento] column value.
	 * 
	 * @return     string
	 */
	public function getToaBombeoSinTratamiento()
	{
		return $this->toa_bombeo_sin_tratamiento;
	}

	/**
	 * Get the [toa_gravedad_con_tratamiento] column value.
	 * 
	 * @return     string
	 */
	public function getToaGravedadConTratamiento()
	{
		return $this->toa_gravedad_con_tratamiento;
	}

	/**
	 * Get the [toa_bombeo_con_tratamiento] column value.
	 * 
	 * @return     string
	 */
	public function getToaBombeoConTratamiento()
	{
		return $this->toa_bombeo_con_tratamiento;
	}

	/**
	 * Get the [toa_gravedad_bombeo_sin_tratamiento] column value.
	 * 
	 * @return     string
	 */
	public function getToaGravedadBombeoSinTratamiento()
	{
		return $this->toa_gravedad_bombeo_sin_tratamiento;
	}

	/**
	 * Get the [toa_gravedad_bombeo_con_tratamiento] column value.
	 * 
	 * @return     string
	 */
	public function getToaGravedadBombeoConTratamiento()
	{
		return $this->toa_gravedad_bombeo_con_tratamiento;
	}

	/**
	 * Get the [toa_gravedad_sin_tratamiento_bombeo_con_tratamiento] column value.
	 * 
	 * @return     string
	 */
	public function getToaGravedadSinTratamientoBombeoConTratamiento()
	{
		return $this->toa_gravedad_sin_tratamiento_bombeo_con_tratamiento;
	}

	/**
	 * Get the [toa_gravedad_con_tratamiento_bombeo_sin_tratamiento] column value.
	 * 
	 * @return     string
	 */
	public function getToaGravedadConTratamientoBombeoSinTratamiento()
	{
		return $this->toa_gravedad_con_tratamiento_bombeo_sin_tratamiento;
	}

	/**
	 * Get the [toa_cantidad_agua_distribuida_por_ano] column value.
	 * 
	 * @return     string
	 */
	public function getToaCantidadAguaDistribuidaPorAno()
	{
		return $this->toa_cantidad_agua_distribuida_por_ano;
	}

	/**
	 * Get the [toa_solucion_acarreo] column value.
	 * 
	 * @return     string
	 */
	public function getToaSolucionAcarreo()
	{
		return $this->toa_solucion_acarreo;
	}

	/**
	 * Get the [toa_solucion_acarreo_viviendas] column value.
	 * 
	 * @return     int
	 */
	public function getToaSolucionAcarreoViviendas()
	{
		return $this->toa_solucion_acarreo_viviendas;
	}

	/**
	 * Get the [toa_solucion_nacimiento] column value.
	 * 
	 * @return     string
	 */
	public function getToaSolucionNacimiento()
	{
		return $this->toa_solucion_nacimiento;
	}

	/**
	 * Get the [toa_solucion_nacimiento_viviendas] column value.
	 * 
	 * @return     int
	 */
	public function getToaSolucionNacimientoViviendas()
	{
		return $this->toa_solucion_nacimiento_viviendas;
	}

	/**
	 * Get the [toa_solucion_aljibe] column value.
	 * 
	 * @return     string
	 */
	public function getToaSolucionAljibe()
	{
		return $this->toa_solucion_aljibe;
	}

	/**
	 * Get the [toa_solucion_aljibe_viviendas] column value.
	 * 
	 * @return     int
	 */
	public function getToaSolucionAljibeViviendas()
	{
		return $this->toa_solucion_aljibe_viviendas;
	}

	/**
	 * Get the [toa_solucion_agua_lluvia] column value.
	 * 
	 * @return     string
	 */
	public function getToaSolucionAguaLluvia()
	{
		return $this->toa_solucion_agua_lluvia;
	}

	/**
	 * Get the [toa_solucion_agua_lluvia_viviendas] column value.
	 * 
	 * @return     int
	 */
	public function getToaSolucionAguaLluviaViviendas()
	{
		return $this->toa_solucion_agua_lluvia_viviendas;
	}

	/**
	 * Get the [toa_solucion_otro] column value.
	 * 
	 * @return     string
	 */
	public function getToaSolucionOtro()
	{
		return $this->toa_solucion_otro;
	}

	/**
	 * Get the [toa_solucion_otro_cual] column value.
	 * 
	 * @return     string
	 */
	public function getToaSolucionOtroCual()
	{
		return $this->toa_solucion_otro_cual;
	}

	/**
	 * Get the [toa_solucion_otro_viviendas] column value.
	 * 
	 * @return     int
	 */
	public function getToaSolucionOtroViviendas()
	{
		return $this->toa_solucion_otro_viviendas;
	}

	/**
	 * Set the value of [toa_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativaacueducto The current object (for fluent API support)
	 */
	public function setToaId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->toa_id !== $v) {
			$this->toa_id = $v;
			$this->modifiedColumns[] = TecnicooperativaacueductoPeer::TOA_ID;
		}

		return $this;
	} // setToaId()

	/**
	 * Set the value of [toa_top_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativaacueducto The current object (for fluent API support)
	 */
	public function setToaTopId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->toa_top_id !== $v) {
			$this->toa_top_id = $v;
			$this->modifiedColumns[] = TecnicooperativaacueductoPeer::TOA_TOP_ID;
		}

		if ($this->aTecnicooperativo !== null && $this->aTecnicooperativo->getTopId() !== $v) {
			$this->aTecnicooperativo = null;
		}

		return $this;
	} // setToaTopId()

	/**
	 * Set the value of [toa_gravedad_sin_tratamiento] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativaacueducto The current object (for fluent API support)
	 */
	public function setToaGravedadSinTratamiento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->toa_gravedad_sin_tratamiento !== $v) {
			$this->toa_gravedad_sin_tratamiento = $v;
			$this->modifiedColumns[] = TecnicooperativaacueductoPeer::TOA_GRAVEDAD_SIN_TRATAMIENTO;
		}

		return $this;
	} // setToaGravedadSinTratamiento()

	/**
	 * Set the value of [toa_bombeo_sin_tratamiento] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativaacueducto The current object (for fluent API support)
	 */
	public function setToaBombeoSinTratamiento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->toa_bombeo_sin_tratamiento !== $v) {
			$this->toa_bombeo_sin_tratamiento = $v;
			$this->modifiedColumns[] = TecnicooperativaacueductoPeer::TOA_BOMBEO_SIN_TRATAMIENTO;
		}

		return $this;
	} // setToaBombeoSinTratamiento()

	/**
	 * Set the value of [toa_gravedad_con_tratamiento] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativaacueducto The current object (for fluent API support)
	 */
	public function setToaGravedadConTratamiento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->toa_gravedad_con_tratamiento !== $v) {
			$this->toa_gravedad_con_tratamiento = $v;
			$this->modifiedColumns[] = TecnicooperativaacueductoPeer::TOA_GRAVEDAD_CON_TRATAMIENTO;
		}

		return $this;
	} // setToaGravedadConTratamiento()

	/**
	 * Set the value of [toa_bombeo_con_tratamiento] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativaacueducto The current object (for fluent API support)
	 */
	public function setToaBombeoConTratamiento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->toa_bombeo_con_tratamiento !== $v) {
			$this->toa_bombeo_con_tratamiento = $v;
			$this->modifiedColumns[] = TecnicooperativaacueductoPeer::TOA_BOMBEO_CON_TRATAMIENTO;
		}

		return $this;
	} // setToaBombeoConTratamiento()

	/**
	 * Set the value of [toa_gravedad_bombeo_sin_tratamiento] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativaacueducto The current object (for fluent API support)
	 */
	public function setToaGravedadBombeoSinTratamiento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->toa_gravedad_bombeo_sin_tratamiento !== $v) {
			$this->toa_gravedad_bombeo_sin_tratamiento = $v;
			$this->modifiedColumns[] = TecnicooperativaacueductoPeer::TOA_GRAVEDAD_BOMBEO_SIN_TRATAMIENTO;
		}

		return $this;
	} // setToaGravedadBombeoSinTratamiento()

	/**
	 * Set the value of [toa_gravedad_bombeo_con_tratamiento] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativaacueducto The current object (for fluent API support)
	 */
	public function setToaGravedadBombeoConTratamiento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->toa_gravedad_bombeo_con_tratamiento !== $v) {
			$this->toa_gravedad_bombeo_con_tratamiento = $v;
			$this->modifiedColumns[] = TecnicooperativaacueductoPeer::TOA_GRAVEDAD_BOMBEO_CON_TRATAMIENTO;
		}

		return $this;
	} // setToaGravedadBombeoConTratamiento()

	/**
	 * Set the value of [toa_gravedad_sin_tratamiento_bombeo_con_tratamiento] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativaacueducto The current object (for fluent API support)
	 */
	public function setToaGravedadSinTratamientoBombeoConTratamiento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->toa_gravedad_sin_tratamiento_bombeo_con_tratamiento !== $v) {
			$this->toa_gravedad_sin_tratamiento_bombeo_con_tratamiento = $v;
			$this->modifiedColumns[] = TecnicooperativaacueductoPeer::TOA_GRAVEDAD_SIN_TRATAMIENTO_BOMBEO_CON_TRATAMIENTO;
		}

		return $this;
	} // setToaGravedadSinTratamientoBombeoConTratamiento()

	/**
	 * Set the value of [toa_gravedad_con_tratamiento_bombeo_sin_tratamiento] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativaacueducto The current object (for fluent API support)
	 */
	public function setToaGravedadConTratamientoBombeoSinTratamiento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->toa_gravedad_con_tratamiento_bombeo_sin_tratamiento !== $v) {
			$this->toa_gravedad_con_tratamiento_bombeo_sin_tratamiento = $v;
			$this->modifiedColumns[] = TecnicooperativaacueductoPeer::TOA_GRAVEDAD_CON_TRATAMIENTO_BOMBEO_SIN_TRATAMIENTO;
		}

		return $this;
	} // setToaGravedadConTratamientoBombeoSinTratamiento()

	/**
	 * Set the value of [toa_cantidad_agua_distribuida_por_ano] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativaacueducto The current object (for fluent API support)
	 */
	public function setToaCantidadAguaDistribuidaPorAno($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->toa_cantidad_agua_distribuida_por_ano !== $v) {
			$this->toa_cantidad_agua_distribuida_por_ano = $v;
			$this->modifiedColumns[] = TecnicooperativaacueductoPeer::TOA_CANTIDAD_AGUA_DISTRIBUIDA_POR_ANO;
		}

		return $this;
	} // setToaCantidadAguaDistribuidaPorAno()

	/**
	 * Set the value of [toa_solucion_acarreo] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativaacueducto The current object (for fluent API support)
	 */
	public function setToaSolucionAcarreo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->toa_solucion_acarreo !== $v) {
			$this->toa_solucion_acarreo = $v;
			$this->modifiedColumns[] = TecnicooperativaacueductoPeer::TOA_SOLUCION_ACARREO;
		}

		return $this;
	} // setToaSolucionAcarreo()

	/**
	 * Set the value of [toa_solucion_acarreo_viviendas] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativaacueducto The current object (for fluent API support)
	 */
	public function setToaSolucionAcarreoViviendas($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->toa_solucion_acarreo_viviendas !== $v) {
			$this->toa_solucion_acarreo_viviendas = $v;
			$this->modifiedColumns[] = TecnicooperativaacueductoPeer::TOA_SOLUCION_ACARREO_VIVIENDAS;
		}

		return $this;
	} // setToaSolucionAcarreoViviendas()

	/**
	 * Set the value of [toa_solucion_nacimiento] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativaacueducto The current object (for fluent API support)
	 */
	public function setToaSolucionNacimiento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->toa_solucion_nacimiento !== $v) {
			$this->toa_solucion_nacimiento = $v;
			$this->modifiedColumns[] = TecnicooperativaacueductoPeer::TOA_SOLUCION_NACIMIENTO;
		}

		return $this;
	} // setToaSolucionNacimiento()

	/**
	 * Set the value of [toa_solucion_nacimiento_viviendas] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativaacueducto The current object (for fluent API support)
	 */
	public function setToaSolucionNacimientoViviendas($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->toa_solucion_nacimiento_viviendas !== $v) {
			$this->toa_solucion_nacimiento_viviendas = $v;
			$this->modifiedColumns[] = TecnicooperativaacueductoPeer::TOA_SOLUCION_NACIMIENTO_VIVIENDAS;
		}

		return $this;
	} // setToaSolucionNacimientoViviendas()

	/**
	 * Set the value of [toa_solucion_aljibe] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativaacueducto The current object (for fluent API support)
	 */
	public function setToaSolucionAljibe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->toa_solucion_aljibe !== $v) {
			$this->toa_solucion_aljibe = $v;
			$this->modifiedColumns[] = TecnicooperativaacueductoPeer::TOA_SOLUCION_ALJIBE;
		}

		return $this;
	} // setToaSolucionAljibe()

	/**
	 * Set the value of [toa_solucion_aljibe_viviendas] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativaacueducto The current object (for fluent API support)
	 */
	public function setToaSolucionAljibeViviendas($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->toa_solucion_aljibe_viviendas !== $v) {
			$this->toa_solucion_aljibe_viviendas = $v;
			$this->modifiedColumns[] = TecnicooperativaacueductoPeer::TOA_SOLUCION_ALJIBE_VIVIENDAS;
		}

		return $this;
	} // setToaSolucionAljibeViviendas()

	/**
	 * Set the value of [toa_solucion_agua_lluvia] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativaacueducto The current object (for fluent API support)
	 */
	public function setToaSolucionAguaLluvia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->toa_solucion_agua_lluvia !== $v) {
			$this->toa_solucion_agua_lluvia = $v;
			$this->modifiedColumns[] = TecnicooperativaacueductoPeer::TOA_SOLUCION_AGUA_LLUVIA;
		}

		return $this;
	} // setToaSolucionAguaLluvia()

	/**
	 * Set the value of [toa_solucion_agua_lluvia_viviendas] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativaacueducto The current object (for fluent API support)
	 */
	public function setToaSolucionAguaLluviaViviendas($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->toa_solucion_agua_lluvia_viviendas !== $v) {
			$this->toa_solucion_agua_lluvia_viviendas = $v;
			$this->modifiedColumns[] = TecnicooperativaacueductoPeer::TOA_SOLUCION_AGUA_LLUVIA_VIVIENDAS;
		}

		return $this;
	} // setToaSolucionAguaLluviaViviendas()

	/**
	 * Set the value of [toa_solucion_otro] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativaacueducto The current object (for fluent API support)
	 */
	public function setToaSolucionOtro($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->toa_solucion_otro !== $v) {
			$this->toa_solucion_otro = $v;
			$this->modifiedColumns[] = TecnicooperativaacueductoPeer::TOA_SOLUCION_OTRO;
		}

		return $this;
	} // setToaSolucionOtro()

	/**
	 * Set the value of [toa_solucion_otro_cual] column.
	 * 
	 * @param      string $v new value
	 * @return     Tecnicooperativaacueducto The current object (for fluent API support)
	 */
	public function setToaSolucionOtroCual($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->toa_solucion_otro_cual !== $v) {
			$this->toa_solucion_otro_cual = $v;
			$this->modifiedColumns[] = TecnicooperativaacueductoPeer::TOA_SOLUCION_OTRO_CUAL;
		}

		return $this;
	} // setToaSolucionOtroCual()

	/**
	 * Set the value of [toa_solucion_otro_viviendas] column.
	 * 
	 * @param      int $v new value
	 * @return     Tecnicooperativaacueducto The current object (for fluent API support)
	 */
	public function setToaSolucionOtroViviendas($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->toa_solucion_otro_viviendas !== $v) {
			$this->toa_solucion_otro_viviendas = $v;
			$this->modifiedColumns[] = TecnicooperativaacueductoPeer::TOA_SOLUCION_OTRO_VIVIENDAS;
		}

		return $this;
	} // setToaSolucionOtroViviendas()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->toa_id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->toa_top_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->toa_gravedad_sin_tratamiento = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->toa_bombeo_sin_tratamiento = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->toa_gravedad_con_tratamiento = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->toa_bombeo_con_tratamiento = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->toa_gravedad_bombeo_sin_tratamiento = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->toa_gravedad_bombeo_con_tratamiento = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->toa_gravedad_sin_tratamiento_bombeo_con_tratamiento = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->toa_gravedad_con_tratamiento_bombeo_sin_tratamiento = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->toa_cantidad_agua_distribuida_por_ano = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->toa_solucion_acarreo = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->toa_solucion_acarreo_viviendas = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->toa_solucion_nacimiento = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->toa_solucion_nacimiento_viviendas = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->toa_solucion_aljibe = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->toa_solucion_aljibe_viviendas = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->toa_solucion_agua_lluvia = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->toa_solucion_agua_lluvia_viviendas = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->toa_solucion_otro = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->toa_solucion_otro_cual = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->toa_solucion_otro_viviendas = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 22; // 22 = TecnicooperativaacueductoPeer::NUM_COLUMNS - TecnicooperativaacueductoPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Tecnicooperativaacueducto object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aTecnicooperativo !== null && $this->toa_top_id !== $this->aTecnicooperativo->getTopId()) {
			$this->aTecnicooperativo = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TecnicooperativaacueductoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = TecnicooperativaacueductoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aTecnicooperativo = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TecnicooperativaacueductoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTecnicooperativaacueducto:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				TecnicooperativaacueductoPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTecnicooperativaacueducto:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TecnicooperativaacueductoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTecnicooperativaacueducto:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTecnicooperativaacueducto:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				TecnicooperativaacueductoPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aTecnicooperativo !== null) {
				if ($this->aTecnicooperativo->isModified() || $this->aTecnicooperativo->isNew()) {
					$affectedRows += $this->aTecnicooperativo->save($con);
				}
				$this->setTecnicooperativo($this->aTecnicooperativo);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = TecnicooperativaacueductoPeer::TOA_ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = TecnicooperativaacueductoPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setToaId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += TecnicooperativaacueductoPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aTecnicooperativo !== null) {
				if (!$this->aTecnicooperativo->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTecnicooperativo->getValidationFailures());
				}
			}


			if (($retval = TecnicooperativaacueductoPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TecnicooperativaacueductoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getToaId();
				break;
			case 1:
				return $this->getToaTopId();
				break;
			case 2:
				return $this->getToaGravedadSinTratamiento();
				break;
			case 3:
				return $this->getToaBombeoSinTratamiento();
				break;
			case 4:
				return $this->getToaGravedadConTratamiento();
				break;
			case 5:
				return $this->getToaBombeoConTratamiento();
				break;
			case 6:
				return $this->getToaGravedadBombeoSinTratamiento();
				break;
			case 7:
				return $this->getToaGravedadBombeoConTratamiento();
				break;
			case 8:
				return $this->getToaGravedadSinTratamientoBombeoConTratamiento();
				break;
			case 9:
				return $this->getToaGravedadConTratamientoBombeoSinTratamiento();
				break;
			case 10:
				return $this->getToaCantidadAguaDistribuidaPorAno();
				break;
			case 11:
				return $this->getToaSolucionAcarreo();
				break;
			case 12:
				return $this->getToaSolucionAcarreoViviendas();
				break;
			case 13:
				return $this->getToaSolucionNacimiento();
				break;
			case 14:
				return $this->getToaSolucionNacimientoViviendas();
				break;
			case 15:
				return $this->getToaSolucionAljibe();
				break;
			case 16:
				return $this->getToaSolucionAljibeViviendas();
				break;
			case 17:
				return $this->getToaSolucionAguaLluvia();
				break;
			case 18:
				return $this->getToaSolucionAguaLluviaViviendas();
				break;
			case 19:
				return $this->getToaSolucionOtro();
				break;
			case 20:
				return $this->getToaSolucionOtroCual();
				break;
			case 21:
				return $this->getToaSolucionOtroViviendas();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = TecnicooperativaacueductoPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getToaId(),
			$keys[1] => $this->getToaTopId(),
			$keys[2] => $this->getToaGravedadSinTratamiento(),
			$keys[3] => $this->getToaBombeoSinTratamiento(),
			$keys[4] => $this->getToaGravedadConTratamiento(),
			$keys[5] => $this->getToaBombeoConTratamiento(),
			$keys[6] => $this->getToaGravedadBombeoSinTratamiento(),
			$keys[7] => $this->getToaGravedadBombeoConTratamiento(),
			$keys[8] => $this->getToaGravedadSinTratamientoBombeoConTratamiento(),
			$keys[9] => $this->getToaGravedadConTratamientoBombeoSinTratamiento(),
			$keys[10] => $this->getToaCantidadAguaDistribuidaPorAno(),
			$keys[11] => $this->getToaSolucionAcarreo(),
			$keys[12] => $this->getToaSolucionAcarreoViviendas(),
			$keys[13] => $this->getToaSolucionNacimiento(),
			$keys[14] => $this->getToaSolucionNacimientoViviendas(),
			$keys[15] => $this->getToaSolucionAljibe(),
			$keys[16] => $this->getToaSolucionAljibeViviendas(),
			$keys[17] => $this->getToaSolucionAguaLluvia(),
			$keys[18] => $this->getToaSolucionAguaLluviaViviendas(),
			$keys[19] => $this->getToaSolucionOtro(),
			$keys[20] => $this->getToaSolucionOtroCual(),
			$keys[21] => $this->getToaSolucionOtroViviendas(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TecnicooperativaacueductoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setToaId($value);
				break;
			case 1:
				$this->setToaTopId($value);
				break;
			case 2:
				$this->setToaGravedadSinTratamiento($value);
				break;
			case 3:
				$this->setToaBombeoSinTratamiento($value);
				break;
			case 4:
				$this->setToaGravedadConTratamiento($value);
				break;
			case 5:
				$this->setToaBombeoConTratamiento($value);
				break;
			case 6:
				$this->setToaGravedadBombeoSinTratamiento($value);
				break;
			case 7:
				$this->setToaGravedadBombeoConTratamiento($value);
				break;
			case 8:
				$this->setToaGravedadSinTratamientoBombeoConTratamiento($value);
				break;
			case 9:
				$this->setToaGravedadConTratamientoBombeoSinTratamiento($value);
				break;
			case 10:
				$this->setToaCantidadAguaDistribuidaPorAno($value);
				break;
			case 11:
				$this->setToaSolucionAcarreo($value);
				break;
			case 12:
				$this->setToaSolucionAcarreoViviendas($value);
				break;
			case 13:
				$this->setToaSolucionNacimiento($value);
				break;
			case 14:
				$this->setToaSolucionNacimientoViviendas($value);
				break;
			case 15:
				$this->setToaSolucionAljibe($value);
				break;
			case 16:
				$this->setToaSolucionAljibeViviendas($value);
				break;
			case 17:
				$this->setToaSolucionAguaLluvia($value);
				break;
			case 18:
				$this->setToaSolucionAguaLluviaViviendas($value);
				break;
			case 19:
				$this->setToaSolucionOtro($value);
				break;
			case 20:
				$this->setToaSolucionOtroCual($value);
				break;
			case 21:
				$this->setToaSolucionOtroViviendas($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = TecnicooperativaacueductoPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setToaId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setToaTopId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setToaGravedadSinTratamiento($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setToaBombeoSinTratamiento($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setToaGravedadConTratamiento($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setToaBombeoConTratamiento($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setToaGravedadBombeoSinTratamiento($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setToaGravedadBombeoConTratamiento($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setToaGravedadSinTratamientoBombeoConTratamiento($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setToaGravedadConTratamientoBombeoSinTratamiento($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setToaCantidadAguaDistribuidaPorAno($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setToaSolucionAcarreo($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setToaSolucionAcarreoViviendas($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setToaSolucionNacimiento($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setToaSolucionNacimientoViviendas($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setToaSolucionAljibe($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setToaSolucionAljibeViviendas($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setToaSolucionAguaLluvia($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setToaSolucionAguaLluviaViviendas($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setToaSolucionOtro($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setToaSolucionOtroCual($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setToaSolucionOtroViviendas($arr[$keys[21]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(TecnicooperativaacueductoPeer::DATABASE_NAME);

		if ($this->isColumnModified(TecnicooperativaacueductoPeer::TOA_ID)) $criteria->add(TecnicooperativaacueductoPeer::TOA_ID, $this->toa_id);
		if ($this->isColumnModified(TecnicooperativaacueductoPeer::TOA_TOP_ID)) $criteria->add(TecnicooperativaacueductoPeer::TOA_TOP_ID, $this->toa_top_id);
		if ($this->isColumnModified(TecnicooperativaacueductoPeer::TOA_GRAVEDAD_SIN_TRATAMIENTO)) $criteria->add(TecnicooperativaacueductoPeer::TOA_GRAVEDAD_SIN_TRATAMIENTO, $this->toa_gravedad_sin_tratamiento);
		if ($this->isColumnModified(TecnicooperativaacueductoPeer::TOA_BOMBEO_SIN_TRATAMIENTO)) $criteria->add(TecnicooperativaacueductoPeer::TOA_BOMBEO_SIN_TRATAMIENTO, $this->toa_bombeo_sin_tratamiento);
		if ($this->isColumnModified(TecnicooperativaacueductoPeer::TOA_GRAVEDAD_CON_TRATAMIENTO)) $criteria->add(TecnicooperativaacueductoPeer::TOA_GRAVEDAD_CON_TRATAMIENTO, $this->toa_gravedad_con_tratamiento);
		if ($this->isColumnModified(TecnicooperativaacueductoPeer::TOA_BOMBEO_CON_TRATAMIENTO)) $criteria->add(TecnicooperativaacueductoPeer::TOA_BOMBEO_CON_TRATAMIENTO, $this->toa_bombeo_con_tratamiento);
		if ($this->isColumnModified(TecnicooperativaacueductoPeer::TOA_GRAVEDAD_BOMBEO_SIN_TRATAMIENTO)) $criteria->add(TecnicooperativaacueductoPeer::TOA_GRAVEDAD_BOMBEO_SIN_TRATAMIENTO, $this->toa_gravedad_bombeo_sin_tratamiento);
		if ($this->isColumnModified(TecnicooperativaacueductoPeer::TOA_GRAVEDAD_BOMBEO_CON_TRATAMIENTO)) $criteria->add(TecnicooperativaacueductoPeer::TOA_GRAVEDAD_BOMBEO_CON_TRATAMIENTO, $this->toa_gravedad_bombeo_con_tratamiento);
		if ($this->isColumnModified(TecnicooperativaacueductoPeer::TOA_GRAVEDAD_SIN_TRATAMIENTO_BOMBEO_CON_TRATAMIENTO)) $criteria->add(TecnicooperativaacueductoPeer::TOA_GRAVEDAD_SIN_TRATAMIENTO_BOMBEO_CON_TRATAMIENTO, $this->toa_gravedad_sin_tratamiento_bombeo_con_tratamiento);
		if ($this->isColumnModified(TecnicooperativaacueductoPeer::TOA_GRAVEDAD_CON_TRATAMIENTO_BOMBEO_SIN_TRATAMIENTO)) $criteria->add(TecnicooperativaacueductoPeer::TOA_GRAVEDAD_CON_TRATAMIENTO_BOMBEO_SIN_TRATAMIENTO, $this->toa_gravedad_con_tratamiento_bombeo_sin_tratamiento);
		if ($this->isColumnModified(TecnicooperativaacueductoPeer::TOA_CANTIDAD_AGUA_DISTRIBUIDA_POR_ANO)) $criteria->add(TecnicooperativaacueductoPeer::TOA_CANTIDAD_AGUA_DISTRIBUIDA_POR_ANO, $this->toa_cantidad_agua_distribuida_por_ano);
		if ($this->isColumnModified(TecnicooperativaacueductoPeer::TOA_SOLUCION_ACARREO)) $criteria->add(TecnicooperativaacueductoPeer::TOA_SOLUCION_ACARREO, $this->toa_solucion_acarreo);
		if ($this->isColumnModified(TecnicooperativaacueductoPeer::TOA_SOLUCION_ACARREO_VIVIENDAS)) $criteria->add(TecnicooperativaacueductoPeer::TOA_SOLUCION_ACARREO_VIVIENDAS, $this->toa_solucion_acarreo_viviendas);
		if ($this->isColumnModified(TecnicooperativaacueductoPeer::TOA_SOLUCION_NACIMIENTO)) $criteria->add(TecnicooperativaacueductoPeer::TOA_SOLUCION_NACIMIENTO, $this->toa_solucion_nacimiento);
		if ($this->isColumnModified(TecnicooperativaacueductoPeer::TOA_SOLUCION_NACIMIENTO_VIVIENDAS)) $criteria->add(TecnicooperativaacueductoPeer::TOA_SOLUCION_NACIMIENTO_VIVIENDAS, $this->toa_solucion_nacimiento_viviendas);
		if ($this->isColumnModified(TecnicooperativaacueductoPeer::TOA_SOLUCION_ALJIBE)) $criteria->add(TecnicooperativaacueductoPeer::TOA_SOLUCION_ALJIBE, $this->toa_solucion_aljibe);
		if ($this->isColumnModified(TecnicooperativaacueductoPeer::TOA_SOLUCION_ALJIBE_VIVIENDAS)) $criteria->add(TecnicooperativaacueductoPeer::TOA_SOLUCION_ALJIBE_VIVIENDAS, $this->toa_solucion_aljibe_viviendas);
		if ($this->isColumnModified(TecnicooperativaacueductoPeer::TOA_SOLUCION_AGUA_LLUVIA)) $criteria->add(TecnicooperativaacueductoPeer::TOA_SOLUCION_AGUA_LLUVIA, $this->toa_solucion_agua_lluvia);
		if ($this->isColumnModified(TecnicooperativaacueductoPeer::TOA_SOLUCION_AGUA_LLUVIA_VIVIENDAS)) $criteria->add(TecnicooperativaacueductoPeer::TOA_SOLUCION_AGUA_LLUVIA_VIVIENDAS, $this->toa_solucion_agua_lluvia_viviendas);
		if ($this->isColumnModified(TecnicooperativaacueductoPeer::TOA_SOLUCION_OTRO)) $criteria->add(TecnicooperativaacueductoPeer::TOA_SOLUCION_OTRO, $this->toa_solucion_otro);
		if ($this->isColumnModified(TecnicooperativaacueductoPeer::TOA_SOLUCION_OTRO_CUAL)) $criteria->add(TecnicooperativaacueductoPeer::TOA_SOLUCION_OTRO_CUAL, $this->toa_solucion_otro_cual);
		if ($this->isColumnModified(TecnicooperativaacueductoPeer::TOA_SOLUCION_OTRO_VIVIENDAS)) $criteria->add(TecnicooperativaacueductoPeer::TOA_SOLUCION_OTRO_VIVIENDAS, $this->toa_solucion_otro_viviendas);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(TecnicooperativaacueductoPeer::DATABASE_NAME);

		$criteria->add(TecnicooperativaacueductoPeer::TOA_ID, $this->toa_id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getToaId();
	}

	/**
	 * Generic method to set the primary key (toa_id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setToaId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Tecnicooperativaacueducto (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setToaTopId($this->toa_top_id);

		$copyObj->setToaGravedadSinTratamiento($this->toa_gravedad_sin_tratamiento);

		$copyObj->setToaBombeoSinTratamiento($this->toa_bombeo_sin_tratamiento);

		$copyObj->setToaGravedadConTratamiento($this->toa_gravedad_con_tratamiento);

		$copyObj->setToaBombeoConTratamiento($this->toa_bombeo_con_tratamiento);

		$copyObj->setToaGravedadBombeoSinTratamiento($this->toa_gravedad_bombeo_sin_tratamiento);

		$copyObj->setToaGravedadBombeoConTratamiento($this->toa_gravedad_bombeo_con_tratamiento);

		$copyObj->setToaGravedadSinTratamientoBombeoConTratamiento($this->toa_gravedad_sin_tratamiento_bombeo_con_tratamiento);

		$copyObj->setToaGravedadConTratamientoBombeoSinTratamiento($this->toa_gravedad_con_tratamiento_bombeo_sin_tratamiento);

		$copyObj->setToaCantidadAguaDistribuidaPorAno($this->toa_cantidad_agua_distribuida_por_ano);

		$copyObj->setToaSolucionAcarreo($this->toa_solucion_acarreo);

		$copyObj->setToaSolucionAcarreoViviendas($this->toa_solucion_acarreo_viviendas);

		$copyObj->setToaSolucionNacimiento($this->toa_solucion_nacimiento);

		$copyObj->setToaSolucionNacimientoViviendas($this->toa_solucion_nacimiento_viviendas);

		$copyObj->setToaSolucionAljibe($this->toa_solucion_aljibe);

		$copyObj->setToaSolucionAljibeViviendas($this->toa_solucion_aljibe_viviendas);

		$copyObj->setToaSolucionAguaLluvia($this->toa_solucion_agua_lluvia);

		$copyObj->setToaSolucionAguaLluviaViviendas($this->toa_solucion_agua_lluvia_viviendas);

		$copyObj->setToaSolucionOtro($this->toa_solucion_otro);

		$copyObj->setToaSolucionOtroCual($this->toa_solucion_otro_cual);

		$copyObj->setToaSolucionOtroViviendas($this->toa_solucion_otro_viviendas);


		$copyObj->setNew(true);

		$copyObj->setToaId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Tecnicooperativaacueducto Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     TecnicooperativaacueductoPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new TecnicooperativaacueductoPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Tecnicooperativo object.
	 *
	 * @param      Tecnicooperativo $v
	 * @return     Tecnicooperativaacueducto The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTecnicooperativo(Tecnicooperativo $v = null)
	{
		if ($v === null) {
			$this->setToaTopId(NULL);
		} else {
			$this->setToaTopId($v->getTopId());
		}

		$this->aTecnicooperativo = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tecnicooperativo object, it will not be re-added.
		if ($v !== null) {
			$v->addTecnicooperativaacueducto($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tecnicooperativo object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tecnicooperativo The associated Tecnicooperativo object.
	 * @throws     PropelException
	 */
	public function getTecnicooperativo(PropelPDO $con = null)
	{
		if ($this->aTecnicooperativo === null && ($this->toa_top_id !== null)) {
			$this->aTecnicooperativo = TecnicooperativoPeer::retrieveByPk($this->toa_top_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTecnicooperativo->addTecnicooperativaacueductos($this);
			 */
		}
		return $this->aTecnicooperativo;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

			$this->aTecnicooperativo = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseTecnicooperativaacueducto:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseTecnicooperativaacueducto::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseTecnicooperativaacueducto
