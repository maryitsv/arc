<?php

/**
 * Base static class for performing query and update operations on the 'disposicionfinalresiduosaseo' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
<<<<<<< HEAD
 * 07/29/10 01:11:06
=======
<<<<<<< HEAD
 * 07/29/10 12:37:26
=======
<<<<<<< HEAD
 * 07/29/10 00:06:56
=======
 * 07/28/10 21:52:34
>>>>>>> d566463288c5b8110a13446cf8dcc22996c79238
>>>>>>> 48ea370b158b87b5f84de3ad8d71891aac6362b0
>>>>>>> 424fbbb7da7e7b7dd07c377772bb35df6fa5351d
 *
 * @package    lib.model.om
 */
abstract class BaseDisposicionfinalresiduosaseoPeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'disposicionfinalresiduosaseo';

	/** the related Propel class for this table */
	const OM_CLASS = 'Disposicionfinalresiduosaseo';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.Disposicionfinalresiduosaseo';

	/** the related TableMap class for this table */
	const TM_CLASS = 'DisposicionfinalresiduosaseoTableMap';
	
	/** The total number of columns. */
	const NUM_COLUMNS = 45;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the DFR_ID field */
	const DFR_ID = 'disposicionfinalresiduosaseo.DFR_ID';

	/** the column name for the DFR_AUTORIDAD_AUTONOMA_ID field */
	const DFR_AUTORIDAD_AUTONOMA_ID = 'disposicionfinalresiduosaseo.DFR_AUTORIDAD_AUTONOMA_ID';

	/** the column name for the DFR_ESTADO_VIA_ACCESO_SITIO_ID field */
	const DFR_ESTADO_VIA_ACCESO_SITIO_ID = 'disposicionfinalresiduosaseo.DFR_ESTADO_VIA_ACCESO_SITIO_ID';

	/** the column name for the DFR_DEPARTAMENTO_DISPOCISION_ID field */
	const DFR_DEPARTAMENTO_DISPOCISION_ID = 'disposicionfinalresiduosaseo.DFR_DEPARTAMENTO_DISPOCISION_ID';

	/** the column name for the DFR_MUNICIPIO_DISPOSICION_ID field */
	const DFR_MUNICIPIO_DISPOSICION_ID = 'disposicionfinalresiduosaseo.DFR_MUNICIPIO_DISPOSICION_ID';

	/** the column name for the DFR_TOP_ID field */
	const DFR_TOP_ID = 'disposicionfinalresiduosaseo.DFR_TOP_ID';

	/** the column name for the DFR_CONTRATA_DISPOSICION_FINAL field */
	const DFR_CONTRATA_DISPOSICION_FINAL = 'disposicionfinalresiduosaseo.DFR_CONTRATA_DISPOSICION_FINAL';

	/** the column name for the DFR_NOMBRE_ENTIDAD_PRESTADORA_SERVICIO_DISPOSICION field */
	const DFR_NOMBRE_ENTIDAD_PRESTADORA_SERVICIO_DISPOSICION = 'disposicionfinalresiduosaseo.DFR_NOMBRE_ENTIDAD_PRESTADORA_SERVICIO_DISPOSICION';

	/** the column name for the DFR_CORREGIMIENTO_DISPOSICION field */
	const DFR_CORREGIMIENTO_DISPOSICION = 'disposicionfinalresiduosaseo.DFR_CORREGIMIENTO_DISPOSICION';

	/** the column name for the DFR_VEREDA_DISPOSICION field */
	const DFR_VEREDA_DISPOSICION = 'disposicionfinalresiduosaseo.DFR_VEREDA_DISPOSICION';

	/** the column name for the DFR_CUENTA_AUTORIZACION_AMBIENTAL_DISPOSICION field */
	const DFR_CUENTA_AUTORIZACION_AMBIENTAL_DISPOSICION = 'disposicionfinalresiduosaseo.DFR_CUENTA_AUTORIZACION_AMBIENTAL_DISPOSICION';

	/** the column name for the DFR_TIPO_AUTORIZACION_AMBIENTAL field */
	const DFR_TIPO_AUTORIZACION_AMBIENTAL = 'disposicionfinalresiduosaseo.DFR_TIPO_AUTORIZACION_AMBIENTAL';

	/** the column name for the DFR_RESOLUCION_AUTORIZA_DISPOSICION field */
	const DFR_RESOLUCION_AUTORIZA_DISPOSICION = 'disposicionfinalresiduosaseo.DFR_RESOLUCION_AUTORIZA_DISPOSICION';

	/** the column name for the DFR_FECHA_RESOLUCION field */
	const DFR_FECHA_RESOLUCION = 'disposicionfinalresiduosaseo.DFR_FECHA_RESOLUCION';

	/** the column name for the DFR_FECHA_TERMINACION_RESOLUCION field */
	const DFR_FECHA_TERMINACION_RESOLUCION = 'disposicionfinalresiduosaseo.DFR_FECHA_TERMINACION_RESOLUCION';

	/** the column name for the DFR_FECHA_TERMINACION_VIDA_UTIL_SITIO_DISPOSICION field */
	const DFR_FECHA_TERMINACION_VIDA_UTIL_SITIO_DISPOSICION = 'disposicionfinalresiduosaseo.DFR_FECHA_TERMINACION_VIDA_UTIL_SITIO_DISPOSICION';

	/** the column name for the DFR_CANTIDAD_ANUAL_RESIDUOS_BOTADERO_CIELO_ABIERTO field */
	const DFR_CANTIDAD_ANUAL_RESIDUOS_BOTADERO_CIELO_ABIERTO = 'disposicionfinalresiduosaseo.DFR_CANTIDAD_ANUAL_RESIDUOS_BOTADERO_CIELO_ABIERTO';

	/** the column name for the DFR_CANTIDAD_ANUAL_RESIDUOS_RELLENO_SANITARIO field */
	const DFR_CANTIDAD_ANUAL_RESIDUOS_RELLENO_SANITARIO = 'disposicionfinalresiduosaseo.DFR_CANTIDAD_ANUAL_RESIDUOS_RELLENO_SANITARIO';

	/** the column name for the DFR_DIST_CENTRO_POBLADO_MAS_CERCANO_SITIO field */
	const DFR_DIST_CENTRO_POBLADO_MAS_CERCANO_SITIO = 'disposicionfinalresiduosaseo.DFR_DIST_CENTRO_POBLADO_MAS_CERCANO_SITIO';

	/** the column name for the DFR_DIST_CUERPO_AGUA_MAS_CERCANO_SITIO field */
	const DFR_DIST_CUERPO_AGUA_MAS_CERCANO_SITIO = 'disposicionfinalresiduosaseo.DFR_DIST_CUERPO_AGUA_MAS_CERCANO_SITIO';

	/** the column name for the DRF_ANIOS_UTILIZACION_SITIO field */
	const DRF_ANIOS_UTILIZACION_SITIO = 'disposicionfinalresiduosaseo.DRF_ANIOS_UTILIZACION_SITIO';

	/** the column name for the DFR_AREA_DESTINADA_PARA_DISPOSICION_SITIO field */
	const DFR_AREA_DESTINADA_PARA_DISPOSICION_SITIO = 'disposicionfinalresiduosaseo.DFR_AREA_DESTINADA_PARA_DISPOSICION_SITIO';

	/** the column name for the DFR_SI_RELLENO_TIPO_RELLENO field */
	const DFR_SI_RELLENO_TIPO_RELLENO = 'disposicionfinalresiduosaseo.DFR_SI_RELLENO_TIPO_RELLENO';

	/** the column name for the DFR_PRESENCIA_RECICLADORES_SITIO field */
	const DFR_PRESENCIA_RECICLADORES_SITIO = 'disposicionfinalresiduosaseo.DFR_PRESENCIA_RECICLADORES_SITIO';

	/** the column name for the DFR_CANTIDAD_PERSONAS_SITIO field */
	const DFR_CANTIDAD_PERSONAS_SITIO = 'disposicionfinalresiduosaseo.DFR_CANTIDAD_PERSONAS_SITIO';

	/** the column name for the DFR_TRATAMIENTO_LIXIVIADOS_SITIO field */
	const DFR_TRATAMIENTO_LIXIVIADOS_SITIO = 'disposicionfinalresiduosaseo.DFR_TRATAMIENTO_LIXIVIADOS_SITIO';

	/** the column name for the DFR_TIPO_TRATAMIENTO_LIXIVIADOS_SITIO field */
	const DFR_TIPO_TRATAMIENTO_LIXIVIADOS_SITIO = 'disposicionfinalresiduosaseo.DFR_TIPO_TRATAMIENTO_LIXIVIADOS_SITIO';

	/** the column name for the DFR_LIXI_ENTRADA_FECHA field */
	const DFR_LIXI_ENTRADA_FECHA = 'disposicionfinalresiduosaseo.DFR_LIXI_ENTRADA_FECHA';

	/** the column name for the DFR_LIXI_ENTRADA_CAUDAL field */
	const DFR_LIXI_ENTRADA_CAUDAL = 'disposicionfinalresiduosaseo.DFR_LIXI_ENTRADA_CAUDAL';

	/** the column name for the DFR_LIXI_ENTRADA_DBO5 field */
	const DFR_LIXI_ENTRADA_DBO5 = 'disposicionfinalresiduosaseo.DFR_LIXI_ENTRADA_DBO5';

	/** the column name for the DFR_LIXI_ENTRADA_SST field */
	const DFR_LIXI_ENTRADA_SST = 'disposicionfinalresiduosaseo.DFR_LIXI_ENTRADA_SST';

	/** the column name for the DFR_LIXI_SALIDA_FECHA2 field */
	const DFR_LIXI_SALIDA_FECHA2 = 'disposicionfinalresiduosaseo.DFR_LIXI_SALIDA_FECHA2';

	/** the column name for the DFR_LIXI_SALIDA_CAUDAL2 field */
	const DFR_LIXI_SALIDA_CAUDAL2 = 'disposicionfinalresiduosaseo.DFR_LIXI_SALIDA_CAUDAL2';

	/** the column name for the DFR_LIXI_SALIDA_DBO6 field */
	const DFR_LIXI_SALIDA_DBO6 = 'disposicionfinalresiduosaseo.DFR_LIXI_SALIDA_DBO6';

	/** the column name for the DFR_LIXI_SALIDA_SST2 field */
	const DFR_LIXI_SALIDA_SST2 = 'disposicionfinalresiduosaseo.DFR_LIXI_SALIDA_SST2';

	/** the column name for the DFR_DESCARGA_LIXI_RIO field */
	const DFR_DESCARGA_LIXI_RIO = 'disposicionfinalresiduosaseo.DFR_DESCARGA_LIXI_RIO';

	/** the column name for the DFR_DESCARGA_LIXI_LAGO field */
	const DFR_DESCARGA_LIXI_LAGO = 'disposicionfinalresiduosaseo.DFR_DESCARGA_LIXI_LAGO';

	/** the column name for the DFR_DESCARGA_LIXI_MAR field */
	const DFR_DESCARGA_LIXI_MAR = 'disposicionfinalresiduosaseo.DFR_DESCARGA_LIXI_MAR';

	/** the column name for the DFR_DESCARGA_LIXI_SUELO field */
	const DFR_DESCARGA_LIXI_SUELO = 'disposicionfinalresiduosaseo.DFR_DESCARGA_LIXI_SUELO';

	/** the column name for the DFR_DESCARGA_LIXI_RIO_NOMBRE field */
	const DFR_DESCARGA_LIXI_RIO_NOMBRE = 'disposicionfinalresiduosaseo.DFR_DESCARGA_LIXI_RIO_NOMBRE';

	/** the column name for the DFR_DESCARGA_LIXI_LAGO_NOMBRE field */
	const DFR_DESCARGA_LIXI_LAGO_NOMBRE = 'disposicionfinalresiduosaseo.DFR_DESCARGA_LIXI_LAGO_NOMBRE';

	/** the column name for the DFR_DESCARGA_LIXI_MAR_NOMBRE field */
	const DFR_DESCARGA_LIXI_MAR_NOMBRE = 'disposicionfinalresiduosaseo.DFR_DESCARGA_LIXI_MAR_NOMBRE';

	/** the column name for the DFR_DESCARGA_LIXI_SUELO_NOMBRE field */
	const DFR_DESCARGA_LIXI_SUELO_NOMBRE = 'disposicionfinalresiduosaseo.DFR_DESCARGA_LIXI_SUELO_NOMBRE';

	/** the column name for the DFR_PROGRAMA_CONTROL_VECTORES field */
	const DFR_PROGRAMA_CONTROL_VECTORES = 'disposicionfinalresiduosaseo.DFR_PROGRAMA_CONTROL_VECTORES';

	/** the column name for the DFR_PROGRAMA_CONTROL_GASES field */
	const DFR_PROGRAMA_CONTROL_GASES = 'disposicionfinalresiduosaseo.DFR_PROGRAMA_CONTROL_GASES';

	/**
	 * An identiy map to hold any loaded instances of Disposicionfinalresiduosaseo objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array Disposicionfinalresiduosaseo[]
	 */
	public static $instances = array();


	// symfony behavior
	
	/**
	 * Indicates whether the current model includes I18N.
	 */
	const IS_I18N = false;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('DfrId', 'DfrAutoridadAutonomaId', 'DfrEstadoViaAccesoSitioId', 'DfrDepartamentoDispocisionId', 'DfrMunicipioDisposicionId', 'DfrTopId', 'DfrContrataDisposicionFinal', 'DfrNombreEntidadPrestadoraServicioDisposicion', 'DfrCorregimientoDisposicion', 'DfrVeredaDisposicion', 'DfrCuentaAutorizacionAmbientalDisposicion', 'DfrTipoAutorizacionAmbiental', 'DfrResolucionAutorizaDisposicion', 'DfrFechaResolucion', 'DfrFechaTerminacionResolucion', 'DfrFechaTerminacionVidaUtilSitioDisposicion', 'DfrCantidadAnualResiduosBotaderoCieloAbierto', 'DfrCantidadAnualResiduosRellenoSanitario', 'DfrDistCentroPobladoMasCercanoSitio', 'DfrDistCuerpoAguaMasCercanoSitio', 'DrfAniosUtilizacionSitio', 'DfrAreaDestinadaParaDisposicionSitio', 'DfrSiRellenoTipoRelleno', 'DfrPresenciaRecicladoresSitio', 'DfrCantidadPersonasSitio', 'DfrTratamientoLixiviadosSitio', 'DfrTipoTratamientoLixiviadosSitio', 'DfrLixiEntradaFecha', 'DfrLixiEntradaCaudal', 'DfrLixiEntradaDbo5', 'DfrLixiEntradaSst', 'DfrLixiSalidaFecha2', 'DfrLixiSalidaCaudal2', 'DfrLixiSalidaDbo6', 'DfrLixiSalidaSst2', 'DfrDescargaLixiRio', 'DfrDescargaLixiLago', 'DfrDescargaLixiMar', 'DfrDescargaLixiSuelo', 'DfrDescargaLixiRioNombre', 'DfrDescargaLixiLagoNombre', 'DfrDescargaLixiMarNombre', 'DfrDescargaLixiSueloNombre', 'DfrProgramaControlVectores', 'DfrProgramaControlGases', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('dfrId', 'dfrAutoridadAutonomaId', 'dfrEstadoViaAccesoSitioId', 'dfrDepartamentoDispocisionId', 'dfrMunicipioDisposicionId', 'dfrTopId', 'dfrContrataDisposicionFinal', 'dfrNombreEntidadPrestadoraServicioDisposicion', 'dfrCorregimientoDisposicion', 'dfrVeredaDisposicion', 'dfrCuentaAutorizacionAmbientalDisposicion', 'dfrTipoAutorizacionAmbiental', 'dfrResolucionAutorizaDisposicion', 'dfrFechaResolucion', 'dfrFechaTerminacionResolucion', 'dfrFechaTerminacionVidaUtilSitioDisposicion', 'dfrCantidadAnualResiduosBotaderoCieloAbierto', 'dfrCantidadAnualResiduosRellenoSanitario', 'dfrDistCentroPobladoMasCercanoSitio', 'dfrDistCuerpoAguaMasCercanoSitio', 'drfAniosUtilizacionSitio', 'dfrAreaDestinadaParaDisposicionSitio', 'dfrSiRellenoTipoRelleno', 'dfrPresenciaRecicladoresSitio', 'dfrCantidadPersonasSitio', 'dfrTratamientoLixiviadosSitio', 'dfrTipoTratamientoLixiviadosSitio', 'dfrLixiEntradaFecha', 'dfrLixiEntradaCaudal', 'dfrLixiEntradaDbo5', 'dfrLixiEntradaSst', 'dfrLixiSalidaFecha2', 'dfrLixiSalidaCaudal2', 'dfrLixiSalidaDbo6', 'dfrLixiSalidaSst2', 'dfrDescargaLixiRio', 'dfrDescargaLixiLago', 'dfrDescargaLixiMar', 'dfrDescargaLixiSuelo', 'dfrDescargaLixiRioNombre', 'dfrDescargaLixiLagoNombre', 'dfrDescargaLixiMarNombre', 'dfrDescargaLixiSueloNombre', 'dfrProgramaControlVectores', 'dfrProgramaControlGases', ),
		BasePeer::TYPE_COLNAME => array (self::DFR_ID, self::DFR_AUTORIDAD_AUTONOMA_ID, self::DFR_ESTADO_VIA_ACCESO_SITIO_ID, self::DFR_DEPARTAMENTO_DISPOCISION_ID, self::DFR_MUNICIPIO_DISPOSICION_ID, self::DFR_TOP_ID, self::DFR_CONTRATA_DISPOSICION_FINAL, self::DFR_NOMBRE_ENTIDAD_PRESTADORA_SERVICIO_DISPOSICION, self::DFR_CORREGIMIENTO_DISPOSICION, self::DFR_VEREDA_DISPOSICION, self::DFR_CUENTA_AUTORIZACION_AMBIENTAL_DISPOSICION, self::DFR_TIPO_AUTORIZACION_AMBIENTAL, self::DFR_RESOLUCION_AUTORIZA_DISPOSICION, self::DFR_FECHA_RESOLUCION, self::DFR_FECHA_TERMINACION_RESOLUCION, self::DFR_FECHA_TERMINACION_VIDA_UTIL_SITIO_DISPOSICION, self::DFR_CANTIDAD_ANUAL_RESIDUOS_BOTADERO_CIELO_ABIERTO, self::DFR_CANTIDAD_ANUAL_RESIDUOS_RELLENO_SANITARIO, self::DFR_DIST_CENTRO_POBLADO_MAS_CERCANO_SITIO, self::DFR_DIST_CUERPO_AGUA_MAS_CERCANO_SITIO, self::DRF_ANIOS_UTILIZACION_SITIO, self::DFR_AREA_DESTINADA_PARA_DISPOSICION_SITIO, self::DFR_SI_RELLENO_TIPO_RELLENO, self::DFR_PRESENCIA_RECICLADORES_SITIO, self::DFR_CANTIDAD_PERSONAS_SITIO, self::DFR_TRATAMIENTO_LIXIVIADOS_SITIO, self::DFR_TIPO_TRATAMIENTO_LIXIVIADOS_SITIO, self::DFR_LIXI_ENTRADA_FECHA, self::DFR_LIXI_ENTRADA_CAUDAL, self::DFR_LIXI_ENTRADA_DBO5, self::DFR_LIXI_ENTRADA_SST, self::DFR_LIXI_SALIDA_FECHA2, self::DFR_LIXI_SALIDA_CAUDAL2, self::DFR_LIXI_SALIDA_DBO6, self::DFR_LIXI_SALIDA_SST2, self::DFR_DESCARGA_LIXI_RIO, self::DFR_DESCARGA_LIXI_LAGO, self::DFR_DESCARGA_LIXI_MAR, self::DFR_DESCARGA_LIXI_SUELO, self::DFR_DESCARGA_LIXI_RIO_NOMBRE, self::DFR_DESCARGA_LIXI_LAGO_NOMBRE, self::DFR_DESCARGA_LIXI_MAR_NOMBRE, self::DFR_DESCARGA_LIXI_SUELO_NOMBRE, self::DFR_PROGRAMA_CONTROL_VECTORES, self::DFR_PROGRAMA_CONTROL_GASES, ),
		BasePeer::TYPE_FIELDNAME => array ('dfr_id', 'dfr_autoridad_autonoma_id', 'dfr_estado_via_acceso_sitio_id', 'dfr_departamento_dispocision_id', 'dfr_municipio_disposicion_id', 'dfr_top_id', 'dfr_contrata_disposicion_final', 'dfr_nombre_entidad_prestadora_servicio_disposicion', 'dfr_corregimiento_disposicion', 'dfr_vereda_disposicion', 'dfr_cuenta_autorizacion_ambiental_disposicion', 'dfr_tipo_autorizacion_ambiental', 'dfr_resolucion_autoriza_disposicion', 'dfr_fecha_resolucion', 'dfr_fecha_terminacion_resolucion', 'dfr_fecha_terminacion_vida_util_sitio_disposicion', 'dfr_cantidad_anual_residuos_botadero_cielo_abierto', 'dfr_cantidad_anual_residuos_relleno_sanitario', 'dfr_dist_centro_poblado_mas_cercano_sitio', 'dfr_dist_cuerpo_agua_mas_cercano_sitio', 'drf_anios_utilizacion_sitio', 'dfr_area_destinada_para_disposicion_sitio', 'dfr_si_relleno_tipo_relleno', 'dfr_presencia_recicladores_sitio', 'dfr_cantidad_personas_sitio', 'dfr_tratamiento_lixiviados_sitio', 'dfr_tipo_tratamiento_lixiviados_sitio', 'dfr_lixi_entrada_fecha', 'dfr_lixi_entrada_caudal', 'dfr_lixi_entrada_dbo5', 'dfr_lixi_entrada_sst', 'dfr_lixi_salida_fecha2', 'dfr_lixi_salida_caudal2', 'dfr_lixi_salida_dbo6', 'dfr_lixi_salida_sst2', 'dfr_descarga_lixi_rio', 'dfr_descarga_lixi_lago', 'dfr_descarga_lixi_mar', 'dfr_descarga_lixi_suelo', 'dfr_descarga_lixi_rio_nombre', 'dfr_descarga_lixi_lago_nombre', 'dfr_descarga_lixi_mar_nombre', 'dfr_descarga_lixi_suelo_nombre', 'dfr_programa_control_vectores', 'dfr_programa_control_gases', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('DfrId' => 0, 'DfrAutoridadAutonomaId' => 1, 'DfrEstadoViaAccesoSitioId' => 2, 'DfrDepartamentoDispocisionId' => 3, 'DfrMunicipioDisposicionId' => 4, 'DfrTopId' => 5, 'DfrContrataDisposicionFinal' => 6, 'DfrNombreEntidadPrestadoraServicioDisposicion' => 7, 'DfrCorregimientoDisposicion' => 8, 'DfrVeredaDisposicion' => 9, 'DfrCuentaAutorizacionAmbientalDisposicion' => 10, 'DfrTipoAutorizacionAmbiental' => 11, 'DfrResolucionAutorizaDisposicion' => 12, 'DfrFechaResolucion' => 13, 'DfrFechaTerminacionResolucion' => 14, 'DfrFechaTerminacionVidaUtilSitioDisposicion' => 15, 'DfrCantidadAnualResiduosBotaderoCieloAbierto' => 16, 'DfrCantidadAnualResiduosRellenoSanitario' => 17, 'DfrDistCentroPobladoMasCercanoSitio' => 18, 'DfrDistCuerpoAguaMasCercanoSitio' => 19, 'DrfAniosUtilizacionSitio' => 20, 'DfrAreaDestinadaParaDisposicionSitio' => 21, 'DfrSiRellenoTipoRelleno' => 22, 'DfrPresenciaRecicladoresSitio' => 23, 'DfrCantidadPersonasSitio' => 24, 'DfrTratamientoLixiviadosSitio' => 25, 'DfrTipoTratamientoLixiviadosSitio' => 26, 'DfrLixiEntradaFecha' => 27, 'DfrLixiEntradaCaudal' => 28, 'DfrLixiEntradaDbo5' => 29, 'DfrLixiEntradaSst' => 30, 'DfrLixiSalidaFecha2' => 31, 'DfrLixiSalidaCaudal2' => 32, 'DfrLixiSalidaDbo6' => 33, 'DfrLixiSalidaSst2' => 34, 'DfrDescargaLixiRio' => 35, 'DfrDescargaLixiLago' => 36, 'DfrDescargaLixiMar' => 37, 'DfrDescargaLixiSuelo' => 38, 'DfrDescargaLixiRioNombre' => 39, 'DfrDescargaLixiLagoNombre' => 40, 'DfrDescargaLixiMarNombre' => 41, 'DfrDescargaLixiSueloNombre' => 42, 'DfrProgramaControlVectores' => 43, 'DfrProgramaControlGases' => 44, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('dfrId' => 0, 'dfrAutoridadAutonomaId' => 1, 'dfrEstadoViaAccesoSitioId' => 2, 'dfrDepartamentoDispocisionId' => 3, 'dfrMunicipioDisposicionId' => 4, 'dfrTopId' => 5, 'dfrContrataDisposicionFinal' => 6, 'dfrNombreEntidadPrestadoraServicioDisposicion' => 7, 'dfrCorregimientoDisposicion' => 8, 'dfrVeredaDisposicion' => 9, 'dfrCuentaAutorizacionAmbientalDisposicion' => 10, 'dfrTipoAutorizacionAmbiental' => 11, 'dfrResolucionAutorizaDisposicion' => 12, 'dfrFechaResolucion' => 13, 'dfrFechaTerminacionResolucion' => 14, 'dfrFechaTerminacionVidaUtilSitioDisposicion' => 15, 'dfrCantidadAnualResiduosBotaderoCieloAbierto' => 16, 'dfrCantidadAnualResiduosRellenoSanitario' => 17, 'dfrDistCentroPobladoMasCercanoSitio' => 18, 'dfrDistCuerpoAguaMasCercanoSitio' => 19, 'drfAniosUtilizacionSitio' => 20, 'dfrAreaDestinadaParaDisposicionSitio' => 21, 'dfrSiRellenoTipoRelleno' => 22, 'dfrPresenciaRecicladoresSitio' => 23, 'dfrCantidadPersonasSitio' => 24, 'dfrTratamientoLixiviadosSitio' => 25, 'dfrTipoTratamientoLixiviadosSitio' => 26, 'dfrLixiEntradaFecha' => 27, 'dfrLixiEntradaCaudal' => 28, 'dfrLixiEntradaDbo5' => 29, 'dfrLixiEntradaSst' => 30, 'dfrLixiSalidaFecha2' => 31, 'dfrLixiSalidaCaudal2' => 32, 'dfrLixiSalidaDbo6' => 33, 'dfrLixiSalidaSst2' => 34, 'dfrDescargaLixiRio' => 35, 'dfrDescargaLixiLago' => 36, 'dfrDescargaLixiMar' => 37, 'dfrDescargaLixiSuelo' => 38, 'dfrDescargaLixiRioNombre' => 39, 'dfrDescargaLixiLagoNombre' => 40, 'dfrDescargaLixiMarNombre' => 41, 'dfrDescargaLixiSueloNombre' => 42, 'dfrProgramaControlVectores' => 43, 'dfrProgramaControlGases' => 44, ),
		BasePeer::TYPE_COLNAME => array (self::DFR_ID => 0, self::DFR_AUTORIDAD_AUTONOMA_ID => 1, self::DFR_ESTADO_VIA_ACCESO_SITIO_ID => 2, self::DFR_DEPARTAMENTO_DISPOCISION_ID => 3, self::DFR_MUNICIPIO_DISPOSICION_ID => 4, self::DFR_TOP_ID => 5, self::DFR_CONTRATA_DISPOSICION_FINAL => 6, self::DFR_NOMBRE_ENTIDAD_PRESTADORA_SERVICIO_DISPOSICION => 7, self::DFR_CORREGIMIENTO_DISPOSICION => 8, self::DFR_VEREDA_DISPOSICION => 9, self::DFR_CUENTA_AUTORIZACION_AMBIENTAL_DISPOSICION => 10, self::DFR_TIPO_AUTORIZACION_AMBIENTAL => 11, self::DFR_RESOLUCION_AUTORIZA_DISPOSICION => 12, self::DFR_FECHA_RESOLUCION => 13, self::DFR_FECHA_TERMINACION_RESOLUCION => 14, self::DFR_FECHA_TERMINACION_VIDA_UTIL_SITIO_DISPOSICION => 15, self::DFR_CANTIDAD_ANUAL_RESIDUOS_BOTADERO_CIELO_ABIERTO => 16, self::DFR_CANTIDAD_ANUAL_RESIDUOS_RELLENO_SANITARIO => 17, self::DFR_DIST_CENTRO_POBLADO_MAS_CERCANO_SITIO => 18, self::DFR_DIST_CUERPO_AGUA_MAS_CERCANO_SITIO => 19, self::DRF_ANIOS_UTILIZACION_SITIO => 20, self::DFR_AREA_DESTINADA_PARA_DISPOSICION_SITIO => 21, self::DFR_SI_RELLENO_TIPO_RELLENO => 22, self::DFR_PRESENCIA_RECICLADORES_SITIO => 23, self::DFR_CANTIDAD_PERSONAS_SITIO => 24, self::DFR_TRATAMIENTO_LIXIVIADOS_SITIO => 25, self::DFR_TIPO_TRATAMIENTO_LIXIVIADOS_SITIO => 26, self::DFR_LIXI_ENTRADA_FECHA => 27, self::DFR_LIXI_ENTRADA_CAUDAL => 28, self::DFR_LIXI_ENTRADA_DBO5 => 29, self::DFR_LIXI_ENTRADA_SST => 30, self::DFR_LIXI_SALIDA_FECHA2 => 31, self::DFR_LIXI_SALIDA_CAUDAL2 => 32, self::DFR_LIXI_SALIDA_DBO6 => 33, self::DFR_LIXI_SALIDA_SST2 => 34, self::DFR_DESCARGA_LIXI_RIO => 35, self::DFR_DESCARGA_LIXI_LAGO => 36, self::DFR_DESCARGA_LIXI_MAR => 37, self::DFR_DESCARGA_LIXI_SUELO => 38, self::DFR_DESCARGA_LIXI_RIO_NOMBRE => 39, self::DFR_DESCARGA_LIXI_LAGO_NOMBRE => 40, self::DFR_DESCARGA_LIXI_MAR_NOMBRE => 41, self::DFR_DESCARGA_LIXI_SUELO_NOMBRE => 42, self::DFR_PROGRAMA_CONTROL_VECTORES => 43, self::DFR_PROGRAMA_CONTROL_GASES => 44, ),
		BasePeer::TYPE_FIELDNAME => array ('dfr_id' => 0, 'dfr_autoridad_autonoma_id' => 1, 'dfr_estado_via_acceso_sitio_id' => 2, 'dfr_departamento_dispocision_id' => 3, 'dfr_municipio_disposicion_id' => 4, 'dfr_top_id' => 5, 'dfr_contrata_disposicion_final' => 6, 'dfr_nombre_entidad_prestadora_servicio_disposicion' => 7, 'dfr_corregimiento_disposicion' => 8, 'dfr_vereda_disposicion' => 9, 'dfr_cuenta_autorizacion_ambiental_disposicion' => 10, 'dfr_tipo_autorizacion_ambiental' => 11, 'dfr_resolucion_autoriza_disposicion' => 12, 'dfr_fecha_resolucion' => 13, 'dfr_fecha_terminacion_resolucion' => 14, 'dfr_fecha_terminacion_vida_util_sitio_disposicion' => 15, 'dfr_cantidad_anual_residuos_botadero_cielo_abierto' => 16, 'dfr_cantidad_anual_residuos_relleno_sanitario' => 17, 'dfr_dist_centro_poblado_mas_cercano_sitio' => 18, 'dfr_dist_cuerpo_agua_mas_cercano_sitio' => 19, 'drf_anios_utilizacion_sitio' => 20, 'dfr_area_destinada_para_disposicion_sitio' => 21, 'dfr_si_relleno_tipo_relleno' => 22, 'dfr_presencia_recicladores_sitio' => 23, 'dfr_cantidad_personas_sitio' => 24, 'dfr_tratamiento_lixiviados_sitio' => 25, 'dfr_tipo_tratamiento_lixiviados_sitio' => 26, 'dfr_lixi_entrada_fecha' => 27, 'dfr_lixi_entrada_caudal' => 28, 'dfr_lixi_entrada_dbo5' => 29, 'dfr_lixi_entrada_sst' => 30, 'dfr_lixi_salida_fecha2' => 31, 'dfr_lixi_salida_caudal2' => 32, 'dfr_lixi_salida_dbo6' => 33, 'dfr_lixi_salida_sst2' => 34, 'dfr_descarga_lixi_rio' => 35, 'dfr_descarga_lixi_lago' => 36, 'dfr_descarga_lixi_mar' => 37, 'dfr_descarga_lixi_suelo' => 38, 'dfr_descarga_lixi_rio_nombre' => 39, 'dfr_descarga_lixi_lago_nombre' => 40, 'dfr_descarga_lixi_mar_nombre' => 41, 'dfr_descarga_lixi_suelo_nombre' => 42, 'dfr_programa_control_vectores' => 43, 'dfr_programa_control_gases' => 44, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, )
	);

	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. DisposicionfinalresiduosaseoPeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(DisposicionfinalresiduosaseoPeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_ID);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_AUTORIDAD_AUTONOMA_ID);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_DEPARTAMENTO_DISPOCISION_ID);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_MUNICIPIO_DISPOSICION_ID);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_CONTRATA_DISPOSICION_FINAL);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_NOMBRE_ENTIDAD_PRESTADORA_SERVICIO_DISPOSICION);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_CORREGIMIENTO_DISPOSICION);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_VEREDA_DISPOSICION);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_CUENTA_AUTORIZACION_AMBIENTAL_DISPOSICION);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_TIPO_AUTORIZACION_AMBIENTAL);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_RESOLUCION_AUTORIZA_DISPOSICION);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_FECHA_RESOLUCION);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_FECHA_TERMINACION_RESOLUCION);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_FECHA_TERMINACION_VIDA_UTIL_SITIO_DISPOSICION);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_CANTIDAD_ANUAL_RESIDUOS_BOTADERO_CIELO_ABIERTO);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_CANTIDAD_ANUAL_RESIDUOS_RELLENO_SANITARIO);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_DIST_CENTRO_POBLADO_MAS_CERCANO_SITIO);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_DIST_CUERPO_AGUA_MAS_CERCANO_SITIO);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DRF_ANIOS_UTILIZACION_SITIO);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_AREA_DESTINADA_PARA_DISPOSICION_SITIO);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_SI_RELLENO_TIPO_RELLENO);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_PRESENCIA_RECICLADORES_SITIO);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_CANTIDAD_PERSONAS_SITIO);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_TRATAMIENTO_LIXIVIADOS_SITIO);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_TIPO_TRATAMIENTO_LIXIVIADOS_SITIO);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_LIXI_ENTRADA_FECHA);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_LIXI_ENTRADA_CAUDAL);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_LIXI_ENTRADA_DBO5);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_LIXI_ENTRADA_SST);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_LIXI_SALIDA_FECHA2);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_LIXI_SALIDA_CAUDAL2);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_LIXI_SALIDA_DBO6);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_LIXI_SALIDA_SST2);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_DESCARGA_LIXI_RIO);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_DESCARGA_LIXI_LAGO);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_DESCARGA_LIXI_MAR);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_DESCARGA_LIXI_SUELO);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_DESCARGA_LIXI_RIO_NOMBRE);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_DESCARGA_LIXI_LAGO_NOMBRE);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_DESCARGA_LIXI_MAR_NOMBRE);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_DESCARGA_LIXI_SUELO_NOMBRE);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_PROGRAMA_CONTROL_VECTORES);
		$criteria->addSelectColumn(DisposicionfinalresiduosaseoPeer::DFR_PROGRAMA_CONTROL_GASES);
	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(DisposicionfinalresiduosaseoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(DisposicionfinalresiduosaseoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $criteria, $con);
		}

		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     Disposicionfinalresiduosaseo
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = DisposicionfinalresiduosaseoPeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return DisposicionfinalresiduosaseoPeer::populateObjects(DisposicionfinalresiduosaseoPeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(DisposicionfinalresiduosaseoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);
		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $criteria, $con);
		}


		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      Disposicionfinalresiduosaseo $value A Disposicionfinalresiduosaseo object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(Disposicionfinalresiduosaseo $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getDfrId();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A Disposicionfinalresiduosaseo object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof Disposicionfinalresiduosaseo) {
				$key = (string) $value->getDfrId();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or Disposicionfinalresiduosaseo object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     Disposicionfinalresiduosaseo Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Method to invalidate the instance pool of all tables related to disposicionfinalresiduosaseo
	 * by a foreign key with ON DELETE CASCADE
	 */
	public static function clearRelatedInstancePool()
	{
	}

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol] === null) {
			return null;
		}
		return (string) $row[$startcol];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = DisposicionfinalresiduosaseoPeer::getOMClass(false);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = DisposicionfinalresiduosaseoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = DisposicionfinalresiduosaseoPeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				DisposicionfinalresiduosaseoPeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the number of rows matching criteria, joining the related Autoridadambiental table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAutoridadambiental(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(DisposicionfinalresiduosaseoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(DisposicionfinalresiduosaseoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_AUTORIDAD_AUTONOMA_ID, AutoridadambientalPeer::AUA_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Estadogeneral table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinEstadogeneral(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(DisposicionfinalresiduosaseoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(DisposicionfinalresiduosaseoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID, EstadogeneralPeer::ESG_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Departamento table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinDepartamento(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(DisposicionfinalresiduosaseoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(DisposicionfinalresiduosaseoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_DEPARTAMENTO_DISPOCISION_ID, DepartamentoPeer::DEP_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Municipio table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinMunicipio(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(DisposicionfinalresiduosaseoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(DisposicionfinalresiduosaseoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_MUNICIPIO_DISPOSICION_ID, MunicipioPeer::MUN_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tecnicooperativo table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTecnicooperativo(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(DisposicionfinalresiduosaseoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(DisposicionfinalresiduosaseoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID, TecnicooperativoPeer::TOP_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of Disposicionfinalresiduosaseo objects pre-filled with their Autoridadambiental objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Disposicionfinalresiduosaseo objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAutoridadambiental(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
		$startcol = (DisposicionfinalresiduosaseoPeer::NUM_COLUMNS - DisposicionfinalresiduosaseoPeer::NUM_LAZY_LOAD_COLUMNS);
		AutoridadambientalPeer::addSelectColumns($criteria);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_AUTORIDAD_AUTONOMA_ID, AutoridadambientalPeer::AUA_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = DisposicionfinalresiduosaseoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = DisposicionfinalresiduosaseoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = DisposicionfinalresiduosaseoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				DisposicionfinalresiduosaseoPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = AutoridadambientalPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = AutoridadambientalPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = AutoridadambientalPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					AutoridadambientalPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded
				
				// Add the $obj1 (Disposicionfinalresiduosaseo) to $obj2 (Autoridadambiental)
				$obj2->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Disposicionfinalresiduosaseo objects pre-filled with their Estadogeneral objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Disposicionfinalresiduosaseo objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinEstadogeneral(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
		$startcol = (DisposicionfinalresiduosaseoPeer::NUM_COLUMNS - DisposicionfinalresiduosaseoPeer::NUM_LAZY_LOAD_COLUMNS);
		EstadogeneralPeer::addSelectColumns($criteria);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID, EstadogeneralPeer::ESG_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = DisposicionfinalresiduosaseoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = DisposicionfinalresiduosaseoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = DisposicionfinalresiduosaseoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				DisposicionfinalresiduosaseoPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = EstadogeneralPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = EstadogeneralPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = EstadogeneralPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					EstadogeneralPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded
				
				// Add the $obj1 (Disposicionfinalresiduosaseo) to $obj2 (Estadogeneral)
				$obj2->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Disposicionfinalresiduosaseo objects pre-filled with their Departamento objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Disposicionfinalresiduosaseo objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinDepartamento(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
		$startcol = (DisposicionfinalresiduosaseoPeer::NUM_COLUMNS - DisposicionfinalresiduosaseoPeer::NUM_LAZY_LOAD_COLUMNS);
		DepartamentoPeer::addSelectColumns($criteria);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_DEPARTAMENTO_DISPOCISION_ID, DepartamentoPeer::DEP_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = DisposicionfinalresiduosaseoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = DisposicionfinalresiduosaseoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = DisposicionfinalresiduosaseoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				DisposicionfinalresiduosaseoPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = DepartamentoPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = DepartamentoPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = DepartamentoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					DepartamentoPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded
				
				// Add the $obj1 (Disposicionfinalresiduosaseo) to $obj2 (Departamento)
				$obj2->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Disposicionfinalresiduosaseo objects pre-filled with their Municipio objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Disposicionfinalresiduosaseo objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinMunicipio(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
		$startcol = (DisposicionfinalresiduosaseoPeer::NUM_COLUMNS - DisposicionfinalresiduosaseoPeer::NUM_LAZY_LOAD_COLUMNS);
		MunicipioPeer::addSelectColumns($criteria);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_MUNICIPIO_DISPOSICION_ID, MunicipioPeer::MUN_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = DisposicionfinalresiduosaseoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = DisposicionfinalresiduosaseoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = DisposicionfinalresiduosaseoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				DisposicionfinalresiduosaseoPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = MunicipioPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = MunicipioPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = MunicipioPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					MunicipioPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded
				
				// Add the $obj1 (Disposicionfinalresiduosaseo) to $obj2 (Municipio)
				$obj2->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Disposicionfinalresiduosaseo objects pre-filled with their Tecnicooperativo objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Disposicionfinalresiduosaseo objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTecnicooperativo(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
		$startcol = (DisposicionfinalresiduosaseoPeer::NUM_COLUMNS - DisposicionfinalresiduosaseoPeer::NUM_LAZY_LOAD_COLUMNS);
		TecnicooperativoPeer::addSelectColumns($criteria);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID, TecnicooperativoPeer::TOP_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = DisposicionfinalresiduosaseoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = DisposicionfinalresiduosaseoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = DisposicionfinalresiduosaseoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				DisposicionfinalresiduosaseoPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TecnicooperativoPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TecnicooperativoPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TecnicooperativoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TecnicooperativoPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded
				
				// Add the $obj1 (Disposicionfinalresiduosaseo) to $obj2 (Tecnicooperativo)
				$obj2->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining all related tables
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAll(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(DisposicionfinalresiduosaseoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(DisposicionfinalresiduosaseoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_AUTORIDAD_AUTONOMA_ID, AutoridadambientalPeer::AUA_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID, EstadogeneralPeer::ESG_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_DEPARTAMENTO_DISPOCISION_ID, DepartamentoPeer::DEP_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_MUNICIPIO_DISPOSICION_ID, MunicipioPeer::MUN_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID, TecnicooperativoPeer::TOP_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}

	/**
	 * Selects a collection of Disposicionfinalresiduosaseo objects pre-filled with all related objects.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Disposicionfinalresiduosaseo objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAll(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
		$startcol2 = (DisposicionfinalresiduosaseoPeer::NUM_COLUMNS - DisposicionfinalresiduosaseoPeer::NUM_LAZY_LOAD_COLUMNS);

		AutoridadambientalPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (AutoridadambientalPeer::NUM_COLUMNS - AutoridadambientalPeer::NUM_LAZY_LOAD_COLUMNS);

		EstadogeneralPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (EstadogeneralPeer::NUM_COLUMNS - EstadogeneralPeer::NUM_LAZY_LOAD_COLUMNS);

		DepartamentoPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (DepartamentoPeer::NUM_COLUMNS - DepartamentoPeer::NUM_LAZY_LOAD_COLUMNS);

		MunicipioPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (MunicipioPeer::NUM_COLUMNS - MunicipioPeer::NUM_LAZY_LOAD_COLUMNS);

		TecnicooperativoPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TecnicooperativoPeer::NUM_COLUMNS - TecnicooperativoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_AUTORIDAD_AUTONOMA_ID, AutoridadambientalPeer::AUA_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID, EstadogeneralPeer::ESG_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_DEPARTAMENTO_DISPOCISION_ID, DepartamentoPeer::DEP_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_MUNICIPIO_DISPOSICION_ID, MunicipioPeer::MUN_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID, TecnicooperativoPeer::TOP_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = DisposicionfinalresiduosaseoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = DisposicionfinalresiduosaseoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = DisposicionfinalresiduosaseoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				DisposicionfinalresiduosaseoPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined Autoridadambiental rows

			$key2 = AutoridadambientalPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = AutoridadambientalPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = AutoridadambientalPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					AutoridadambientalPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj2 (Autoridadambiental)
				$obj2->addDisposicionfinalresiduosaseo($obj1);
			} // if joined row not null

			// Add objects for joined Estadogeneral rows

			$key3 = EstadogeneralPeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = EstadogeneralPeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$cls = EstadogeneralPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					EstadogeneralPeer::addInstanceToPool($obj3, $key3);
				} // if obj3 loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj3 (Estadogeneral)
				$obj3->addDisposicionfinalresiduosaseo($obj1);
			} // if joined row not null

			// Add objects for joined Departamento rows

			$key4 = DepartamentoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
			if ($key4 !== null) {
				$obj4 = DepartamentoPeer::getInstanceFromPool($key4);
				if (!$obj4) {

					$cls = DepartamentoPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					DepartamentoPeer::addInstanceToPool($obj4, $key4);
				} // if obj4 loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj4 (Departamento)
				$obj4->addDisposicionfinalresiduosaseo($obj1);
			} // if joined row not null

			// Add objects for joined Municipio rows

			$key5 = MunicipioPeer::getPrimaryKeyHashFromRow($row, $startcol5);
			if ($key5 !== null) {
				$obj5 = MunicipioPeer::getInstanceFromPool($key5);
				if (!$obj5) {

					$cls = MunicipioPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					MunicipioPeer::addInstanceToPool($obj5, $key5);
				} // if obj5 loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj5 (Municipio)
				$obj5->addDisposicionfinalresiduosaseo($obj1);
			} // if joined row not null

			// Add objects for joined Tecnicooperativo rows

			$key6 = TecnicooperativoPeer::getPrimaryKeyHashFromRow($row, $startcol6);
			if ($key6 !== null) {
				$obj6 = TecnicooperativoPeer::getInstanceFromPool($key6);
				if (!$obj6) {

					$cls = TecnicooperativoPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TecnicooperativoPeer::addInstanceToPool($obj6, $key6);
				} // if obj6 loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj6 (Tecnicooperativo)
				$obj6->addDisposicionfinalresiduosaseo($obj1);
			} // if joined row not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Autoridadambiental table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptAutoridadambiental(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(DisposicionfinalresiduosaseoPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(DisposicionfinalresiduosaseoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID, EstadogeneralPeer::ESG_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_DEPARTAMENTO_DISPOCISION_ID, DepartamentoPeer::DEP_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_MUNICIPIO_DISPOSICION_ID, MunicipioPeer::MUN_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID, TecnicooperativoPeer::TOP_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Estadogeneral table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptEstadogeneral(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(DisposicionfinalresiduosaseoPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(DisposicionfinalresiduosaseoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_AUTORIDAD_AUTONOMA_ID, AutoridadambientalPeer::AUA_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_DEPARTAMENTO_DISPOCISION_ID, DepartamentoPeer::DEP_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_MUNICIPIO_DISPOSICION_ID, MunicipioPeer::MUN_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID, TecnicooperativoPeer::TOP_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Departamento table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptDepartamento(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(DisposicionfinalresiduosaseoPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(DisposicionfinalresiduosaseoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_AUTORIDAD_AUTONOMA_ID, AutoridadambientalPeer::AUA_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID, EstadogeneralPeer::ESG_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_MUNICIPIO_DISPOSICION_ID, MunicipioPeer::MUN_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID, TecnicooperativoPeer::TOP_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Municipio table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptMunicipio(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(DisposicionfinalresiduosaseoPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(DisposicionfinalresiduosaseoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_AUTORIDAD_AUTONOMA_ID, AutoridadambientalPeer::AUA_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID, EstadogeneralPeer::ESG_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_DEPARTAMENTO_DISPOCISION_ID, DepartamentoPeer::DEP_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID, TecnicooperativoPeer::TOP_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tecnicooperativo table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTecnicooperativo(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(DisposicionfinalresiduosaseoPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(DisposicionfinalresiduosaseoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_AUTORIDAD_AUTONOMA_ID, AutoridadambientalPeer::AUA_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID, EstadogeneralPeer::ESG_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_DEPARTAMENTO_DISPOCISION_ID, DepartamentoPeer::DEP_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_MUNICIPIO_DISPOSICION_ID, MunicipioPeer::MUN_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of Disposicionfinalresiduosaseo objects pre-filled with all related objects except Autoridadambiental.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Disposicionfinalresiduosaseo objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptAutoridadambiental(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
		$startcol2 = (DisposicionfinalresiduosaseoPeer::NUM_COLUMNS - DisposicionfinalresiduosaseoPeer::NUM_LAZY_LOAD_COLUMNS);

		EstadogeneralPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (EstadogeneralPeer::NUM_COLUMNS - EstadogeneralPeer::NUM_LAZY_LOAD_COLUMNS);

		DepartamentoPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (DepartamentoPeer::NUM_COLUMNS - DepartamentoPeer::NUM_LAZY_LOAD_COLUMNS);

		MunicipioPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (MunicipioPeer::NUM_COLUMNS - MunicipioPeer::NUM_LAZY_LOAD_COLUMNS);

		TecnicooperativoPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TecnicooperativoPeer::NUM_COLUMNS - TecnicooperativoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID, EstadogeneralPeer::ESG_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_DEPARTAMENTO_DISPOCISION_ID, DepartamentoPeer::DEP_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_MUNICIPIO_DISPOSICION_ID, MunicipioPeer::MUN_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID, TecnicooperativoPeer::TOP_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = DisposicionfinalresiduosaseoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = DisposicionfinalresiduosaseoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = DisposicionfinalresiduosaseoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				DisposicionfinalresiduosaseoPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Estadogeneral rows

				$key2 = EstadogeneralPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = EstadogeneralPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = EstadogeneralPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					EstadogeneralPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj2 (Estadogeneral)
				$obj2->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row is not null

				// Add objects for joined Departamento rows

				$key3 = DepartamentoPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = DepartamentoPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = DepartamentoPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					DepartamentoPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj3 (Departamento)
				$obj3->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row is not null

				// Add objects for joined Municipio rows

				$key4 = MunicipioPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = MunicipioPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = MunicipioPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					MunicipioPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj4 (Municipio)
				$obj4->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row is not null

				// Add objects for joined Tecnicooperativo rows

				$key5 = TecnicooperativoPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TecnicooperativoPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TecnicooperativoPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TecnicooperativoPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj5 (Tecnicooperativo)
				$obj5->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Disposicionfinalresiduosaseo objects pre-filled with all related objects except Estadogeneral.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Disposicionfinalresiduosaseo objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptEstadogeneral(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
		$startcol2 = (DisposicionfinalresiduosaseoPeer::NUM_COLUMNS - DisposicionfinalresiduosaseoPeer::NUM_LAZY_LOAD_COLUMNS);

		AutoridadambientalPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (AutoridadambientalPeer::NUM_COLUMNS - AutoridadambientalPeer::NUM_LAZY_LOAD_COLUMNS);

		DepartamentoPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (DepartamentoPeer::NUM_COLUMNS - DepartamentoPeer::NUM_LAZY_LOAD_COLUMNS);

		MunicipioPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (MunicipioPeer::NUM_COLUMNS - MunicipioPeer::NUM_LAZY_LOAD_COLUMNS);

		TecnicooperativoPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TecnicooperativoPeer::NUM_COLUMNS - TecnicooperativoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_AUTORIDAD_AUTONOMA_ID, AutoridadambientalPeer::AUA_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_DEPARTAMENTO_DISPOCISION_ID, DepartamentoPeer::DEP_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_MUNICIPIO_DISPOSICION_ID, MunicipioPeer::MUN_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID, TecnicooperativoPeer::TOP_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = DisposicionfinalresiduosaseoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = DisposicionfinalresiduosaseoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = DisposicionfinalresiduosaseoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				DisposicionfinalresiduosaseoPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Autoridadambiental rows

				$key2 = AutoridadambientalPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = AutoridadambientalPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = AutoridadambientalPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					AutoridadambientalPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj2 (Autoridadambiental)
				$obj2->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row is not null

				// Add objects for joined Departamento rows

				$key3 = DepartamentoPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = DepartamentoPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = DepartamentoPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					DepartamentoPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj3 (Departamento)
				$obj3->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row is not null

				// Add objects for joined Municipio rows

				$key4 = MunicipioPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = MunicipioPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = MunicipioPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					MunicipioPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj4 (Municipio)
				$obj4->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row is not null

				// Add objects for joined Tecnicooperativo rows

				$key5 = TecnicooperativoPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TecnicooperativoPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TecnicooperativoPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TecnicooperativoPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj5 (Tecnicooperativo)
				$obj5->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Disposicionfinalresiduosaseo objects pre-filled with all related objects except Departamento.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Disposicionfinalresiduosaseo objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptDepartamento(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
		$startcol2 = (DisposicionfinalresiduosaseoPeer::NUM_COLUMNS - DisposicionfinalresiduosaseoPeer::NUM_LAZY_LOAD_COLUMNS);

		AutoridadambientalPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (AutoridadambientalPeer::NUM_COLUMNS - AutoridadambientalPeer::NUM_LAZY_LOAD_COLUMNS);

		EstadogeneralPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (EstadogeneralPeer::NUM_COLUMNS - EstadogeneralPeer::NUM_LAZY_LOAD_COLUMNS);

		MunicipioPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (MunicipioPeer::NUM_COLUMNS - MunicipioPeer::NUM_LAZY_LOAD_COLUMNS);

		TecnicooperativoPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TecnicooperativoPeer::NUM_COLUMNS - TecnicooperativoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_AUTORIDAD_AUTONOMA_ID, AutoridadambientalPeer::AUA_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID, EstadogeneralPeer::ESG_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_MUNICIPIO_DISPOSICION_ID, MunicipioPeer::MUN_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID, TecnicooperativoPeer::TOP_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = DisposicionfinalresiduosaseoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = DisposicionfinalresiduosaseoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = DisposicionfinalresiduosaseoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				DisposicionfinalresiduosaseoPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Autoridadambiental rows

				$key2 = AutoridadambientalPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = AutoridadambientalPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = AutoridadambientalPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					AutoridadambientalPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj2 (Autoridadambiental)
				$obj2->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row is not null

				// Add objects for joined Estadogeneral rows

				$key3 = EstadogeneralPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = EstadogeneralPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = EstadogeneralPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					EstadogeneralPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj3 (Estadogeneral)
				$obj3->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row is not null

				// Add objects for joined Municipio rows

				$key4 = MunicipioPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = MunicipioPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = MunicipioPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					MunicipioPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj4 (Municipio)
				$obj4->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row is not null

				// Add objects for joined Tecnicooperativo rows

				$key5 = TecnicooperativoPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TecnicooperativoPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TecnicooperativoPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TecnicooperativoPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj5 (Tecnicooperativo)
				$obj5->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Disposicionfinalresiduosaseo objects pre-filled with all related objects except Municipio.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Disposicionfinalresiduosaseo objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptMunicipio(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
		$startcol2 = (DisposicionfinalresiduosaseoPeer::NUM_COLUMNS - DisposicionfinalresiduosaseoPeer::NUM_LAZY_LOAD_COLUMNS);

		AutoridadambientalPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (AutoridadambientalPeer::NUM_COLUMNS - AutoridadambientalPeer::NUM_LAZY_LOAD_COLUMNS);

		EstadogeneralPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (EstadogeneralPeer::NUM_COLUMNS - EstadogeneralPeer::NUM_LAZY_LOAD_COLUMNS);

		DepartamentoPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (DepartamentoPeer::NUM_COLUMNS - DepartamentoPeer::NUM_LAZY_LOAD_COLUMNS);

		TecnicooperativoPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TecnicooperativoPeer::NUM_COLUMNS - TecnicooperativoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_AUTORIDAD_AUTONOMA_ID, AutoridadambientalPeer::AUA_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID, EstadogeneralPeer::ESG_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_DEPARTAMENTO_DISPOCISION_ID, DepartamentoPeer::DEP_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_TOP_ID, TecnicooperativoPeer::TOP_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = DisposicionfinalresiduosaseoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = DisposicionfinalresiduosaseoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = DisposicionfinalresiduosaseoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				DisposicionfinalresiduosaseoPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Autoridadambiental rows

				$key2 = AutoridadambientalPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = AutoridadambientalPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = AutoridadambientalPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					AutoridadambientalPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj2 (Autoridadambiental)
				$obj2->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row is not null

				// Add objects for joined Estadogeneral rows

				$key3 = EstadogeneralPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = EstadogeneralPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = EstadogeneralPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					EstadogeneralPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj3 (Estadogeneral)
				$obj3->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row is not null

				// Add objects for joined Departamento rows

				$key4 = DepartamentoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = DepartamentoPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = DepartamentoPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					DepartamentoPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj4 (Departamento)
				$obj4->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row is not null

				// Add objects for joined Tecnicooperativo rows

				$key5 = TecnicooperativoPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TecnicooperativoPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TecnicooperativoPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TecnicooperativoPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj5 (Tecnicooperativo)
				$obj5->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Disposicionfinalresiduosaseo objects pre-filled with all related objects except Tecnicooperativo.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Disposicionfinalresiduosaseo objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTecnicooperativo(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		DisposicionfinalresiduosaseoPeer::addSelectColumns($criteria);
		$startcol2 = (DisposicionfinalresiduosaseoPeer::NUM_COLUMNS - DisposicionfinalresiduosaseoPeer::NUM_LAZY_LOAD_COLUMNS);

		AutoridadambientalPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (AutoridadambientalPeer::NUM_COLUMNS - AutoridadambientalPeer::NUM_LAZY_LOAD_COLUMNS);

		EstadogeneralPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (EstadogeneralPeer::NUM_COLUMNS - EstadogeneralPeer::NUM_LAZY_LOAD_COLUMNS);

		DepartamentoPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (DepartamentoPeer::NUM_COLUMNS - DepartamentoPeer::NUM_LAZY_LOAD_COLUMNS);

		MunicipioPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (MunicipioPeer::NUM_COLUMNS - MunicipioPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_AUTORIDAD_AUTONOMA_ID, AutoridadambientalPeer::AUA_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_ESTADO_VIA_ACCESO_SITIO_ID, EstadogeneralPeer::ESG_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_DEPARTAMENTO_DISPOCISION_ID, DepartamentoPeer::DEP_ID, $join_behavior);

		$criteria->addJoin(DisposicionfinalresiduosaseoPeer::DFR_MUNICIPIO_DISPOSICION_ID, MunicipioPeer::MUN_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = DisposicionfinalresiduosaseoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = DisposicionfinalresiduosaseoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = DisposicionfinalresiduosaseoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				DisposicionfinalresiduosaseoPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Autoridadambiental rows

				$key2 = AutoridadambientalPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = AutoridadambientalPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = AutoridadambientalPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					AutoridadambientalPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj2 (Autoridadambiental)
				$obj2->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row is not null

				// Add objects for joined Estadogeneral rows

				$key3 = EstadogeneralPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = EstadogeneralPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = EstadogeneralPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					EstadogeneralPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj3 (Estadogeneral)
				$obj3->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row is not null

				// Add objects for joined Departamento rows

				$key4 = DepartamentoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = DepartamentoPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = DepartamentoPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					DepartamentoPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj4 (Departamento)
				$obj4->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row is not null

				// Add objects for joined Municipio rows

				$key5 = MunicipioPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = MunicipioPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = MunicipioPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					MunicipioPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Disposicionfinalresiduosaseo) to the collection in $obj5 (Municipio)
				$obj5->addDisposicionfinalresiduosaseo($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * Add a TableMap instance to the database for this peer class.
	 */
	public static function buildTableMap()
	{
	  $dbMap = Propel::getDatabaseMap(BaseDisposicionfinalresiduosaseoPeer::DATABASE_NAME);
	  if (!$dbMap->hasTable(BaseDisposicionfinalresiduosaseoPeer::TABLE_NAME))
	  {
	    $dbMap->addTableObject(new DisposicionfinalresiduosaseoTableMap());
	  }
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * If $withPrefix is true, the returned path
	 * uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @param      boolean  Whether or not to return the path wit hthe class name 
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass($withPrefix = true)
	{
		return $withPrefix ? DisposicionfinalresiduosaseoPeer::CLASS_DEFAULT : DisposicionfinalresiduosaseoPeer::OM_CLASS;
	}

	/**
	 * Method perform an INSERT on the database, given a Disposicionfinalresiduosaseo or Criteria object.
	 *
	 * @param      mixed $values Criteria or Disposicionfinalresiduosaseo object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{
    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseDisposicionfinalresiduosaseoPeer:doInsert:pre') as $sf_hook)
    {
      if (false !== $sf_hook_retval = call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $values, $con))
      {
        return $sf_hook_retval;
      }
    }

		if ($con === null) {
			$con = Propel::getConnection(DisposicionfinalresiduosaseoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from Disposicionfinalresiduosaseo object
		}

		if ($criteria->containsKey(DisposicionfinalresiduosaseoPeer::DFR_ID) && $criteria->keyContainsValue(DisposicionfinalresiduosaseoPeer::DFR_ID) ) {
			throw new PropelException('Cannot insert a value for auto-increment primary key ('.DisposicionfinalresiduosaseoPeer::DFR_ID.')');
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseDisposicionfinalresiduosaseoPeer:doInsert:post') as $sf_hook)
    {
      call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $values, $con, $pk);
    }

		return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a Disposicionfinalresiduosaseo or Criteria object.
	 *
	 * @param      mixed $values Criteria or Disposicionfinalresiduosaseo object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{
    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseDisposicionfinalresiduosaseoPeer:doUpdate:pre') as $sf_hook)
    {
      if (false !== $sf_hook_retval = call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $values, $con))
      {
        return $sf_hook_retval;
      }
    }

		if ($con === null) {
			$con = Propel::getConnection(DisposicionfinalresiduosaseoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(DisposicionfinalresiduosaseoPeer::DFR_ID);
			$selectCriteria->add(DisposicionfinalresiduosaseoPeer::DFR_ID, $criteria->remove(DisposicionfinalresiduosaseoPeer::DFR_ID), $comparison);

		} else { // $values is Disposicionfinalresiduosaseo object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);

    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseDisposicionfinalresiduosaseoPeer:doUpdate:post') as $sf_hook)
    {
      call_user_func($sf_hook, 'BaseDisposicionfinalresiduosaseoPeer', $values, $con, $ret);
    }

    return $ret;
	}

	/**
	 * Method to DELETE all rows from the disposicionfinalresiduosaseo table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(DisposicionfinalresiduosaseoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(DisposicionfinalresiduosaseoPeer::TABLE_NAME, $con);
			// Because this db requires some delete cascade/set null emulation, we have to
			// clear the cached instance *after* the emulation has happened (since
			// instances get re-added by the select statement contained therein).
			DisposicionfinalresiduosaseoPeer::clearInstancePool();
			DisposicionfinalresiduosaseoPeer::clearRelatedInstancePool();
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a Disposicionfinalresiduosaseo or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or Disposicionfinalresiduosaseo object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(DisposicionfinalresiduosaseoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			DisposicionfinalresiduosaseoPeer::clearInstancePool();
			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof Disposicionfinalresiduosaseo) { // it's a model object
			// invalidate the cache for this single object
			DisposicionfinalresiduosaseoPeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else { // it's a primary key, or an array of pks
			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_ID, (array) $values, Criteria::IN);
			// invalidate the cache for this object(s)
			foreach ((array) $values as $singleval) {
				DisposicionfinalresiduosaseoPeer::removeInstanceFromPool($singleval);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);
			DisposicionfinalresiduosaseoPeer::clearRelatedInstancePool();
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given Disposicionfinalresiduosaseo object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      Disposicionfinalresiduosaseo $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(Disposicionfinalresiduosaseo $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(DisposicionfinalresiduosaseoPeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(DisposicionfinalresiduosaseoPeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		return BasePeer::doValidate(DisposicionfinalresiduosaseoPeer::DATABASE_NAME, DisposicionfinalresiduosaseoPeer::TABLE_NAME, $columns);
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      int $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     Disposicionfinalresiduosaseo
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = DisposicionfinalresiduosaseoPeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(DisposicionfinalresiduosaseoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(DisposicionfinalresiduosaseoPeer::DATABASE_NAME);
		$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_ID, $pk);

		$v = DisposicionfinalresiduosaseoPeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(DisposicionfinalresiduosaseoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(DisposicionfinalresiduosaseoPeer::DATABASE_NAME);
			$criteria->add(DisposicionfinalresiduosaseoPeer::DFR_ID, $pks, Criteria::IN);
			$objs = DisposicionfinalresiduosaseoPeer::doSelect($criteria, $con);
		}
		return $objs;
	}

	// symfony behavior
	
	/**
	 * Returns an array of arrays that contain columns in each unique index.
	 *
	 * @return array
	 */
	static public function getUniqueColumnNames()
	{
	  return array();
	}

	// symfony_behaviors behavior
	
	/**
	 * Returns the name of the hook to call from inside the supplied method.
	 *
	 * @param string $method The calling method
	 *
	 * @return string A hook name for {@link sfMixer}
	 *
	 * @throws LogicException If the method name is not recognized
	 */
	static private function getMixerPreSelectHook($method)
	{
	  if (preg_match('/^do(Select|Count)(Join(All(Except)?)?|Stmt)?/', $method, $match))
	  {
	    return sprintf('BaseDisposicionfinalresiduosaseoPeer:%s:%1$s', 'Count' == $match[1] ? 'doCount' : $match[0]);
	  }
	
	  throw new LogicException(sprintf('Unrecognized function "%s"', $method));
	}

} // BaseDisposicionfinalresiduosaseoPeer

// This is the static code needed to register the TableMap for this table with the main Propel class.
//
BaseDisposicionfinalresiduosaseoPeer::buildTableMap();

