<?php

/**
 * Base static class for performing query and update operations on the 'informacioncontable' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 07/29/10 20:57:40
 *
 * @package    lib.model.om
 */
abstract class BaseInformacioncontablePeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'informacioncontable';

	/** the related Propel class for this table */
	const OM_CLASS = 'Informacioncontable';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.Informacioncontable';

	/** the related TableMap class for this table */
	const TM_CLASS = 'InformacioncontableTableMap';
	
	/** The total number of columns. */
	const NUM_COLUMNS = 27;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the ICO_ID field */
	const ICO_ID = 'informacioncontable.ICO_ID';

	/** the column name for the ICO_IAF_ID field */
	const ICO_IAF_ID = 'informacioncontable.ICO_IAF_ID';

	/** the column name for the ICO_BALANCE_GENERAL field */
	const ICO_BALANCE_GENERAL = 'informacioncontable.ICO_BALANCE_GENERAL';

	/** the column name for the ICO_ACTIVOS field */
	const ICO_ACTIVOS = 'informacioncontable.ICO_ACTIVOS';

	/** the column name for the ICO_ACTIVOS_CORRIENTES field */
	const ICO_ACTIVOS_CORRIENTES = 'informacioncontable.ICO_ACTIVOS_CORRIENTES';

	/** the column name for the ICO_EFECTIVO field */
	const ICO_EFECTIVO = 'informacioncontable.ICO_EFECTIVO';

	/** the column name for the ICO_DEUDORES field */
	const ICO_DEUDORES = 'informacioncontable.ICO_DEUDORES';

	/** the column name for the ICO_INVENTARIO field */
	const ICO_INVENTARIO = 'informacioncontable.ICO_INVENTARIO';

	/** the column name for the ICO_ACTIVOS_FIJOS field */
	const ICO_ACTIVOS_FIJOS = 'informacioncontable.ICO_ACTIVOS_FIJOS';

	/** the column name for the ICO_PROPIEDAD_PLANTA_EQUIPOS field */
	const ICO_PROPIEDAD_PLANTA_EQUIPOS = 'informacioncontable.ICO_PROPIEDAD_PLANTA_EQUIPOS';

	/** the column name for the ICO_OTROS_ACTIVOS field */
	const ICO_OTROS_ACTIVOS = 'informacioncontable.ICO_OTROS_ACTIVOS';

	/** the column name for the ICO_PASIVOS field */
	const ICO_PASIVOS = 'informacioncontable.ICO_PASIVOS';

	/** the column name for the ICO_PASIVOS_CORRIENTES field */
	const ICO_PASIVOS_CORRIENTES = 'informacioncontable.ICO_PASIVOS_CORRIENTES';

	/** the column name for the ICO_OBLIGACIONES_FINANCIERAS field */
	const ICO_OBLIGACIONES_FINANCIERAS = 'informacioncontable.ICO_OBLIGACIONES_FINANCIERAS';

	/** the column name for the ICO_OTRAS_CUENTAS_POR_PAGAR field */
	const ICO_OTRAS_CUENTAS_POR_PAGAR = 'informacioncontable.ICO_OTRAS_CUENTAS_POR_PAGAR';

	/** the column name for the ICO_OBLIGACIONES_LABORALES field */
	const ICO_OBLIGACIONES_LABORALES = 'informacioncontable.ICO_OBLIGACIONES_LABORALES';

	/** the column name for the ICO_OTROS_PASIVOS field */
	const ICO_OTROS_PASIVOS = 'informacioncontable.ICO_OTROS_PASIVOS';

	/** the column name for the ICO_PATRIMONIO field */
	const ICO_PATRIMONIO = 'informacioncontable.ICO_PATRIMONIO';

	/** the column name for the ICO_ESTADO_DE_RESULTADOS field */
	const ICO_ESTADO_DE_RESULTADOS = 'informacioncontable.ICO_ESTADO_DE_RESULTADOS';

	/** the column name for the ICO_TOTAL_INGRESOS field */
	const ICO_TOTAL_INGRESOS = 'informacioncontable.ICO_TOTAL_INGRESOS';

	/** the column name for the ICO_INGRESOS_OPERACIONALES field */
	const ICO_INGRESOS_OPERACIONALES = 'informacioncontable.ICO_INGRESOS_OPERACIONALES';

	/** the column name for the ICO_INGRESOS_NO_OPERACIONALES field */
	const ICO_INGRESOS_NO_OPERACIONALES = 'informacioncontable.ICO_INGRESOS_NO_OPERACIONALES';

	/** the column name for the ICO_TOTAL_EGRESOS field */
	const ICO_TOTAL_EGRESOS = 'informacioncontable.ICO_TOTAL_EGRESOS';

	/** the column name for the ICO_GASTOS_ADMINISTRATIVOS field */
	const ICO_GASTOS_ADMINISTRATIVOS = 'informacioncontable.ICO_GASTOS_ADMINISTRATIVOS';

	/** the column name for the ICO_COSTO_OPERACION_MANTENIMIENTO field */
	const ICO_COSTO_OPERACION_MANTENIMIENTO = 'informacioncontable.ICO_COSTO_OPERACION_MANTENIMIENTO';

	/** the column name for the ICO_COSTO_INVERSION field */
	const ICO_COSTO_INVERSION = 'informacioncontable.ICO_COSTO_INVERSION';

	/** the column name for the ICO_RESULTADOS_EJERCICIO field */
	const ICO_RESULTADOS_EJERCICIO = 'informacioncontable.ICO_RESULTADOS_EJERCICIO';

	/**
	 * An identiy map to hold any loaded instances of Informacioncontable objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array Informacioncontable[]
	 */
	public static $instances = array();


	// symfony behavior
	
	/**
	 * Indicates whether the current model includes I18N.
	 */
	const IS_I18N = false;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('IcoId', 'IcoIafId', 'IcoBalanceGeneral', 'IcoActivos', 'IcoActivosCorrientes', 'IcoEfectivo', 'IcoDeudores', 'IcoInventario', 'IcoActivosFijos', 'IcoPropiedadPlantaEquipos', 'IcoOtrosActivos', 'IcoPasivos', 'IcoPasivosCorrientes', 'IcoObligacionesFinancieras', 'IcoOtrasCuentasPorPagar', 'IcoObligacionesLaborales', 'IcoOtrosPasivos', 'IcoPatrimonio', 'IcoEstadoDeResultados', 'IcoTotalIngresos', 'IcoIngresosOperacionales', 'IcoIngresosNoOperacionales', 'IcoTotalEgresos', 'IcoGastosAdministrativos', 'IcoCostoOperacionMantenimiento', 'IcoCostoInversion', 'IcoResultadosEjercicio', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('icoId', 'icoIafId', 'icoBalanceGeneral', 'icoActivos', 'icoActivosCorrientes', 'icoEfectivo', 'icoDeudores', 'icoInventario', 'icoActivosFijos', 'icoPropiedadPlantaEquipos', 'icoOtrosActivos', 'icoPasivos', 'icoPasivosCorrientes', 'icoObligacionesFinancieras', 'icoOtrasCuentasPorPagar', 'icoObligacionesLaborales', 'icoOtrosPasivos', 'icoPatrimonio', 'icoEstadoDeResultados', 'icoTotalIngresos', 'icoIngresosOperacionales', 'icoIngresosNoOperacionales', 'icoTotalEgresos', 'icoGastosAdministrativos', 'icoCostoOperacionMantenimiento', 'icoCostoInversion', 'icoResultadosEjercicio', ),
		BasePeer::TYPE_COLNAME => array (self::ICO_ID, self::ICO_IAF_ID, self::ICO_BALANCE_GENERAL, self::ICO_ACTIVOS, self::ICO_ACTIVOS_CORRIENTES, self::ICO_EFECTIVO, self::ICO_DEUDORES, self::ICO_INVENTARIO, self::ICO_ACTIVOS_FIJOS, self::ICO_PROPIEDAD_PLANTA_EQUIPOS, self::ICO_OTROS_ACTIVOS, self::ICO_PASIVOS, self::ICO_PASIVOS_CORRIENTES, self::ICO_OBLIGACIONES_FINANCIERAS, self::ICO_OTRAS_CUENTAS_POR_PAGAR, self::ICO_OBLIGACIONES_LABORALES, self::ICO_OTROS_PASIVOS, self::ICO_PATRIMONIO, self::ICO_ESTADO_DE_RESULTADOS, self::ICO_TOTAL_INGRESOS, self::ICO_INGRESOS_OPERACIONALES, self::ICO_INGRESOS_NO_OPERACIONALES, self::ICO_TOTAL_EGRESOS, self::ICO_GASTOS_ADMINISTRATIVOS, self::ICO_COSTO_OPERACION_MANTENIMIENTO, self::ICO_COSTO_INVERSION, self::ICO_RESULTADOS_EJERCICIO, ),
		BasePeer::TYPE_FIELDNAME => array ('ico_id', 'ico_iaf_id', 'ico_balance_general', 'ico_activos', 'ico_activos_corrientes', 'ico_efectivo', 'ico_deudores', 'ico_inventario', 'ico_activos_fijos', 'ico_propiedad_planta_equipos', 'ico_otros_activos', 'ico_pasivos', 'ico_pasivos_corrientes', 'ico_obligaciones_financieras', 'ico_otras_cuentas_por_pagar', 'ico_obligaciones_laborales', 'ico_otros_pasivos', 'ico_patrimonio', 'ico_estado_de_resultados', 'ico_total_ingresos', 'ico_ingresos_operacionales', 'ico_ingresos_no_operacionales', 'ico_total_egresos', 'ico_gastos_administrativos', 'ico_costo_operacion_mantenimiento', 'ico_costo_inversion', 'ico_resultados_ejercicio', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('IcoId' => 0, 'IcoIafId' => 1, 'IcoBalanceGeneral' => 2, 'IcoActivos' => 3, 'IcoActivosCorrientes' => 4, 'IcoEfectivo' => 5, 'IcoDeudores' => 6, 'IcoInventario' => 7, 'IcoActivosFijos' => 8, 'IcoPropiedadPlantaEquipos' => 9, 'IcoOtrosActivos' => 10, 'IcoPasivos' => 11, 'IcoPasivosCorrientes' => 12, 'IcoObligacionesFinancieras' => 13, 'IcoOtrasCuentasPorPagar' => 14, 'IcoObligacionesLaborales' => 15, 'IcoOtrosPasivos' => 16, 'IcoPatrimonio' => 17, 'IcoEstadoDeResultados' => 18, 'IcoTotalIngresos' => 19, 'IcoIngresosOperacionales' => 20, 'IcoIngresosNoOperacionales' => 21, 'IcoTotalEgresos' => 22, 'IcoGastosAdministrativos' => 23, 'IcoCostoOperacionMantenimiento' => 24, 'IcoCostoInversion' => 25, 'IcoResultadosEjercicio' => 26, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('icoId' => 0, 'icoIafId' => 1, 'icoBalanceGeneral' => 2, 'icoActivos' => 3, 'icoActivosCorrientes' => 4, 'icoEfectivo' => 5, 'icoDeudores' => 6, 'icoInventario' => 7, 'icoActivosFijos' => 8, 'icoPropiedadPlantaEquipos' => 9, 'icoOtrosActivos' => 10, 'icoPasivos' => 11, 'icoPasivosCorrientes' => 12, 'icoObligacionesFinancieras' => 13, 'icoOtrasCuentasPorPagar' => 14, 'icoObligacionesLaborales' => 15, 'icoOtrosPasivos' => 16, 'icoPatrimonio' => 17, 'icoEstadoDeResultados' => 18, 'icoTotalIngresos' => 19, 'icoIngresosOperacionales' => 20, 'icoIngresosNoOperacionales' => 21, 'icoTotalEgresos' => 22, 'icoGastosAdministrativos' => 23, 'icoCostoOperacionMantenimiento' => 24, 'icoCostoInversion' => 25, 'icoResultadosEjercicio' => 26, ),
		BasePeer::TYPE_COLNAME => array (self::ICO_ID => 0, self::ICO_IAF_ID => 1, self::ICO_BALANCE_GENERAL => 2, self::ICO_ACTIVOS => 3, self::ICO_ACTIVOS_CORRIENTES => 4, self::ICO_EFECTIVO => 5, self::ICO_DEUDORES => 6, self::ICO_INVENTARIO => 7, self::ICO_ACTIVOS_FIJOS => 8, self::ICO_PROPIEDAD_PLANTA_EQUIPOS => 9, self::ICO_OTROS_ACTIVOS => 10, self::ICO_PASIVOS => 11, self::ICO_PASIVOS_CORRIENTES => 12, self::ICO_OBLIGACIONES_FINANCIERAS => 13, self::ICO_OTRAS_CUENTAS_POR_PAGAR => 14, self::ICO_OBLIGACIONES_LABORALES => 15, self::ICO_OTROS_PASIVOS => 16, self::ICO_PATRIMONIO => 17, self::ICO_ESTADO_DE_RESULTADOS => 18, self::ICO_TOTAL_INGRESOS => 19, self::ICO_INGRESOS_OPERACIONALES => 20, self::ICO_INGRESOS_NO_OPERACIONALES => 21, self::ICO_TOTAL_EGRESOS => 22, self::ICO_GASTOS_ADMINISTRATIVOS => 23, self::ICO_COSTO_OPERACION_MANTENIMIENTO => 24, self::ICO_COSTO_INVERSION => 25, self::ICO_RESULTADOS_EJERCICIO => 26, ),
		BasePeer::TYPE_FIELDNAME => array ('ico_id' => 0, 'ico_iaf_id' => 1, 'ico_balance_general' => 2, 'ico_activos' => 3, 'ico_activos_corrientes' => 4, 'ico_efectivo' => 5, 'ico_deudores' => 6, 'ico_inventario' => 7, 'ico_activos_fijos' => 8, 'ico_propiedad_planta_equipos' => 9, 'ico_otros_activos' => 10, 'ico_pasivos' => 11, 'ico_pasivos_corrientes' => 12, 'ico_obligaciones_financieras' => 13, 'ico_otras_cuentas_por_pagar' => 14, 'ico_obligaciones_laborales' => 15, 'ico_otros_pasivos' => 16, 'ico_patrimonio' => 17, 'ico_estado_de_resultados' => 18, 'ico_total_ingresos' => 19, 'ico_ingresos_operacionales' => 20, 'ico_ingresos_no_operacionales' => 21, 'ico_total_egresos' => 22, 'ico_gastos_administrativos' => 23, 'ico_costo_operacion_mantenimiento' => 24, 'ico_costo_inversion' => 25, 'ico_resultados_ejercicio' => 26, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, )
	);

	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. InformacioncontablePeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(InformacioncontablePeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_ID);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_IAF_ID);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_BALANCE_GENERAL);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_ACTIVOS);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_ACTIVOS_CORRIENTES);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_EFECTIVO);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_DEUDORES);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_INVENTARIO);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_ACTIVOS_FIJOS);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_PROPIEDAD_PLANTA_EQUIPOS);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_OTROS_ACTIVOS);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_PASIVOS);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_PASIVOS_CORRIENTES);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_OBLIGACIONES_FINANCIERAS);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_OTRAS_CUENTAS_POR_PAGAR);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_OBLIGACIONES_LABORALES);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_OTROS_PASIVOS);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_PATRIMONIO);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_ESTADO_DE_RESULTADOS);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_TOTAL_INGRESOS);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_INGRESOS_OPERACIONALES);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_INGRESOS_NO_OPERACIONALES);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_TOTAL_EGRESOS);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_GASTOS_ADMINISTRATIVOS);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_COSTO_OPERACION_MANTENIMIENTO);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_COSTO_INVERSION);
		$criteria->addSelectColumn(InformacioncontablePeer::ICO_RESULTADOS_EJERCICIO);
	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(InformacioncontablePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			InformacioncontablePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(InformacioncontablePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseInformacioncontablePeer', $criteria, $con);
		}

		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     Informacioncontable
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = InformacioncontablePeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return InformacioncontablePeer::populateObjects(InformacioncontablePeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(InformacioncontablePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			InformacioncontablePeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);
		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseInformacioncontablePeer', $criteria, $con);
		}


		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      Informacioncontable $value A Informacioncontable object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(Informacioncontable $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getIcoId();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A Informacioncontable object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof Informacioncontable) {
				$key = (string) $value->getIcoId();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or Informacioncontable object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     Informacioncontable Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Method to invalidate the instance pool of all tables related to informacioncontable
	 * by a foreign key with ON DELETE CASCADE
	 */
	public static function clearRelatedInstancePool()
	{
	}

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol] === null) {
			return null;
		}
		return (string) $row[$startcol];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = InformacioncontablePeer::getOMClass(false);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = InformacioncontablePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = InformacioncontablePeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				InformacioncontablePeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the number of rows matching criteria, joining the related Administrativafinanciera table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAdministrativafinanciera(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(InformacioncontablePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			InformacioncontablePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(InformacioncontablePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(InformacioncontablePeer::ICO_IAF_ID, AdministrativafinancieraPeer::IAF_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseInformacioncontablePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of Informacioncontable objects pre-filled with their Administrativafinanciera objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Informacioncontable objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAdministrativafinanciera(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		InformacioncontablePeer::addSelectColumns($criteria);
		$startcol = (InformacioncontablePeer::NUM_COLUMNS - InformacioncontablePeer::NUM_LAZY_LOAD_COLUMNS);
		AdministrativafinancieraPeer::addSelectColumns($criteria);

		$criteria->addJoin(InformacioncontablePeer::ICO_IAF_ID, AdministrativafinancieraPeer::IAF_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseInformacioncontablePeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = InformacioncontablePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = InformacioncontablePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = InformacioncontablePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				InformacioncontablePeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = AdministrativafinancieraPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = AdministrativafinancieraPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = AdministrativafinancieraPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					AdministrativafinancieraPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded
				
				// Add the $obj1 (Informacioncontable) to $obj2 (Administrativafinanciera)
				$obj2->addInformacioncontable($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining all related tables
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAll(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(InformacioncontablePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			InformacioncontablePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(InformacioncontablePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(InformacioncontablePeer::ICO_IAF_ID, AdministrativafinancieraPeer::IAF_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseInformacioncontablePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}

	/**
	 * Selects a collection of Informacioncontable objects pre-filled with all related objects.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Informacioncontable objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAll(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		InformacioncontablePeer::addSelectColumns($criteria);
		$startcol2 = (InformacioncontablePeer::NUM_COLUMNS - InformacioncontablePeer::NUM_LAZY_LOAD_COLUMNS);

		AdministrativafinancieraPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (AdministrativafinancieraPeer::NUM_COLUMNS - AdministrativafinancieraPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(InformacioncontablePeer::ICO_IAF_ID, AdministrativafinancieraPeer::IAF_ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseInformacioncontablePeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = InformacioncontablePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = InformacioncontablePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = InformacioncontablePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				InformacioncontablePeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined Administrativafinanciera rows

			$key2 = AdministrativafinancieraPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = AdministrativafinancieraPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = AdministrativafinancieraPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					AdministrativafinancieraPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 loaded

				// Add the $obj1 (Informacioncontable) to the collection in $obj2 (Administrativafinanciera)
				$obj2->addInformacioncontable($obj1);
			} // if joined row not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * Add a TableMap instance to the database for this peer class.
	 */
	public static function buildTableMap()
	{
	  $dbMap = Propel::getDatabaseMap(BaseInformacioncontablePeer::DATABASE_NAME);
	  if (!$dbMap->hasTable(BaseInformacioncontablePeer::TABLE_NAME))
	  {
	    $dbMap->addTableObject(new InformacioncontableTableMap());
	  }
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * If $withPrefix is true, the returned path
	 * uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @param      boolean  Whether or not to return the path wit hthe class name 
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass($withPrefix = true)
	{
		return $withPrefix ? InformacioncontablePeer::CLASS_DEFAULT : InformacioncontablePeer::OM_CLASS;
	}

	/**
	 * Method perform an INSERT on the database, given a Informacioncontable or Criteria object.
	 *
	 * @param      mixed $values Criteria or Informacioncontable object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{
    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseInformacioncontablePeer:doInsert:pre') as $sf_hook)
    {
      if (false !== $sf_hook_retval = call_user_func($sf_hook, 'BaseInformacioncontablePeer', $values, $con))
      {
        return $sf_hook_retval;
      }
    }

		if ($con === null) {
			$con = Propel::getConnection(InformacioncontablePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from Informacioncontable object
		}

		if ($criteria->containsKey(InformacioncontablePeer::ICO_ID) && $criteria->keyContainsValue(InformacioncontablePeer::ICO_ID) ) {
			throw new PropelException('Cannot insert a value for auto-increment primary key ('.InformacioncontablePeer::ICO_ID.')');
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseInformacioncontablePeer:doInsert:post') as $sf_hook)
    {
      call_user_func($sf_hook, 'BaseInformacioncontablePeer', $values, $con, $pk);
    }

		return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a Informacioncontable or Criteria object.
	 *
	 * @param      mixed $values Criteria or Informacioncontable object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{
    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseInformacioncontablePeer:doUpdate:pre') as $sf_hook)
    {
      if (false !== $sf_hook_retval = call_user_func($sf_hook, 'BaseInformacioncontablePeer', $values, $con))
      {
        return $sf_hook_retval;
      }
    }

		if ($con === null) {
			$con = Propel::getConnection(InformacioncontablePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(InformacioncontablePeer::ICO_ID);
			$selectCriteria->add(InformacioncontablePeer::ICO_ID, $criteria->remove(InformacioncontablePeer::ICO_ID), $comparison);

		} else { // $values is Informacioncontable object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);

    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseInformacioncontablePeer:doUpdate:post') as $sf_hook)
    {
      call_user_func($sf_hook, 'BaseInformacioncontablePeer', $values, $con, $ret);
    }

    return $ret;
	}

	/**
	 * Method to DELETE all rows from the informacioncontable table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(InformacioncontablePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(InformacioncontablePeer::TABLE_NAME, $con);
			// Because this db requires some delete cascade/set null emulation, we have to
			// clear the cached instance *after* the emulation has happened (since
			// instances get re-added by the select statement contained therein).
			InformacioncontablePeer::clearInstancePool();
			InformacioncontablePeer::clearRelatedInstancePool();
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a Informacioncontable or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or Informacioncontable object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(InformacioncontablePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			InformacioncontablePeer::clearInstancePool();
			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof Informacioncontable) { // it's a model object
			// invalidate the cache for this single object
			InformacioncontablePeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else { // it's a primary key, or an array of pks
			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(InformacioncontablePeer::ICO_ID, (array) $values, Criteria::IN);
			// invalidate the cache for this object(s)
			foreach ((array) $values as $singleval) {
				InformacioncontablePeer::removeInstanceFromPool($singleval);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);
			InformacioncontablePeer::clearRelatedInstancePool();
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given Informacioncontable object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      Informacioncontable $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(Informacioncontable $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(InformacioncontablePeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(InformacioncontablePeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		return BasePeer::doValidate(InformacioncontablePeer::DATABASE_NAME, InformacioncontablePeer::TABLE_NAME, $columns);
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      int $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     Informacioncontable
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = InformacioncontablePeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(InformacioncontablePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(InformacioncontablePeer::DATABASE_NAME);
		$criteria->add(InformacioncontablePeer::ICO_ID, $pk);

		$v = InformacioncontablePeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(InformacioncontablePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(InformacioncontablePeer::DATABASE_NAME);
			$criteria->add(InformacioncontablePeer::ICO_ID, $pks, Criteria::IN);
			$objs = InformacioncontablePeer::doSelect($criteria, $con);
		}
		return $objs;
	}

	// symfony behavior
	
	/**
	 * Returns an array of arrays that contain columns in each unique index.
	 *
	 * @return array
	 */
	static public function getUniqueColumnNames()
	{
	  return array();
	}

	// symfony_behaviors behavior
	
	/**
	 * Returns the name of the hook to call from inside the supplied method.
	 *
	 * @param string $method The calling method
	 *
	 * @return string A hook name for {@link sfMixer}
	 *
	 * @throws LogicException If the method name is not recognized
	 */
	static private function getMixerPreSelectHook($method)
	{
	  if (preg_match('/^do(Select|Count)(Join(All(Except)?)?|Stmt)?/', $method, $match))
	  {
	    return sprintf('BaseInformacioncontablePeer:%s:%1$s', 'Count' == $match[1] ? 'doCount' : $match[0]);
	  }
	
	  throw new LogicException(sprintf('Unrecognized function "%s"', $method));
	}

} // BaseInformacioncontablePeer

// This is the static code needed to register the TableMap for this table with the main Propel class.
//
BaseInformacioncontablePeer::buildTableMap();

